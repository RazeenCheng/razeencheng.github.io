<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Razeen`s Blog</title>
  
  <subtitle>Stay hungry, Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://razeencheng.com/"/>
  <updated>2021-07-10T09:23:16.412Z</updated>
  <id>https://razeencheng.com/</id>
  
  <author>
    <name>Razeen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021 上海人才引进落户全程记录</title>
    <link href="https://razeencheng.com//post/shanghai-settltment-record.html"/>
    <id>https://razeencheng.com//post/shanghai-settltment-record.html</id>
    <published>2021-07-01T08:52:00.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>来上海五年多了，终于落户了。后面小孩子上学相对要简单一些了，身为老父亲的我稍稍松了口气。</p><p>今年上海落户政策放松了不少，趁着这波机会，我司帮忙提出了落户申请。 从公司提出申请到拿到户口卡，整个过程持续约3个月。</p><p>这篇博客记录一下整个人才引进落户的过程，供各位童鞋参考。</p><a id="more"></a><h3 id="04-06-成功提交申请"><a href="#04-06-成功提交申请" class="headerlink" title="04.06 成功提交申请"></a>04.06 成功提交申请</h3><p>第一步，人事在人社系统中提交人才引进落户申请。</p><p>这一步要准备各种材料，提交给人才服务中心，人才服务中心会有专人审核，不通过会在系统内提示哪些地方有问题，修改确认后再提交，再审核，反复直到全部材料符合要求。</p><p>其中，主要材料如下。</p><p><img data-src="https://st.razeen.cn/img/20210701223502-image-20210701223459754.png" alt="image-20210701223459754"></p><p>当然，除了这些材料外，还要填写很多相关的信息，其中有一项是写个人的业绩，这项需要好好写一下，突出个人的能力，为公司、社会带来的价值，这样才能突出自己是个不可或缺的 “人才”。</p><p>在提交这些材料的过程中，被打回来多次，下面是一些原因，可供参考。</p><p><img data-src="https://st.razeen.cn/img/20210701234222-image-20210701234216329.png" alt="image-20210701224106417"></p><p><img data-src="https://st.razeen.cn/img/20210701234247-image-20210701234245017.png" alt="image-20210701234245017"></p><p><img data-src="https://st.razeen.cn/img/20210701234309-image-20210701234307437.png" alt="image-20210701234307437"></p><p><img data-src="https://st.razeen.cn/img/20210701234332-image-20210701234328114.png" alt="image-20210701234328114"></p><p>反复提交，确认，修改，4月6号这天终于提交显示没问题了，中间辛苦人事小姐姐反复确认~</p><p>之后就是等待预受理了。</p><h3 id="04-14-预受理通过，出具调档函"><a href="#04-14-预受理通过，出具调档函" class="headerlink" title="04.14 预受理通过，出具调档函"></a>04.14 预受理通过，出具调档函</h3><p>经过一个多星期的等待， 在 “上海人社” App中可以查看到进度状态有了，显示预受理通过。</p><p><img data-src="https://st.razeen.cn/img/20210701233207-image-20210701233150193.png" alt="image-20210701233150193"></p><p>当然，人事的系统也是可以看到的：</p><p><img data-src="https://st.razeen.cn/img/20210702000021-image-20210701224759593.png" alt="image-20210701224759593"></p><p>这时，人事是可以下载到调档函的。收到调档函后，联系老家亲戚帮忙彩色打印好，带着身份证复印件，就去老家的人才中心调档案了。</p><h3 id="04-21-档案调出"><a href="#04-21-档案调出" class="headerlink" title="04.21 档案调出"></a>04.21 档案调出</h3><p>提交调档函后，打电话回家确认了几次。人才中心告诉我，在4月21号档案通过机要寄出。</p><h3 id="04-30-档案核实完成"><a href="#04-30-档案核实完成" class="headerlink" title="04.30 档案核实完成"></a>04.30 档案核实完成</h3><p>4月30号，人社App状态更新，继续等待。</p><p><img data-src="https://st.razeen.cn/img/20210701233229-image-20210701233223329.png" alt="image-20210701233223329"></p><h3 id="05-07-网上受理通过"><a href="#05-07-网上受理通过" class="headerlink" title="05.07 网上受理通过"></a>05.07 网上受理通过</h3><p>5月7号，网上状态再次更新，提示需要准备材料到现场提交了。</p><p><img data-src="https://st.razeen.cn/img/20210701233250-image-20210701233245451.png" alt="image-20210701233245451"></p><p>在这中间还出了点小插曲，我的毕业证和学位证原件不见了，回学校补办了一下，还写了篇博客<a href="https://razeencheng.com/post/fill-do-degree-graduation-certificate.html">《记录学位证、毕业证补办过程》</a>记录了一下。</p><h3 id="05-28-现场提交材料"><a href="#05-28-现场提交材料" class="headerlink" title="05.28 现场提交材料"></a>05.28 现场提交材料</h3><p>5月28号，带着网上提交的全部材料，和人事小姐姐一起到现场提交了。原来还担心补办的学位证和原来提交不一致，会有问题，还好最后并不影响。</p><h3 id="06-01-现场受理通过"><a href="#06-01-现场受理通过" class="headerlink" title="06.01 现场受理通过"></a>06.01 现场受理通过</h3><p>6月1号，正值儿童节，人事通知我，现场受理通过了。App上稍微延迟一点，也查到了。</p><p><img data-src="https://st.razeen.cn/img/20210701233305-image-20210701233304279.png" alt="image-20210701233304279"></p><p>接着就是区里和市里审核了，静静等待。</p><h3 id="06-09-审核中"><a href="#06-09-审核中" class="headerlink" title="06.09 审核中"></a>06.09 审核中</h3><p>6月9号，人社App显示审核中，继续等待。</p><p><img data-src="https://st.razeen.cn/img/20210701233404-image-20210701233327062.png" alt="image-20210701233327062"></p><h3 id="06-15-公示中"><a href="#06-15-公示中" class="headerlink" title="06.15 公示中"></a>06.15 公示中</h3><p>6月15日早上，一起办理的同事告诉我，在人社的官网看到我两的名字在这一批的公示名单中了，激动。</p><p>此时App状态还没有更新。</p><p>6月16号，App状态才改变，继续等待。</p><p><img data-src="https://st.razeen.cn/img/20210701233354-image-20210701233352525.png" alt="image-20210701233352525"></p><h3 id="06-21-公示结束"><a href="#06-21-公示结束" class="headerlink" title="06.21 公示结束"></a>06.21 公示结束</h3><p>6月21号，人事告知公示结束了，等3-5天就可以到 上海公安公众号 或随申办 查查看准迁信息了。</p><p>人社App上的信息也是一天后才更新。</p><p><img data-src="https://st.razeen.cn/img/20210701233421-image-20210701233419232.png" alt="image-20210701233419232"></p><h3 id="06-24-查询到准迁信息"><a href="#06-24-查询到准迁信息" class="headerlink" title="06.24 查询到准迁信息"></a>06.24 查询到准迁信息</h3><p>6月24号，在随申办 “落户审批查询” 中查询到准迁信息。</p><p><img data-src="https://st.razeen.cn/img/20210701235906-image-20210701231855480.png" alt="image-20210701231855480"></p><h3 id="06-25-办理准迁证"><a href="#06-25-办理准迁证" class="headerlink" title="06.25 办理准迁证"></a>06.25 办理准迁证</h3><p>6月25日，带着身份证，户口本，结婚证，宝宝的出生证书，到居住街道的派出所 户籍窗口 办好了 准迁证。全程30分钟不到。</p><p><img data-src="https://st.razeen.cn/img/20210701235832-image-20210701231830638.png" alt="image-20210701231830638"></p><h3 id="06-29-办理迁移证"><a href="#06-29-办理迁移证" class="headerlink" title="06.29 办理迁移证"></a>06.29 办理迁移证</h3><p>回老家，拿着 准迁证，身份证，户口本，以及人口登记表 到户籍所在派出所办理迁移证。其中，人口登记表还是在村里，办理的时候没拿，联系亲戚后补过去的。</p><p><img data-src="https://st.razeen.cn/img/20210701235954-image-20210701232421182.png" alt="image-20210701232421182"></p><h3 id="06-30-办理户口-身份证"><a href="#06-30-办理户口-身份证" class="headerlink" title="06.30 办理户口/身份证"></a>06.30 办理户口/身份证</h3><p>回到上海，拿着 迁移证，户口本，原身份证，宝宝出生证书，带着宝宝一起到 户籍窗口 办理迁入。</p><p>需要注意的是，办理新身份证要提前拍照，可以到派出所拍，也可以自己到联网公安的照相馆拍，我就是在后者拍的，效果要好点。</p><p>办理的时候，需要填写两张表，一张“进沪人员‘社区公共户’申请表” 和 一张 “生育状态承诺书”， 按要求填好之后，继续办理。</p><p>最后，当场拿到户口卡。身份证邮寄7个工作日到，现场拿15个工作日到, 原身份证直接给没收了。。。</p><p><img data-src="https://st.razeen.cn/img/20210701235938-image-20210701233006758.png" alt="image-20210701233006758"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>到这里，整个人才引进落户过程结束了。</p><p>说实话，拿到户口卡后，第一感觉不是开心，反而更多一点焦虑。 户口卡是三年有效期的，只有买房了才能拿到户口本。再看看当下的收入与上海的房价，肩上顿觉有一座大山，呼吸艰难。</p><p>但，已经向前迈了一步，不是么。坚持努力，多思考，相信未来还是很美好的。总之，一起加油，为了更美好的明天。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来上海五年多了，终于落户了。后面小孩子上学相对要简单一些了，身为老父亲的我稍稍松了口气。&lt;/p&gt;&lt;p&gt;今年上海落户政策放松了不少，趁着这波机会，我司帮忙提出了落户申请。 从公司提出申请到拿到户口卡，整个过程持续约3个月。&lt;/p&gt;&lt;p&gt;这篇博客记录一下整个人才引进落户的过程，供各位童鞋参考。&lt;/p&gt;
    
    </summary>
    
      <category term="生活记实" scheme="https://razeencheng.com/categories/life/"/>
    
    
      <category term="落户" scheme="https://razeencheng.com/tags/%E8%90%BD%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions 初体验之自动化部署 Hexo 博客</title>
    <link href="https://razeencheng.com//post/use-github-action-to-deploy-your-hexo-blog.html"/>
    <id>https://razeencheng.com//post/use-github-action-to-deploy-your-hexo-blog.html</id>
    <published>2021-06-26T03:43:33.000Z</published>
    <updated>2021-07-10T09:23:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>觊觎了 Github Actions 很久了，昨天尝试将自己的博客用它来部署，总体下来感觉不错。</p><p>Github Actions 是 Github 推出的自动化工作流， 就像 Gitlab 的 CI/CD, Travis CI 一样，能帮我们完成一些 CI/CD 的工作流，实现自动化构建、测试、打包、部署等等。</p><p>这篇文章主要实现 只需要将文章推送到 Github ，Github Actions 自动完成构建静态文件，以及更新 Github Pages 仓库的流程。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>先创建一个私有仓库，存放我们的 Hexo 主题以及配置；</li><li>在上面仓库中创建一个工作流，每次推送可以触发执行 打包、生成静态文件；</li><li>自动将静态文件推送到 yourname.github.io Github Pages 仓库；</li></ol><p>有了思路我们就开始准备工作。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><p>创建好了你的 yourname.github.io Github Pages 仓库;</p></li><li><p>在 Hexo 配置文件<code>config.yaml</code> 中配置好部署配置，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>创建一个私有仓库，将 Hexo 配置以及主题 文件推送上来;</p></li><li><p>然后，我们需要创建一个 SSH 部署密钥（在部署的时候，Github Actions 需要推送文件到 yourname.github.io, 为了安全，我们单独添加一个部署密钥）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-page-deploy-key</span><br></pre></td></tr></table></figure><p>执行以上命令可以生成 SSH 密钥对，公钥<code>github-page-deploy-key.pub</code> 与 私钥 <code>github-page-deploy-key</code>。</p></li><li><p>我们将私钥配置到 Hexo 仓库的 <code>Secrets</code> 中。 打开 <code>Settings -&gt; Secrets -&gt; New repository secret</code>, 如下图所示：</p><p><img data-src="https://st.razeen.cn/img/blog/Snipaste_2021-06-24_23-42-01.png" alt></p><p>通过记事本等打开 <code>github-page-deploy-key</code> 内容，填入 <code>Value</code> 中；</p><p>在 <code>Name</code> 中为该 <code>Secrets</code> 设置一个名字，如 <code>MY_BLOG_DEPLOY_KEY</code>, 后面写 Action 配置文件会用到。</p></li><li><p>在 GitHub Pages 仓库中添加公钥<code>github-page-deploy-key.pub</code>， 打开 <code>Settings -&gt; Deploy Keys -&gt; Add deploy key</code> , 如下图所示：</p><p><img data-src="https://st.razeen.cn/img/blog/Snipaste_2021-06-24_23-50-42.png" alt></p><p>在 <code>Key</code> 中粘贴 公钥<code>github-page-deploy-key.pub</code> 内容；</p><p><code>Title</code> 可以随便取一个名字， <strong>勾选上 <code>Allow write access</code> </strong>。</p></li></ol><p>到这里，我们的准备工作就完成了，开始创建并编排工作流。</p><h3 id="创建并编排-Github-Actions"><a href="#创建并编排-Github-Actions" class="headerlink" title="创建并编排 Github Actions"></a>创建并编排 Github Actions</h3><p>在 Hexo 仓库中创建 <code>.github/workflows/deploy.yml</code> 文件，如下图所示：</p><p><img data-src="https://st.razeen.cn/img/blog/Snipaste_2021-06-24_23-58-26.png" alt></p><p>在 <code>deploy.yml</code> 中添加编排配置，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy_my_blog</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build_and_deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">'12'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">ssh</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$SSH_DEPLOY_KEY"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-H</span> <span class="string">'github.com'</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SSH_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.MY_BLOG_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">hexo</span> <span class="string">and</span> <span class="string">npm</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">git</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">me@razeen.me</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">razeencheng</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Blog</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> </span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p>我们来简单看一下这个配置：</p><ul><li><p><code>name: deploy_my_blog</code>: <code>name</code> 定义该工作流的名称为<code>deploy_my_blog</code>。</p></li><li><p><code>on: [push]</code>: <code>on</code> 定义触发条件，<code>push</code> 指我们每次推送的时候触发这个工作流。</p></li><li><p><code>jobs</code>: 在 <code>jobs</code> 中定义这个工作流执行的所有任务。</p><ul><li><p><code>build_and_deploy</code> : 我给这个任务取的<code>ID</code>。</p><ul><li><p><code>runs-on: ubuntu-latest</code>: <code>runs-on</code> 用来指定我们当前这个任务执行的机器。官方给我们几个共享的机器可以使用：</p><p><img data-src="https://st.razeen.cn/img/Snipaste_2021-06-26_17-33-16.png" alt></p><p>我们这里用的 Ubuntu 的机器。</p></li><li><p><code>steps</code>： 在任务中，我们执行的一系列的任务就叫<code>steps</code>。</p><ul><li><p><code>- uses: actions/checkout@v2</code> <code>- uses: actions/setup-node@v2</code> : 用<code>uses</code> 来指定我们需要调用的 Action。</p><p>我们这里用 <code>actions/checkout@v2</code> Checkout 到当前的仓库,</p><p>用<code>actions/setup-node@v2</code> 来安装 Node.js 到当前的环境中，用<code>with: node-version</code> 来指定 Node.js 的版本。由于我使用了一些较老的插件，和新版本<code>Node.js</code>有兼容问题， 所以Node.js 版本使用的是<code>12</code>， 你可以根据你实际情况来。</p></li><li><p>经过上面两个步骤，我们就进入了我们 Hexo 主题和配置仓库中，并且准备好了 <code>Node.js</code> 环境。 接下来，写入部署 SSH 密钥。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">ssh</span> <span class="string">env</span>  <span class="comment"># 给我们这部取一个名字，可以省略</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="string">echo</span> <span class="string">"$SSH_DEPLOY_KEY"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="string">ssh-keyscan</span> <span class="string">-H</span> <span class="string">'github.com'</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">    <span class="attr">SSH_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.MY_BLOG_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><code>env</code>中读取我们设置的<code>Secrets</code>私钥，并写入环境变量<code>SSH_DEPLOY_KEY</code>.</p><p><code>run</code> 中，定义了我们该步骤运行的脚本。创建<code>.ssh</code>目录，写入私钥文件，并添加<code>known_hosts</code>.</p></li><li><p>接下来就是安装 <code>hexo</code> 和 博客需要的插件了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">hexo</span> <span class="string">and</span> <span class="string">npm</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">    <span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure></li><li><p>接下来把 Git 配置好，配置用于推送到 Github Pages 的邮箱和用户，如下，你可以修改成自己的邮箱和用户。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prepare</span> <span class="string">git</span> <span class="string">env</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">me@razeen.me</span></span><br><span class="line">    <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">razeencheng</span></span><br></pre></td></tr></table></figure></li><li><p>万事具备，开始部署，这一步就是我们原来手动部署时执行命令，即生成静态文件，并部署。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">run:</span> <span class="string">|</span> </span><br><span class="line">    <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">    <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><p>这样，我们就编排好了，接下来只需要推送代码就可以触发执行了。</p><p>关于更多的 Github Actions 语法可以看<a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#about-yaml-syntax-for-workflows" target="_blank" rel="noopener">官方文档</a>.</p><h3 id="触发执行"><a href="#触发执行" class="headerlink" title="触发执行"></a>触发执行</h3><p>我们本地将代码推送上去后，可以在 Actions 看到正在执行和历史执行的 Action.</p><p><img data-src="https://st.razeen.cn/img/Snipaste_2021-06-26_18-15-43.png" alt></p><p>点击每一条 Action，可查看详细日志。</p><p><img data-src="https://st.razeen.cn/img/Snipaste_2021-06-26_18-17-39.png" alt></p><p>整个流程执行下来一分钟不到，很快。</p><p>之后，你可以看下你的 Github Pages, 应该是已经更新了~。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Github Action 整体使用下来，感觉很简单，高效。共享的 2核7G的 Runner 也够我们折腾不少东西了。更爽的是，利用这些自动化的工具，不仅让我节省了几分钟打包的时间，更帮我省去了换个机器写博客需要折腾环境的问题。</p><p>同时也希望能够帮到你。</p><p><strong>参考</strong></p><p><a href="https://docs.github.com/en/actions" target="_blank" rel="noopener">GitHub Actions</a></p><p><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/#%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">利用 Github Actions 自动部署 Hexo 博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;觊觎了 Github Actions 很久了，昨天尝试将自己的博客用它来部署，总体下来感觉不错。&lt;/p&gt;&lt;p&gt;Github Actions 是 Github 推出的自动化工作流， 就像 Gitlab 的 CI/CD, Travis CI 一样，能帮我们完成一些 CI/CD 的工作流，实现自动化构建、测试、打包、部署等等。&lt;/p&gt;&lt;p&gt;这篇文章主要实现 只需要将文章推送到 Github ，Github Actions 自动完成构建静态文件，以及更新 Github Pages 仓库的流程。&lt;/p&gt;
    
    </summary>
    
      <category term="博客折腾日记" scheme="https://razeencheng.com/categories/my-blog/"/>
    
    
      <category term="自动化" scheme="https://razeencheng.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Github Actions" scheme="https://razeencheng.com/tags/Github-Actions/"/>
    
      <category term="CI/CD" scheme="https://razeencheng.com/tags/CI-CD/"/>
    
      <category term="Hexo" scheme="https://razeencheng.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>记录学位证、毕业证补办过程</title>
    <link href="https://razeencheng.com//post/fill-do-degree-graduation-certificate.html"/>
    <id>https://razeencheng.com//post/fill-do-degree-graduation-certificate.html</id>
    <published>2021-04-21T09:17:08.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>毕业证、学位证对于我们真是太重要了，一般人也不会丢。但，如果你像我一样真的丢了，怎么办？</p><p>（PS：从来都没丢过重要东西，头次直接把两个证一起丢了！！）</p><a id="more"></a><p><em>补充：母校合肥学院</em></p><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>丢了后，我Google了一下，看了一些流程，发现都是说的，先登报，然后巴拉巴拉。一看要登报，直接把我劝退。</p><p>继续搜索，发现有机构能帮忙补办，于是我加微信联系了一下。好家伙，真热情，问了学校，立马说能办，本人配合一下就行，14天内能办好，还给出了帮其他人补办的截图，一切看着都不错。最后问了下价格，好家伙，两个证件3400，再次劝退。</p><p>再到淘宝试一试。找了一家补办证件的，1400能办好，但周期大概30天，感觉还是不值且周期长。</p><p>最后还是得靠自己。</p><p>咨询了一下辅导员，嗯，还是辅导员靠谱（辅导员的教诲需要牢记！）。</p><p><img data-src="https://st.razeen.cn/img/diudiu.jpg" alt="辅导员"></p><h3 id="补办流程"><a href="#补办流程" class="headerlink" title="补办流程"></a>补办流程</h3><p>当然，辅导员说的也比较模糊，最后还是直接打电话给教务处咨询了一下，总结下来其实流程很简单：</p><ul><li><p>到学校网站下载“申请书”，如下图；</p><p><img data-src="https://st.razeen.cn/img/apply.png" alt="辅导员"></p><p>在申请表中，我们也看到了登报说明的东西，打电话问教务处，说是已经不用了，很早就取消了。</p></li></ul><ul><li><p>到档案处找老师查档案（开具 新生录取大表复印件（有本人姓名）；学历/学位证书签领表复印件）</p></li><li><p>带上下面材料去 学位办 提交申请。</p><ul><li style="list-style:none"><input type="checkbox">身份证复印件；</li><li style="list-style:none"><input type="checkbox">两张近期蓝底照片，小2寸（包括同底版电子档照片，小于16KB，发送至<a href="mailto:jwcxxk@hfuu.edu.cn" target="_blank" rel="noopener">jwcxxk@hfuu.edu.cn</a>）；</li><li style="list-style:none"><input type="checkbox">新生录取大表复印件（有本人姓名）(院办档案室提供)；</li><li style="list-style:none"><input type="checkbox">学历/学位证书签领表复印件 (院办档案室提供)。</li></ul></li></ul><p>然后等就可以了。</p><p>注：</p><ol><li>开具的证明与原证书具有同等效力。</li><li>毕业证明书将在学信网进行电子标注，以备核查，同时对原注册学历证书标明遗失作废。</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>写这篇文章重点不仅是补办流程，还想说，证件丢了先不要急，先打电话问问证件得源头，不要被一些网上搜索忽悠。也许事情比我们想象得简单很多！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕业证、学位证对于我们真是太重要了，一般人也不会丢。但，如果你像我一样真的丢了，怎么办？&lt;/p&gt;&lt;p&gt;（PS：从来都没丢过重要东西，头次直接把两个证一起丢了！！）&lt;/p&gt;
    
    </summary>
    
      <category term="生活记实" scheme="https://razeencheng.com/categories/life/"/>
    
    
      <category term="生活" scheme="https://razeencheng.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>宝宝入幼儿园全程记录（2021年上海托幼入园政策解读）</title>
    <link href="https://razeencheng.com//post/shanghai-kindergarten-policy-2021.html"/>
    <id>https://razeencheng.com//post/shanghai-kindergarten-policy-2021.html</id>
    <published>2021-04-19T23:23:52.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>一转眼宝宝都3岁多了，9月份就要进入幼儿园了，在这里记录一下托班进入幼儿园的全过程。其中包括了今年的相关政策解读，与实际操作记录。</p><a id="more"></a><h2 id="全程记录"><a href="#全程记录" class="headerlink" title="全程记录"></a>全程记录</h2><p>背景：外地，居住证积分满120。</p><ul><li><p>2021/06/20 领取通知书。由于我要考试，奶奶带去的，听说有小朋友一些吃点心，跳舞，叠衣服等活动。最后拿到通知，以及需要体验和办银行卡的相关说明。现在就等开学啦~</p></li><li><p>2021/06/18 收到录取短信通知，终于放心了, 内容大概如下：</p><p>【浦东学前教育】xxx家长您好，请您于2021年06月20日 10:00-10:45，前往xxx幼儿园xx路xx弄xx号。上海市浦东新区xxx幼儿园xx部领取新生录取通知书，小班新生家长会时间将由幼儿园另行通知。</p></li><li><p>2021/05/16 幼儿园面试。面试过程如下：</p><ul><li><p>准备文件</p><ul><li>入园信息登记表</li><li>孩子出生证明复印和原件</li><li>孩子户口本复印和原件</li><li>租赁备案复印和原件</li><li>孩子居住证复印（居住登记也可) 和原件</li><li>主要监护人的居住证复印和原件</li><li>主要监护人的积分通知单</li><li>主要监护人的社保缴纳证明</li></ul></li><li><p>面试提问（主要是问宝宝一些问题）</p><ul><li>你叫什么名字？</li><li>你多大啦？</li><li>我这里有什么颜色, 什么颜色？（老师一个个指着桌子上的玩具）</li><li>我这有什么水果呀？最喜欢吃什么？不喜欢吃什么？为什么不喜欢呢？</li><li>这是什么动物呀？</li><li>我这里有些积木，你搭一个老师这样的形状试试？</li><li>你会唱歌吗？唱个两只老虎好不好？</li></ul></li><li><p>问家长宝宝的习惯</p><ul><li>有没有过敏体质？对什么过敏？</li><li>吃饭会自己吃么？上厕所之类的</li></ul></li><li><p>算分（根据积分、居住证年限、社保年限 打一个分，规则如下表）</p></li></ul></li></ul><table><thead><tr><th>记分来源</th><th>记分规则</th></tr></thead><tbody><tr><td>积分是满120</td><td>40分</td></tr><tr><td>居住证年限</td><td>每满一个月算一分（最高36分）</td></tr><tr><td>社保缴纳年限</td><td>每满一个月一分（最高36分）</td></tr></tbody></table><ul><li><p>2021/05/08 <a href="https://xqzs.pdedu.sh.cn" target="_blank" rel="noopener">区级平台</a>预约。利用上次注册的账号登录，经过一系列申明确认，最后可以看到上次登记的宝宝信息，根据步骤完善即可。其中选幼儿园可能需要提前做一下功课，然后就是预约面试时间，下载登记表。</p><p><img data-src="https://st.razeen.cn/img/baobao/baobao-02.png" alt></p></li></ul><ul><li><p>2021/04/23 <a href="https://shrydj.edu.sh.cn" target="_blank" rel="noopener">市级平台</a>登记。主要包括注册、登记两个过程，如下图。</p><p><img data-src="https://st.razeen.cn/img/baobao/baobao-01.png" alt></p></li></ul><ul><li>2021/04/19 托班园长对今年的入园政策解读，内容如第二部分。</li></ul><h2 id="托幼入园政策解读"><a href="#托幼入园政策解读" class="headerlink" title="托幼入园政策解读"></a>托幼入园政策解读</h2><p>上周六宝宝托班的园长讲解了一下今年的入园政策，我将内容整理了一下，分享出来。</p><h3 id="主要改动"><a href="#主要改动" class="headerlink" title="主要改动"></a>主要改动</h3><p><img data-src="https://st.razeen.cn/img/20210420000013_image-20210419235904873.png" alt="主要改动"></p><h3 id="幼儿园招生时间表"><a href="#幼儿园招生时间表" class="headerlink" title="幼儿园招生时间表"></a>幼儿园招生时间表</h3><p>主要分为四个阶段</p><ol><li>信息登记：市级平台 4月23日-4月30日</li><li>网上预约：区级平台 5月08日-5月13日</li><li>现场验证：<ol><li>第一批：5月15、16、22、23日</li><li>第二批：6月12、13日</li></ol></li><li>录取通知： 6月18日</li></ol><h3 id="政策解读"><a href="#政策解读" class="headerlink" title="政策解读"></a>政策解读</h3><ul><li>政策原文：<a href="https://edu.sh.gov.cn/cmsres/59/59f9b3a6f99345b69b1adab3bef4878e/194bf5c1bda2c29bde5825d1d1cce7e2.pdf" target="_blank" rel="noopener">上海市教育委员会关于做好2021年本市学前教育阶段适龄幼儿入园工作的通知</a>。</li><li>政策问答：<a href="https://edu.sh.gov.cn/cmsres/09/09c840a111e54e4892f2bf457fd49f15/bdca31e3c26de6f3434ee8f237e5d306.pdf" target="_blank" rel="noopener">2021年上海市适龄幼儿入园工作政策问答</a></li><li>各区政策：<a href="https://shrydj.edu.sh.cn/views/common/contact.html" target="_blank" rel="noopener">本市各区幼儿入园招生政策、联系单位、咨询电话及咨询时间一览表</a></li><li>浦东政策：<a href="http://www.pudong.gov.cn/shpd//Upfiles/FileAttach/733c990d-3fbc-bef1-ac54-dedd4e045a8b/%e5%85%b3%e4%ba%8e%e5%8d%b0%e5%8f%91%e3%80%8a%e6%b5%a6%e4%b8%9c%e6%96%b0%e5%8c%ba%e6%95%99%e8%82%b2%e5%b1%80%e5%85%b3%e4%ba%8e2021%e5%b9%b4%e6%9c%ac%e5%8c%ba%e5%ad%a6%e5%89%8d%e6%95%99%e8%82%b2%e9%98%b6%e6%ae%b5%e9%80%82%e9%be%84%e5%b9%bc%e5%84%bf%e5%85%a5%e5%9b%ad%e5%b7%a5%e4%bd%9c%e7%9a%84%e5%ae%9e%e6%96%bd%e6%84%8f%e8%a7%81%e3%80%8b%e7%9a%84%e9%80%9a%e7%9f%a5.pdf" target="_blank" rel="noopener">关于印发《浦东新区教育局关于2021年本区学前教育阶段适龄幼儿入园工作的实施意见》的通知</a></li></ul><h4 id="信息登记"><a href="#信息登记" class="headerlink" title="信息登记"></a>信息登记</h4><p>信息登记主要注意几点：</p><ol><li>凡入园必须进行登记；</li><li>信息登记及登记顺序均与幼儿是否录取无关（根据政策进行安排）；</li><li>登记先后顺序与录取顺序无关；</li><li><p>登记时间别弄错了，4月23日-4月30日，网址<a href="https://shrydj.edu.sh.cn" target="_blank" rel="noopener">shrydj.edu.sh.cn</a>；</p><p>本次入园的年龄段为：出生日期在 2017/09/01-2018/08/31.<br>幼儿园托班，中大班插班转园以及外籍人员子女学校幼儿不在本次入园信息登记的范围。</p><p>登记后会获取到一个<strong>登记编号</strong>和登记表，这是进入区级入园报名的凭证。</p></li></ol><p><strong>登记条件</strong></p><p>要登记需要（幼儿或家长）有下面的证件之一，没有是无法登记的。</p><ol><li>本市户籍：身份证</li><li>非本市户籍：<ol><li>居住证 或 居住登记凭证；</li><li>港澳具名来往内地通信证 或 港澳居住证；</li><li>台湾居民来往大陆通信证 或 台湾居住证；</li></ol></li><li>外籍： 护照</li></ol><p><strong>信息确认</strong></p><p>登记的时候，会把本市系统里有的信息提供出来，家长确认或修改、补充。</p><p>这里有点比较重要就是：提交后<strong>无法系统内修改</strong>，修改必须有正当理由，而且需要提交书面申请，审核通过后才能改。</p><p>且<br>报名衍生阶段修改的，可以凭证明，在幼儿园进行修改；<br>报名验证结束后要改的，要在区的指定地点登记，然后修改。</p><h4 id="网上预约-浦东新区"><a href="#网上预约-浦东新区" class="headerlink" title="网上预约 (浦东新区)"></a>网上预约 (浦东新区)</h4><p>预约时间：5月8日-5月13日<br>预约地址(浦东新区)：<a href="https://xqzs.pdedu.sh.cn" target="_blank" rel="noopener">xqzs.pdedu.sh.cn</a>.</p><p>家长凭借市里登记拿到的编号，到这个网站预约，获取《2021年浦东新区幼儿入园报名验证预约登记表》，该表作为入园报名的登记凭证。</p><p><strong>预约要求</strong></p><p>可以在地段园所或区招生园里面预约一所，只能预约一所。</p><ol><li>地段园所按照招生地段进行电脑自动分配；</li><li>全区招生园所由家长根据实际情况自行选择；</li><li>一旦选择了区级招生园就不能再选地段园了。</li></ol><p>这里的信息千万不要出错，修改起来也是比较麻烦的，需要正当理由，书面证明且通过审核。</p><h4 id="现场验证（分两批）"><a href="#现场验证（分两批）" class="headerlink" title="现场验证（分两批）"></a>现场验证（分两批）</h4><p><strong>验证时间</strong></p><p>第一批： 5月15、16、22、23日<br>第二批： 6月12、13日</p><p><strong>验证要求</strong></p><ol><li>按照预约验证时间，凭《2021年浦东新区幼儿入园报名验证预约登记表》进行现场验证。</li><li>带好入园需要的相关证件或证明材料原件以及复印件。</li></ol><p><strong>“随申办市民云”</strong>或<strong>“上海一网通办”</strong>中的电子证件照与纸质证件可等同效力使用；</p><p>预约好了，下载打印报名验证预约登记表。</p><p>这里也是，预约确认成功后，无法自动修改信息。</p><p>还需注意：<br>没有通过第一批验证或者面谈的，可以根据第一批报名验证和录取的情况，按照“本区户籍优先，同类排序靠后”的原则进行区域统筹，并根据统筹结果进行第二批现场验证。<br>现场验证：电子证照具有同等效力。</p><p>招生入园条件：</p><ol><li><p>本区户籍、人户一致：按户籍地址<strong>对口入园</strong>；</p></li><li><p>本市户籍、人户分离：按房产证<strong>就近入园</strong>；</p><ul><li>有房产证：产权人须为幼儿父母或者其本人。（全部或者共同产权）</li></ul></li><li><p>父母一方《上海市居住证》满标准积分；<br><strong>注意</strong>：居住证的居住地址在本区（幼儿园招生对口区域）</p><ul><li>有房产证：产权人须为幼儿父母或其本人。（全部或共同产权）参照本市户籍、人户分离幼儿，按房产证地址<strong>就近入园</strong>；</li><li>无房产证：凭本区合法居住证明，根据实际居住地址，<strong>统筹入园</strong>。<br><strong>注意</strong>：承租人或买受人须是幼儿父母；</li></ul></li></ol><ol start="4"><li><p>动迁户适龄幼儿</p><ul><li>动迁安置地配套幼儿园已具备招生条件：可凭动迁协议书安置地址<strong>就近入园</strong>。</li><li>动迁安置地配套幼儿园不具备招生条件：可凭动迁证安置地址<strong>统筹入园</strong>。</li><li>租赁房屋居住的：凭本区合法居住证书，根据实际居住地址，<strong>统筹入园</strong>。</li></ul></li><li><p>本市外区户籍,在本区无房产适龄幼儿：</p><ul><li>凭本区合法居住证书，居住实际居住地址，<strong>统筹入园</strong>。</li></ul></li><li><p>其余符合条件的来户人员随迁子女：</p><ul><li>幼儿本人：持有效内《上海市居住证》或《居住登记凭证》</li><li>幼儿父或母：<br>持有效期内《上海市居住证》<br>一年内参加本市职工社会保险满6个月（2020/7/1-2021/6/30），不含补缴、因疫情防控需要允许补缴的除外）<br>连续3年在本区街道社会事务中心办妥灵活就业登记（从首次登记日至2021/6/30）</li><li>居住证地址：<br>应与其父母保持一致，且居住地址在本区幼儿园招生对口区域。</li><li>有房产证的：<br>产权人须是幼儿父母或本人（全部或共有产权），按产权证地址，<strong>统筹入园</strong>；</li><li>无房产证的：<br>在规定时间内，凭本区合法居住证明，更具各公/民办幼儿园第一批报名验证情况，<strong>统筹安排至尚有余额的公办幼儿园或民办三级幼儿园</strong>。</li></ul></li></ol><ol start="7"><li>香港、澳门、台湾适龄儿童：<br>根据实际居住地址，<strong>统筹入园</strong>。</li></ol><ol start="8"><li>外籍幼儿<br>根据实际居住地址，<strong>统筹入园</strong>。<br>外国护照（要有中国外国人许可页，且有效签证）+《境外人员住宿登记表》。</li></ol><ol start="9"><li>特殊幼儿<br>须持有本市户籍：可到一下幼儿园报名：<ul><li>特教幼儿园：<br>爱心幼儿园</li><li>普特融合幼儿园：<br>上南三村幼儿园特教班、爱心幼儿园特教班、海音幼儿园特教班、致立学校特教班。</li></ul></li></ol><ol start="10"><li>其他符合入园条件的幼儿：<br>除以上情况外，其他符合在本区入园的育儿，视实际情况<strong>统筹入园</strong>。</li></ol><p><strong>现场验证需要文件</strong></p><p><strong>就近入园</strong>的请带好：</p><ol><li>2021年上海市适龄幼儿入园信息登记表；</li><li>孩子出生证原件、复印件；</li><li>孩子的户口本原件、复印件（需要户口本首页到幼儿页面正反面的全部内容，并将复印件按照页面顺序排好）；</li><li>正规的动迁安置协议书原件、复印件以及动迁至我园地段的相关证件，监护人户籍证书原件以及复印件；</li><li>房产证原件、复印件（复印第一页到产权人页的全部内容）；</li><li>公租房或廉租房租赁证书原件、复印件，经适房产证原件、复印件（复印要求同房产证）；</li><li>父母一方的上海市居住证和满积分通知书原件、复印件，孩子有效期内的上海市居住证或居住凭证原件、复印件；</li></ol><p><strong>统筹安排</strong>的请带好：</p><ol><li>2021年上海市适龄幼儿入园信息登记表；</li><li>孩子出生证原件、复印件；</li><li>孩子的户口本原件、复印件（复印要求同上）；</li><li>地段内房产证原件、复印件（复印要求同上），人户分离证明；</li><li>地段内《上海市居住房屋租赁合同登记备案通知书》原件、复印件；</li><li>孩子有效期内的上海市居住证或居住凭证原件、复印件及网上有效期查询结果页打印件；</li><li>父母一方上海市居住证满积分原件、复印件以及网上查询结果打印页；</li><li>父母一方在有效期内的上海市居住证原件、复印件及网上查询的结果打印页；</li><li>社保缴金证明原件、复印件（一年内参加本市职工社会保险满6个月：2020/7/01-2021/6/30，不含补缴）</li><li>灵活就业证原件、复印件（联系3年：从首次登记日起至2021/6/30）</li></ol><p>⚠️ 请家长按照目录顺序排列所有复印件。</p><h4 id="录取通知"><a href="#录取通知" class="headerlink" title="录取通知"></a>录取通知</h4><p>6月18起：家长可以登陆浦东新区的适龄幼儿入园报名系统，查看录取结果。</p><p>6月30日前：各类各级幼儿园完成幼儿录取工作，发放录取通知书。</p><p>9月10日前：各级各类幼儿园完成新生注册报到及幼儿信息上报工作。</p><h3 id="其他入园前准备工作"><a href="#其他入园前准备工作" class="headerlink" title="其他入园前准备工作"></a>其他入园前准备工作</h3><h4 id="宝宝心理准备"><a href="#宝宝心理准备" class="headerlink" title="宝宝心理准备"></a>宝宝心理准备</h4><ul><li style="list-style:none"><input type="checkbox">要让宝宝对幼儿园有好的印象，告诉宝宝幼儿园同学一起玩，老师有爱心等等；</li><li style="list-style:none"><input type="checkbox">带宝宝去幼儿园熟悉，参观；</li><li style="list-style:none"><input type="checkbox">减少与家中依赖人员交流，与其他孩子交流，与其他家长交流，在家中给孩子一个独立空间，减轻对熟悉人的依恋；</li><li style="list-style:none"><input type="checkbox">让孩子期待幼儿园，老师和同学都可以一起玩，不能告诉孩子“家里不乖，给你送给老师管管”之类的话。</li></ul><h4 id="宝宝生理准备"><a href="#宝宝生理准备" class="headerlink" title="宝宝生理准备"></a>宝宝生理准备</h4><ul><li style="list-style:none"><input type="checkbox">自理（吃饭，擦屁屁等）</li><li style="list-style:none"><input type="checkbox">日常生活用语（让孩子自己表达自己的意愿）</li></ul><h4 id="宝宝的生活衔接"><a href="#宝宝的生活衔接" class="headerlink" title="宝宝的生活衔接"></a>宝宝的生活衔接</h4><p>调整作息时间<br>主要包括起床和午睡的时间等；</p><p>这里有一个幼儿园的活动安排表，可以供参考。</p><table><thead><tr><th>时间</th><th>内容安排</th><th>备注</th></tr></thead><tbody><tr><td>7:45 - 8:15</td><td>自然角观察护理/个别交谈</td><td></td></tr><tr><td>8:15 - 9:15</td><td>自主游戏与生活</td><td>8:40 - 9:00 插入式点心<br>9:00 - 9:15 学习活动</td></tr><tr><td>9:15 - 9:50</td><td>学习/自由活动/运动</td><td></td></tr><tr><td>9:50 - 10:30</td><td>学习/自由活动/运动</td><td></td></tr><tr><td>10:30 - 11:00</td><td>自由运动/餐前准备</td><td></td></tr><tr><td>11:00 - 11:30</td><td>午餐</td><td></td></tr><tr><td>11:30 - 14:50</td><td>自由活动/午睡等</td><td>11:30 - 12:00 餐后散步/集体游戏等</td></tr><tr><td>14:50 - 15:10</td><td>生活活动/运动</td><td></td></tr><tr><td>15:10 - 15:30</td><td>点心</td><td></td></tr><tr><td>15:30 - 16:00</td><td>个别化学习活动</td><td></td></tr><tr><td>16:00</td><td>整理/离园</td><td>-</td></tr></tbody></table><h4 id="家长准备"><a href="#家长准备" class="headerlink" title="家长准备"></a>家长准备</h4><ul><li style="list-style:none"><input type="checkbox">调整心态，鼓励宝宝自己的事情自己做；</li><li style="list-style:none"><input type="checkbox">信任老师；</li><li style="list-style:none"><input type="checkbox">孩子衣物准备（容易穿的，活动的衣服，替换的衣服）；</li><li style="list-style:none"><input type="checkbox">实事求是介绍孩子情况给老师（过敏体质？性格怎么样？）。</li></ul><h4 id="幼儿园面试"><a href="#幼儿园面试" class="headerlink" title="幼儿园面试"></a>幼儿园面试</h4><p>最后提了一下幼儿园面试的大概内容（针对宝宝）：</p><ul><li style="list-style:none"><input type="checkbox">会说家长名字</li><li style="list-style:none"><input type="checkbox">会说家里地址</li><li style="list-style:none"><input type="checkbox">会认颜色</li><li style="list-style:none"><input type="checkbox">日常的东西的指认</li><li style="list-style:none"><input type="checkbox">会数数，数量关联</li><li style="list-style:none"><input type="checkbox">可以适当才艺展示（唱歌/跳舞？）</li></ul><p>大致内容就是这么多，结合上面的政策，可以评估宝宝可以报名的学校。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一转眼宝宝都3岁多了，9月份就要进入幼儿园了，在这里记录一下托班进入幼儿园的全过程。其中包括了今年的相关政策解读，与实际操作记录。&lt;/p&gt;
    
    </summary>
    
      <category term="生活记实" scheme="https://razeencheng.com/categories/life/"/>
    
      <category term="宝宝成长" scheme="https://razeencheng.com/categories/life/baby/"/>
    
    
      <category term="幼儿园" scheme="https://razeencheng.com/tags/%E5%B9%BC%E5%84%BF%E5%9B%AD/"/>
    
      <category term="宝宝" scheme="https://razeencheng.com/tags/%E5%AE%9D%E5%AE%9D/"/>
    
  </entry>
  
  <entry>
    <title>记一次 Nginx DNS 缓存导致转发问题</title>
    <link href="https://razeencheng.com//post/nginx-proxy-problem-with-dns-cache.html"/>
    <id>https://razeencheng.com//post/nginx-proxy-problem-with-dns-cache.html</id>
    <published>2021-03-06T07:01:51.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>在家里搭建了一个 GitLab 服务器，由于电信家庭宽带的公网 IP 是不固定的，且<code>443</code>端口是被封的，所以买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS ，这样就能正常上自己的 Git 了。但今天，我发现推代码怎么也推不上去，校对了密钥，服务器状态都没问题。最后上阿里云，重启了下 Nginx，发现可以了。 找了一圈原因，最后发现是 Nginx 转发缓存 DNS 解析导致的，下面我们就复现一下问题并找找为什么，以及解决方式。</p><a id="more"></a><h3 id="复现问题"><a href="#复现问题" class="headerlink" title="复现问题"></a>复现问题</h3><blockquote><p>系统： CentOS 8.3.2011</p><p>Nginx : nginx/1.14.1</p></blockquote><ol><li>直接在默认配置中加上如下配置，其中本地的<code>80</code>端口跑的是 Nginx 默认的服务：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> basic <span class="string">'<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] '</span></span><br><span class="line">                 <span class="string">'<span class="variable">$protocol</span> <span class="variable">$status</span> <span class="variable">$bytes_sent</span> <span class="variable">$bytes_received</span> '</span></span><br><span class="line">                 <span class="string">'<span class="variable">$session_time</span> "<span class="variable">$upstream_addr</span>"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">access_log</span> /var/logs/nginx/access2.log basic;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>；</span><br><span class="line">        proxy_pass test.razeen.cn:<span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>test.razeen.cn</code>并没有解析，直接启动<code>nginx</code>，会报错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nignx: [emerg] host not found <span class="keyword">in</span> upstream <span class="string">"test.razeen.cn"</span> <span class="keyword">in</span> /etc/nginx/nginx.conf:94</span><br></pre></td></tr></table></figure><ol start="2"><li>我添加解析。</li></ol><p><img data-src="https://st.razeen.cn/img/20210306224001_image-20210306224001679.png" alt="image-20210306224001679"></p><p>再次启动，成功启动 nginx, 访问 <code>8080</code> 端口，页面成功展示，日志如下：</p><p><img data-src="https://st.razeen.cn/img/20210306225944_image-20210306225944957.png" alt="image-20210306225944957"></p><p>一切正常。</p><ol start="3"><li>修改解析，解析到其他IP。</li></ol><p><img data-src="https://st.razeen.cn/img/20210306230154_image-20210306230154560.png" alt="image-20210306230154560"></p><p>600s后，无论我们再次访问，查看日志，还是转到了原来的 IP。</p><p><img data-src="https://st.razeen.cn/img/20210306230748_image-20210306230748682.png" alt="image-20210306230748682"></p><ol start="4"><li>重启 nginx, 再次访问，这是 IP 才变成后面修改的。</li></ol><p><img data-src="https://st.razeen.cn/img/20210306231106_image-20210306231106575.png" alt="image-20210306231106575"></p><p>从这里可以看出，Nginx 在启动的时候就会去查询DNS记录，如果不存在解析，直接无法启动。 但，如果中间修改域名的 DNS 解析，Nginx 中的解析并不会刷新。只有 <code>reload or restart</code> 后才会刷新。</p><p>那么实际是什么样的呢？</p><h3 id="解析机制"><a href="#解析机制" class="headerlink" title="解析机制"></a>解析机制</h3><p>直接去查找了一下相关的文章, 从这篇<a href="https://www.nginx.com/blog/dns-service-discovery-nginx-plus/" target="_blank" rel="noopener">Using DNS for Service Discovery with NGINX and NGINX Plus</a> 我们知道:</p><blockquote><p>As NGINX starts up or reloads its configuration, it queries a DNS server to resolve <strong>backends.example.com</strong>. The DNS server returns the list of three backends discussed above, and NGINX uses the default Round Robin algorithm to load balance requests among them. NGINX chooses the DNS server from the OS configuration file <strong>/etc/resolv.conf</strong>.</p><p>This method is the least flexible way to do service discovery and has the following additional drawbacks:</p><ul><li>If the domain name can’t be resolved, NGINX fails to start or reload its configuration.</li><li>NGINX caches the DNS records until the next restart or configuration reload, ignoring the records’ TTL values.</li><li>We can’t specify another load‑balancing algorithm, nor can we configure passive health checks or other features defined by parameters to the <code>server</code> directive, which we’ll describe in the next section.</li></ul></blockquote><ul><li>Nginx 在启动/重载的时候回去解析转发的域名</li><li>如果域名无法解析 Nginx 就无法启动</li><li>只有下次重启/重载的时候才会重新去解析，启动后无视TTL</li></ul><p><em>同时，如果能解析到多个 IP，还会有相应的负载均衡策略哦，后面可以再研究下这个。</em></p><p>这下就很明白了，原来坑就在这里，那么该怎么解决呢？</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>在上面的文章中其实就给出了一种解决方案。</p><p>如下，我们可以指定 DNS 解析服务器并设置 DNS 刷新频率。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">10.0.0.2</span> valid=<span class="number">10s</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># resolver 10.0.0.2 valid=10s;  # 也可以写在这里</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="comment"># resolver 10.0.0.2 valid=10s;   # 也可以写在这</span></span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$backend_servers</span> backends.example.com;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$backend_servers</span>:8080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面，<code>resolver</code>就是 DNS 服务器的地址， <code>valid</code>是 DNS 刷新的频率<sup>[1]</sup>。</p><p>但，上面这种写法只适合在 <code>http proxy</code>中，在<code>stream proxy</code>中并没有<code>set</code>关键字，如果这么写启动会直接报错。查阅一番后，如下写法是可行的:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">114.114.114.114</span> valid=<span class="number">10s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">map</span> <span class="variable">$remote_addr</span> <span class="variable">$backend</span> &#123;</span><br><span class="line">        <span class="attribute">default</span>  test.razeen.cn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="comment"># resolver 114.114.114.114 valid=10s;  # 也可以写在这里</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> <span class="variable">$backend</span>:<span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[1]</strong> 但经过验证，这个 <code>valid</code> DNS 刷新频率还要取决于你<code>resolver</code>中使用的解析服务器。如果<code>resolver</code>不是无缓存的DNS服务器，解析生效就会受影响。</p><p>同时通过 <a href="http://nginx.org/en/docs/stream/ngx_stream_core_module.html" target="_blank" rel="noopener">官方文档</a> 看到，在 <code>stream proxy</code> 中 <code>resolver</code> 既可以写在 <code>steam</code>中，也可以写在<code>server</code>中:</p><blockquote><table><thead><tr><th style="text-align:left">Syntax:</th><th>`<strong>resolver</strong> <em>address</em> … [valid=<em>time</em>] [ipv6=on</th><th>off] [status_zone=<em>zone</em>];`</th></tr></thead><tbody><tr><td style="text-align:left">Default:</td><td>—</td></tr><tr><td style="text-align:left">Context:</td><td><code>stream</code>, <code>server</code></td></tr></tbody></table><p>This directive appeared in version 1.11.3.</p></blockquote><p>在 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#resolver" target="_blank" rel="noopener">HTTP PRXOY</a>, <code>resolver</code>可以写在<code>http</code>, <code>server</code>, <code>location</code> 中, <code>set</code> 可以写在<code>server</code>和<code>location</code>中。</p><p>同时上面这样写后，即使域名解析不到也不会导致 Nginx 启动/重启 失败。</p><p>在<a href="https://segmentfault.com/a/1190000022365954" target="_blank" rel="noopener">这篇文章</a>中还提供了其他几种设置方法，也可以参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在家里搭建了一个 GitLab 服务器，由于电信家庭宽带的公网 IP 是不固定的，且&lt;code&gt;443&lt;/code&gt;端口是被封的，所以买了阿里云作为中转，利用 Ngnix 作 TCP Proxy 结合 DDNS ，这样就能正常上自己的 Git 了。但今天，我发现推代码怎么也推不上去，校对了密钥，服务器状态都没问题。最后上阿里云，重启了下 Nginx，发现可以了。 找了一圈原因，最后发现是 Nginx 转发缓存 DNS 解析导致的，下面我们就复现一下问题并找找为什么，以及解决方式。&lt;/p&gt;
    
    </summary>
    
      <category term="开发实战总结" scheme="https://razeencheng.com/categories/dev-daily/"/>
    
    
      <category term="nginx" scheme="https://razeencheng.com/tags/nginx/"/>
    
      <category term="dns" scheme="https://razeencheng.com/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>电信悦me网关修改桥接模式，路由器拨号</title>
    <link href="https://razeencheng.com//post/yue-me-bridge.html"/>
    <id>https://razeencheng.com//post/yue-me-bridge.html</id>
    <published>2021-02-21T22:52:26.000Z</published>
    <updated>2021-07-10T09:23:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>由于要做端口转发，每次要到悦me的网关上操作，但电信这网关操作起来体验不是很好，比较卡。于是昨天改成了桥接模式，然后利用路由器拨号。这样每次只要在路由器上操作，方便多了，故分享一下。</p><a id="more"></a><h3 id="获取超密"><a href="#获取超密" class="headerlink" title="获取超密"></a>获取超密</h3><p>我的超密是当初安装的时候让安装的师傅告诉我的。听说打10000号有可能能问到。实在不是貌似可以问马云==。</p><h3 id="获取拨号账号与密码"><a href="#获取拨号账号与密码" class="headerlink" title="获取拨号账号与密码"></a>获取拨号账号与密码</h3><p>用超密登陆后，在 <code>网络&gt;宽带设置&gt;Internet连接</code> 中我们可以通过<code>连接名称</code>找到一个类似<code>3_INTERNET_R_VID_</code>的通道。不同的光猫可能有点不一样。</p><p>我们看到的图上三个其实指的就是三个不同的通道。其中</p><ul><li><code>1_TR069_VOICE_R_VID_46</code> 为语音通道，为语言业务服务的；</li><li><code>2_OTHER_B_VID_85</code> 为 <code>IPTV</code>通道，<code>IPTV</code>业务会用到；</li><li><code>3_INTERNET_R_VID_</code> 即使我们的上网通道了（下图是改桥接后，又改回来截图的，有点不一致）；</li></ul><p><img data-src="https://st.razeen.cn/img/20210303235242_image-20210303235242806.png" alt="image-20210303235242806"></p><p>选中<code>3_INTERNET_R_VID_</code>后，我们就可以看到下面应该有一个 用户名，密码，这就是拨号用的用户名密码。但密码是不显示的，这就需要我们做点额外工作去获取了。</p><p>通过访问 <a href="http://192.168.1.1/backupsettings.conf" target="_blank" rel="noopener">http://192.168.1.1/backupsettings.conf</a> 可以获取到配置文件，用文本编辑器打开，如下图所示，通过搜索 用户名 可以快速定位到密码。</p><p><img data-src="https://st.razeen.cn/img/20210304003115_2021-03-04_00-30.png" alt></p><p>但这个密码是<code>base64</code>后的，我们需要解析一下。</p><p>可以和我这样直接用 base64 命令去解析，也可以找个 <a href="https://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">base64 解码网站 </a>解析一下就可以拿到拨号密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> MTIzNDU2NzgK | base64 -d</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><h3 id="修改桥接模式"><a href="#修改桥接模式" class="headerlink" title="修改桥接模式"></a>修改桥接模式</h3><p>有了账号密码就可以开始桥接了。光猫这边把原来的<code></code>3_INTERNET_R_VID_<code>删除了，然后新建WAN连接，选择</code>Brdige`模式，保存应用。如下：</p><p><img data-src="https://st.razeen.cn/img/20210303230658_image-20210303000936851.png" alt="image-20210303000936851"></p><h3 id="路由器拨号"><a href="#路由器拨号" class="headerlink" title="路由器拨号"></a>路由器拨号</h3><p>登陆路由器，我的路由器是<a href="https://razeen.cn/post/start-use-newifi3.html" target="_blank" rel="noopener">刷的老毛子</a>。在外网设置中，选择<code>PPPoE: 拨号</code>, 填上用户名，密码，应用即可。</p><p><img data-src="https://st.razeen.cn/img/20210304001955_image-20210304001955049.png" alt="image-20210304001955049"></p><p>大概等几分钟，在网络状态中就可以看到<code>已连接</code>。 然后成功获取到了<code>IPv4, IPv6</code>地址（IPv6获取时间会长一点）。</p><p><img data-src="https://st.razeen.cn/img/20210303003227_image-20210303003227119.png" alt="image-20210303003227119"></p><p>到这里我们就成功用路由器拨号上网啦。买一个还不错的路由器，然后又有公网IP，可以好好再折腾一番了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于要做端口转发，每次要到悦me的网关上操作，但电信这网关操作起来体验不是很好，比较卡。于是昨天改成了桥接模式，然后利用路由器拨号。这样每次只要在路由器上操作，方便多了，故分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
    
      <category term="router" scheme="https://razeencheng.com/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>5分钟上手黑群晖 Nas</title>
    <link href="https://razeencheng.com//post/synology-hackintosh.html"/>
    <id>https://razeencheng.com//post/synology-hackintosh.html</id>
    <published>2021-02-18T01:18:03.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>今天在家把黑群晖折腾好了，分享一下折腾黑群晖(DS918+)的过程，整个安装过程加起来不到5分钟哦。</p><a id="more"></a><h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备"></a>硬件准备</h3><p>我的<a href="https://razeencheng.com/post/my-first-home-server.html">第一台服务器</a>自从淘汰后，就放在那里吃灰快半年了。这几天得空，在家里折腾折腾，除了换了个小机箱电源（虽然和机箱有点不配），其他都没变。</p><p>整体配置如下：</p><table><thead><tr><th>配件</th><th>备注</th></tr></thead><tbody><tr><td>ASROCK/华擎科技J4105M集成主板</td><td>4核1.5GHz</td></tr><tr><td>海盗船 2400 DDR4 8G x2</td><td></td></tr><tr><td>乔思伯 C2 台式机电脑机箱</td><td></td></tr><tr><td>固态 120G + 西数蓝盘 1T</td><td>祖传的。。。</td></tr><tr><td>华硕 GPS-200PB-189 A 200w 小机箱电源</td><td></td></tr><tr><td>U盘 16G</td></tr></tbody></table><p>16G内存做Nas其实用不上，最后使用率基本是这样子。<br><img data-src="https://st.razeen.cn/img/20210218/16135715109671.jpg" alt></p><p>U盘其实也用不了这么大，有个几百 MB 都够用，只用装一个引导而已，而且安装后需要一直插在上面（当然也有不用一直插在上面的办法，可自行搜索）。</p><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><p>硬件准备好后，我们就要准备软件了。这里我有一个打包好了，<a href="https://pan.baidu.com/s/1a0sSs1U6v_V-JRqq1_7gsw" target="_blank" rel="noopener">直接下载</a>即可, 密码<code>9cwm</code>。 当然，这几个文件都可以在网上找到，也可以自己去下载。</p><p>下载解压后，目录结构如下：</p><p><img data-src="https://st.razeen.cn/img/20210218/16135728420279.jpg" alt></p><p>其中</p><ul><li>DiskGenius 用来给U盘分区和修改镜像文件的；</li><li>ChipGenius 用来查看VID，PID<sup>[1]</sup>的。据说不正确的VID，PID会导致无法正常安装与休眠；</li><li>ImageWriter 写引导到U盘；</li><li>DS918+_23824.pat DS918+ 6.2.1的安装包；</li><li>Synoboot.img 引导镜像。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>除了上面的软件，硬件外，你还需要一台 windows ==。 然后我们就可以开始安装了。</p><h4 id="U盘分区"><a href="#U盘分区" class="headerlink" title="U盘分区"></a>U盘分区</h4><p>插入准备好的U盘，打开 DiskGenius。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135749647163.jpg" alt></p><p>找到U盘，删除原来U盘上的所有分区（如果你和我一样，这选项是灰的，U盘本来就没分区，就直接看下一步）</p><p><img data-src="https://st.razeen.cn/img/20210218/16135750969995.jpg" alt></p><p>选中这个U盘，点击上面的快速分区。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135751859892.jpg" alt></p><p>选择 MBR 格式分区类型， 且只分一个区。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135752390504.jpg" alt></p><p>确认后，等待一会，分区就完成了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135752720478.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135752810983.jpg" alt></p><p>分区完成，关闭 DiskGenius.</p><h4 id="查看VID-PID"><a href="#查看VID-PID" class="headerlink" title="查看VID/PID"></a>查看VID/PID</h4><p>打开 ChipGenius 软件，选择U盘设备，查看U盘的完整信息，将 VID/PID 复制保存起来，后面要用。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135754856030.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135754705770.jpg" alt></p><h4 id="写入引导镜像"><a href="#写入引导镜像" class="headerlink" title="写入引导镜像"></a>写入引导镜像</h4><p>打开 ImageWriter 。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135756552205.jpg" alt></p><p>点击文件夹，找到引导镜像 synoboot.img, 设备选中U盘所在的盘符。执行写入，确认继续，稍等片刻。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135757387603.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135757482321.jpg" alt></p><p>很快，镜像就写好了。</p><h4 id="修改镜像"><a href="#修改镜像" class="headerlink" title="修改镜像"></a>修改镜像</h4><p>再次打开 DiskGenius，找到 U盘 &gt; ESP &gt; grub 下面的 grub.cfg 文件， 右击 ‘复制到“桌面”’ 。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135758853878.jpg" alt></p><p>在桌面上找到该文件，用文本编辑器打开。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135760195610.jpg" alt></p><p>如下图，将 VID/PID 改成我们记下来的 VID/PID。</p><p>如果需要 洗白或者半洗白的话 需要修改这里的 sn 和 mac1, 也就是序列号和 Mac地址。</p><p>我咸鱼找了个序列号，半洗白了一下，可以查看 DS Photo 预览图，视频缩略图和转码，不能用QC，已经满足我的需求了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135765929227.jpg" alt></p><p>下图是我改后的。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135765753215.jpg" alt></p><p>改好之后，保存文件。然后将文件再次拖到 DiskGenius 中覆盖即可。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135766726351.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135766828723.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135766986056.jpg" alt></p><p>到这里我们的U盘引导就制作完成了。</p><h4 id="安装黑群晖"><a href="#安装黑群晖" class="headerlink" title="安装黑群晖"></a>安装黑群晖</h4><p>将U盘插到准备好的机器上（链接好好 鼠标 键盘 显示器 网线），开机后‘狂’按 F2 进bios，将U盘设置为第一启动项，重启后应该可以看到如下选项了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135771453579.jpg" alt></p><p>选择第一个，然后你应该可以看到下面画面了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135771818798.jpg" alt></p><p>到这里，我们的引导就安装好了。下面我们需要一台电脑，且和这个Nas在同一个局域网中，去找Nas在局域网中的IP。</p><p>找IP有两种方法，一种就是下载群晖官方的助手 Synology Assistant, 去查找。 还有一种就是直接到路由器上找一下刚刚新增的IP。</p><p>当然，我选择后者。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135775430441.jpg" alt></p><p>找到IP后，就可以输入IP直接连接了。 他会自动跳转到 5000 端口，引导我们安装。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135776318059.jpg" alt></p><p>点击设置。选择手动安装。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135776764307.jpg" alt></p><p>点击浏览，找到我们已经下载好的安装包。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135777496410.jpg" alt></p><p>立即安装，确认。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135777756045.jpg" alt></p><p>然后，就会自动进入安装的环节。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135778114744.jpg" alt></p><p>以及自动重启。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135778383867.jpg" alt></p><p>这个过程，10分钟内应该可以完成。我大概等了5分钟不到。</p><p>完成后就开始创建账户了。按照要求填好，下一步。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135779305789.jpg" alt></p><p>这里更新注意了，不要自动更新！ 选择有更新通知你，但通知你也不要去更新。黑群更新不一定成功哦。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135779841260.jpg" alt></p><p>接下来 QC 直接跳过。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135781100020.jpg" alt></p><p>这样就可以了！</p><p><img data-src="https://st.razeen.cn/img/20210218/16135781267798.jpg" alt></p><p>到这里整个黑群就安装完毕了。浏览器输入 IP 就可以进入群晖的管理节目了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135782673309.jpg" alt></p><p>基本信息看一下，其中 CPU 有可能识别不准，不过不影响使用。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135784355686.jpg" alt></p><h3 id="设置硬盘"><a href="#设置硬盘" class="headerlink" title="设置硬盘"></a>设置硬盘</h3><p>系统装好了，但要想存东西，我们先得设置好硬盘。</p><p>找到存储空间管理员，安装图片提示操作。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135786157024.jpg" alt></p><p>新增。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135786648046.jpg" alt></p><p>自定义。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135786931984.jpg" alt></p><p>创建存储池。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135787208683.jpg" alt></p><p>性能改善。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135787488011.jpg" alt></p><p>我现在有两个磁盘，型号大小都不一样，就不组 RAID 了。 选 Basic。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135788223636.jpg" alt></p><p>选择 磁盘。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135788362292.jpg" alt></p><p>确认继续。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135788540608.jpg" alt></p><p>磁盘检查一下吧。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135788722276.jpg" alt></p><p>配置存储池。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135789042517.jpg" alt></p><p>就选推荐的文件系统吧。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135789337132.jpg" alt></p><p>应用。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135789459220.jpg" alt></p><p>这样，一个存储空间就新建好了。</p><p><img data-src="https://st.razeen.cn/img/20210218/16135789725264.jpg" alt></p><p>然后，我们就可以新建一个 共享文件夹了。</p><p>在 控制面板 〉 文件共享 〉共享文件夹 〉新增 〉新增，然后选择该文件夹的位置，下一步，后面基本使用默认就可以了，直接下一步，下一步，最后应用。<br><img data-src="https://st.razeen.cn/img/20210218/16135797146962.jpg" alt></p><p>设置好后，在 windows 上输入 Nas 的 IP 就可以打开共享文件夹了（第一次会跳出鉴权的，输入登陆Nas的用户名密码就可以了）。</p><p>如，我的。<br><img data-src="https://st.razeen.cn/img/20210218/16135800156739.jpg" alt></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>黑群晖的安装，还是相对比较简单的。群晖的插件也还不少。我装黑群晖主要就是为了他的文件共享和图片备份功能。结合 DS File App 我可以将手机上的照片自动同步到家里，美滋滋。</p><p>分享几个场景，其中关于如何设置公网访问，下篇博客再总结一下。</p><ul><li><p>iPad 上 File 连接 Nas 分享文件。<br><img data-src="https://st.razeen.cn/img/20210218/16135805119820.jpg" alt></p></li><li><p>外网访问，管理，查看照片。</p></li></ul><p><img data-src="https://st.razeen.cn/img/20210218/16135807903638.jpg" alt></p><p><img data-src="https://st.razeen.cn/img/20210218/16135808152655.jpg" alt></p><ul><li>手机App自动备份照片。<br><img data-src="https://st.razeen.cn/img/20210218/16135810208036.jpg" alt></li></ul><h3 id="拓展知识"><a href="#拓展知识" class="headerlink" title="拓展知识"></a>拓展知识</h3><p><strong>[1]. VID/PID 是什么？</strong></p><p>VID = vendor ID ( 设备的生产厂家ID，正常的话是需要申请的 ）<br>PID = product ID （ 设备的产品ID，厂家自定义的 ）</p><p>这么一看，其实就是用来是识别设备是哪家生产的什么产品，像我们的名字一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在家把黑群晖折腾好了，分享一下折腾黑群晖(DS918+)的过程，整个安装过程加起来不到5分钟哦。&lt;/p&gt;
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
      <category term="NAS" scheme="https://razeencheng.com/categories/my-home/nas/"/>
    
    
      <category term="nas" scheme="https://razeencheng.com/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>终极 Bash 脚本指南</title>
    <link href="https://razeencheng.com//post/the-ultimate-programmers-guide-to-bash-scripting.html"/>
    <id>https://razeencheng.com//post/the-ultimate-programmers-guide-to-bash-scripting.html</id>
    <published>2021-02-01T19:46:58.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>在开发的过程中，经常需要处理一些重复的工作，或者逻辑相当简单但耗时的功能，这时我们可能会考虑到用脚本来自动化完成这些工作。而 Bash 脚本是我们最容易接触到和上手的脚本语言。</p><p>这篇博客汇总一些常用的 Bash 语法，方便日后查阅学习。</p><a id="more"></a><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>不管写啥，上来先输出个<code>hello world</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p>创建一个文件<code>hello.sh</code> 包含以上内容，同时赋予执行权限，然后执行，一个<code>hello world</code> 就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line">$ chmod +x hello.sh</span><br><span class="line"></span><br><span class="line">$ ./hello.sh</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><p>我们看到这个<code>hello.sh</code> 脚本，第一行有个 <code>#!/bin/bash</code> 。 这个是用来指定该脚本在 UNIX/Linux 下执行时用到的解释器。</p><p>执行<code>cat /etc/shells</code> 我们可以看到自己的系统中都有哪些解释器。如我的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/dash</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br><span class="line">/usr/bin/tmux</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用 <code>#</code> 来注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>Bash 中变量命名是大小写敏感的，很多喜欢全大写。当然你也可以使用 小写英文字母，数字和下划线，但不能以数字开头。 给变量赋值的时候 <code>=</code> 号前后不能有空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有效的</span></span><br><span class="line">FIRSTLETTERS=<span class="string">"ABC"</span></span><br><span class="line">FIRST_THREE_LETTERS=<span class="string">"ABC"</span></span><br><span class="line">firstThreeLetters=<span class="string">"ABC"</span></span><br><span class="line">MY_SHELL=<span class="string">"bash"</span></span><br><span class="line">my_another_shell=<span class="string">"my another shell"</span></span><br><span class="line">My_Shell=<span class="string">"My shell"</span></span><br><span class="line">_myshell=<span class="string">"My shell"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 无效的</span></span><br><span class="line">3LETTERS=<span class="string">"ABC"</span></span><br><span class="line">first-three-letters=<span class="string">"ABC"</span></span><br><span class="line">first@Thtree@Letters=<span class="string">"ABC"</span></span><br><span class="line">ABC = <span class="string">"ABC "</span></span><br><span class="line">MY_SHELL = <span class="string">"bash"</span></span><br><span class="line">My-SHELL=<span class="string">"bash"</span></span><br><span class="line">1MY_SHELL=<span class="string">"My shell"</span></span><br></pre></td></tr></table></figure><h3 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h3><p>当你要使用变量的时候，用 <code>$</code> 来引用， 如果后面要接一些其他字符，可以用<code>{}</code> 括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">WORLD=<span class="string">"world world"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello <span class="variable">$WORLD</span>"</span>  <span class="comment"># hello world world</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello <span class="variable">$&#123;WORLD&#125;</span>2"</span> <span class="comment"># hello world world2</span></span><br></pre></td></tr></table></figure><p>在 Bash 中要注意 单引号 <code>&#39;</code> , 双引号 <code>&quot;</code> ,反引号 ` 的区别。</p><p>单引号，双引号都能用来保留引号内的为文字值，其差别在于，双引号在遇到 <code>$(参数替换)</code> , 反引号 `(命令替换) 的时候有例外，单引号则剥夺其中所有字符的特殊含义。</p><p>而反引号的作用 和 <code>$()</code> 是差不多的。 在执行一条命令的时候，会先执行其中的命令，再把结果放到原命令中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">var=<span class="string">"music"</span></span><br><span class="line">sports=<span class="string">'sports'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I like <span class="variable">$var</span>"</span>   <span class="comment"># I like music</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I like <span class="variable">$&#123;var&#125;</span>"</span> <span class="comment"># I like music</span></span><br><span class="line"><span class="built_in">echo</span> I like <span class="variable">$var</span>     <span class="comment"># I like music</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'I like $var'</span>   <span class="comment"># I like $var</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"I like \$var"</span>  <span class="comment"># I like $var</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'I like \$var'</span>  <span class="comment"># I like \$var</span></span><br><span class="line"><span class="built_in">echo</span> `bash -version` <span class="comment"># GNU bash, version 5.0.17(1)-release (x86_64-pc-linux-gnu)...</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'bash -version'</span> <span class="comment"># bash -version</span></span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>Linux 的环境变量包含了存储在系统中的信息。我们可以在终端中找到一些环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ env </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$ printenv</span><br></pre></td></tr></table></figure><p>你可以在脚本中引用这些环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span>, <span class="variable">$USER</span>, <span class="variable">$HOME</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/bin/zsh, razeen, /home/razeen</span></span><br></pre></td></tr></table></figure><p><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html" target="_blank" rel="noopener">这里</a> 还有更多。</p><h3 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h3><p>Bash 的内部变量也不少，有时我们可能会用到，如 <code>$BASHPID</code> <code>$IFS</code> <code>$PWD</code> 等，更多看<a href="https://tldp.org/LDP/abs/html/internalvariables.html" target="_blank" rel="noopener">这里</a> 。</p><h3 id="将命令输出分配给变量"><a href="#将命令输出分配给变量" class="headerlink" title="将命令输出分配给变量"></a>将命令输出分配给变量</h3><p>可以使用 <code>$(command)</code> 将命令输出存储在变量中。例如这是一个<code>info.sh</code>脚本内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LIST=$(ls -l)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"File information: <span class="variable">$LIST</span>"</span></span><br></pre></td></tr></table></figure><p>执行（别忘了给执行权限）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./info.sh</span><br><span class="line">File information: total 8</span><br><span class="line">-rwxrwxr-x 1 razeen razeen 85 2月   5 07:35 hello.sh</span><br><span class="line">-rwxrwxr-x 1 razeen razeen 58 2月   5 07:36 info.sh</span><br></pre></td></tr></table></figure><p>下面的脚本会将时间和日期，用户名以及系统正常运行时间保存到日志文件中。</p><p>其中 <code>&gt;</code> 是重定向之一，它将覆盖文件。使用 <code>&gt;&gt;</code> 可以将输出追加到文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">DATE=$(date -u) <span class="comment"># UTC 时间#!/bin/bash</span></span><br><span class="line">DATE=$(date -u) <span class="comment"># UTC 时间</span></span><br><span class="line">WHO=$(whoami) <span class="comment"># 用户名</span></span><br><span class="line">UPTIME=$(uptime) <span class="comment"># 系统运行时间</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Today is <span class="variable">$DATE</span>. You are <span class="variable">$WHO</span>. Uptime info: <span class="variable">$UPTIME</span>"</span> &gt; logfile</span><br><span class="line">WHO=$(whoami) <span class="comment"># 用户名</span></span><br><span class="line">UPTIME=$(uptime) <span class="comment"># 系统运行时间</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Today is <span class="variable">$DATE</span>. You are <span class="variable">$WHO</span>. Uptime info: <span class="variable">$UPTIME</span>"</span> &gt; logfile</span><br></pre></td></tr></table></figure><p><img data-src="https://st.razeen.cn/img/20210205074148_image-20210205074148588.png" alt="image-20210205074148588"></p><h3 id="内建命令"><a href="#内建命令" class="headerlink" title="内建命令"></a>内建命令</h3><p><code>Shell</code> 内建命令是可以直接在<code>Shell</code>中运行的命令。可以这么查看内建命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ compgen -b | sort</span><br><span class="line">-</span><br><span class="line">.</span><br><span class="line">:</span><br><span class="line">[</span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"><span class="built_in">autoload</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="built_in">bindkey</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">bye</span></span><br><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>也可以用 <code>type</code> 查看命令的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">cd</span></span><br><span class="line"><span class="built_in">cd</span> is a shell <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure><p>可以用 <code>which</code> 命令查看可执行文件的文件路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># which sort</span></span><br><span class="line">/usr/bin/sort</span><br></pre></td></tr></table></figure><p>可通过 <code>man builtins</code> 查看内建命令的详细描述。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="IF条件表达式"><a href="#IF条件表达式" class="headerlink" title="IF条件表达式"></a>IF条件表达式</h4><p><code>if</code> 后面需要接者<code>then</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition-for-test ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>或者，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition-for-test ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span></span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">VAR=myvar</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VAR</span> = myvar ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"1: \$VAR is <span class="variable">$VAR</span>"</span>   <span class="comment"># 1: $VAR is myvar</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$VAR</span>"</span> = myvar ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"2: \$VAR is <span class="variable">$VAR</span>"</span>   <span class="comment"># 2: $VAR is myvar</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VAR</span> = <span class="string">"myvar"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"3: \$VAR is <span class="variable">$VAR</span>"</span>   <span class="comment"># 3: $VAR is myvar</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$VAR</span>"</span> = <span class="string">"myvar"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"4: \$VAR is <span class="variable">$VAR</span>"</span>   <span class="comment"># 4: $VAR is myvar</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面，我们在比较时，可以用双引号把变量引用起来。</p><p>但要注意单引号的使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VAR=myvar</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">'$VAR'</span> = <span class="string">'myvar'</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'5a: $VAR is $VAR'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"5b: Not equal."</span></span><br><span class="line">fibas</span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="comment"># 5b: Not equal.</span></span><br></pre></td></tr></table></figure><p>上面这个就把 ‘$VAR’ 当一个字符串了。</p><p>但如果变量是多个单词，我们就必须用到双引号了，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样写就有问题</span></span><br><span class="line">VAR1=<span class="string">"my var"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VAR1</span> = <span class="string">"my var"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\$VAR1 is <span class="variable">$VAR1</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># error [: too many arguments</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用双引号</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$VAR1</span>"</span> = <span class="string">"my var"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\$VAR1 is <span class="variable">$VAR1</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>总的来说，双引号可以一直加上。</p><h4 id="空格问题"><a href="#空格问题" class="headerlink" title="空格问题"></a>空格问题</h4><p>比较表达式中，如果<code>=</code>前后没有空格，那么整个表法式会被认为是一个单词，其判断结果为<code>True</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">VAR2=2</span><br><span class="line"><span class="comment">#  由于被识别成一个单词， [] 里面为 true</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$VAR2</span>"</span>=1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$VAR2</span> is 1."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$VAR2</span> is not 1."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 2 is 1.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前后加上空格就好了</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$VAR2</span>"</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$VAR2</span> is 1."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$VAR2</span> is not 1."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 2 is not 1.</span></span><br></pre></td></tr></table></figure><p>另外需要注意的是， 在判断中，中括号 <code>[</code> 和变量之间一定要有一个空格，<code>=</code> 或者 <code>==</code>。 如果缺少了空格，你可能会到这类似这样的错误：<code>unary operator expected’ or missing</code>]` 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确， 符号前后有空格</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$VAR2</span> = 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\$VAR2 is 1."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"It's not 1."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 2 is 1.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误， 符号前后无空格</span></span><br><span class="line"><span class="keyword">if</span> [<span class="variable">$VAR2</span>=1]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$VAR2</span> is 1."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"It's not 1."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># line 3: =1: command not found</span></span><br><span class="line"><span class="comment"># line 5: [=1]: command not found</span></span><br><span class="line"><span class="comment"># It's not 1.</span></span><br></pre></td></tr></table></figure><h4 id="文件测试表达式"><a href="#文件测试表达式" class="headerlink" title="文件测试表达式"></a>文件测试表达式</h4><p>对文件进行相关测试，判断的表达式如下：</p><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">True</th></tr></thead><tbody><tr><td style="text-align:left"><em>file1</em> -nt <em>file2</em></td><td style="text-align:left"><em>file1</em> 比 <em>file2</em> 新。</td></tr><tr><td style="text-align:left"><em>file1</em> -ot <em>file2</em></td><td style="text-align:left"><em>file1</em> 比 <em>file2</em> 老。</td></tr><tr><td style="text-align:left">-d <em>file</em></td><td style="text-align:left">文件<em>file</em>存在，且是一个文件夹。</td></tr><tr><td style="text-align:left">-e <em>file</em></td><td style="text-align:left">文件 <em>file</em> 存在。</td></tr><tr><td style="text-align:left">-f <em>file</em></td><td style="text-align:left">文件<em>file</em>存在，且为普通文件。</td></tr><tr><td style="text-align:left">-L <em>file</em></td><td style="text-align:left">文件<em>file</em>存在，且为符号连接。</td></tr><tr><td style="text-align:left">-O <em>file</em></td><td style="text-align:left">文件 <em>flle</em> 存在, 且由有效用户ID拥有。</td></tr><tr><td style="text-align:left">-r <em>file</em></td><td style="text-align:left">文件 <em>flle</em> 存在, 且是一个可读文件。</td></tr><tr><td style="text-align:left">-s <em>file</em></td><td style="text-align:left">文件 <em>flle</em> 存在, 且长度大于0。</td></tr><tr><td style="text-align:left">-w file</td><td style="text-align:left">文件 <em>flle</em> 可写入。</td></tr><tr><td style="text-align:left">-x file</td><td style="text-align:left">文件 <em>flle</em> 可写执行。</td></tr></tbody></table><p>可以使用<code>man test</code>查看那详细的说明。</p><p>当表达式为<code>True</code>时，测试命令返回退出状态 0，而表达式为<code>False</code>时返回退出状态1。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">FILE=<span class="string">"/etc/resolv.conf"</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a file."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a directory."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is readable."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="字符串比较表达式"><a href="#字符串比较表达式" class="headerlink" title="字符串比较表达式"></a>字符串比较表达式</h4><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">True</th></tr></thead><tbody><tr><td style="text-align:left"><em>string1 = string2</em> 或 <em>string1 == string2</em></td><td style="text-align:left">两字符相等</td></tr><tr><td style="text-align:left"><em>string1</em> != <em>string2</em></td><td style="text-align:left">两个字符串不相等</td></tr><tr><td style="text-align:left"><em>string1</em> &gt; <em>string2</em></td><td style="text-align:left"><em>string1</em> 大于 <em>string2</em>.</td></tr><tr><td style="text-align:left"><em>string1</em> &lt; <em>string2</em></td><td style="text-align:left"><em>string1</em> 小于<em>string2</em>.</td></tr><tr><td style="text-align:left">-n <em>string</em></td><td style="text-align:left">字符串长度大于0</td></tr><tr><td style="text-align:left">-z <em>string</em></td><td style="text-align:left">字符串长度等于0</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">STRING=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$STRING</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"There is no string."</span> &gt;&amp;2 </span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># There is no string.</span></span><br></pre></td></tr></table></figure><p>其中<code>&gt;&amp;2</code>将错误信息定位到标准错误输出。</p><h4 id="数字比较表达式"><a href="#数字比较表达式" class="headerlink" title="数字比较表达式"></a>数字比较表达式</h4><p>下面这些是用来比较数字的一些表达式。</p><table><thead><tr><th style="text-align:left">[…]</th><th style="text-align:left">((…))</th><th style="text-align:left">True</th></tr></thead><tbody><tr><td style="text-align:left">[ “int1” -eq “int2” ]</td><td style="text-align:left">(( “int1” == “int2” ))</td><td style="text-align:left">相等.</td></tr><tr><td style="text-align:left">[ “int1” -nq “int2” ]</td><td style="text-align:left">(( “int1” != “int2” ))</td><td style="text-align:left">不等.</td></tr><tr><td style="text-align:left">[ “int1” -lt “int2” ]</td><td style="text-align:left">(( “int1” &lt; “int2” ))</td><td style="text-align:left">int2 大于 int1.</td></tr><tr><td style="text-align:left">[ “int1” -le “int2” ]</td><td style="text-align:left">(( “int1” &lt;= “int2” ))</td><td style="text-align:left">int2 大于等于 int1.</td></tr><tr><td style="text-align:left">[ “int1” -gt “int2” ]</td><td style="text-align:left">(( “int1 &gt; “int2” ))</td><td style="text-align:left">int1 大于 int2</td></tr><tr><td style="text-align:left">[ “int1” -ge “int2” ]</td><td style="text-align:left">(( “int1 &gt;= “int2” ))</td><td style="text-align:left">int1 大于等于 int2</td></tr></tbody></table><h4 id="双括号"><a href="#双括号" class="headerlink" title="双括号 (())"></a>双括号 <code>(())</code></h4><p>数值的比较或者计算可以用<code>((... ))</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line">c=3</span><br><span class="line"><span class="keyword">if</span> ((<span class="string">"<span class="variable">$a</span>"</span> &lt; <span class="string">"<span class="variable">$b</span>"</span>)); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> is less than <span class="variable">$b</span>."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> is not less than <span class="variable">$b</span>."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="string">"<span class="variable">$a</span>"</span> != <span class="string">"<span class="variable">$c</span>"</span>)); <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> is not equal to <span class="variable">$c</span>."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> is equal to <span class="variable">$c</span>."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> + <span class="variable">$b</span> = <span class="variable">$(($a + $b)</span>)"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 3 is less than 4.</span></span><br><span class="line"><span class="comment"># 3 is equal to 3.</span></span><br><span class="line"><span class="comment"># 3 + 4 = 7</span></span><br></pre></td></tr></table></figure><h3 id="怎么使用-if-else-和-if-elif-else"><a href="#怎么使用-if-else-和-if-elif-else" class="headerlink" title="怎么使用 if/else 和 if/elif/else"></a>怎么使用 if/else 和 if/elif/else</h3><p>其实上面已经展示了不少了，这里总结下<code>if...else</code> 和 <code>if...elif...else</code> 语句。</p><p><code>if/else</code> 语句格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition-is-true ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> A</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">command</span> B</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">if</span> [ condition-is-true ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> A</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">command</span> B</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MY_SHELL=<span class="string">"csh"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MY_SHELL</span>"</span> = <span class="string">"bash"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"You are using the bash shell."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"You are not using the bash shell."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><code>if/elif/else</code> 语句格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition-is-true ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> A</span><br><span class="line"><span class="keyword">elif</span> [ condition-is-true ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> B</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">command</span> C</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">if</span> [ condition-is-true ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> A</span><br><span class="line"><span class="keyword">elif</span> [ condition-is-true ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">command</span> B</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">command</span> C</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MY_SHELL=<span class="string">"csh"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MY_SHELL</span>"</span> = <span class="string">"bash"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"You are using the bash shell."</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$MY_SHELL</span>"</span> = <span class="string">"csh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"You are using csh."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"You are not using the bash shell."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="双中括号的使用"><a href="#双中括号的使用" class="headerlink" title="双中括号的使用[[]]"></a>双中括号的使用<code>[[]]</code></h3><p>如用用于比较的变量不是单个单词，就需要<code>[[]]</code> , 或者用单中括号(这时需要加双引号)。 在平常的使用中，最好都使用<code>[[]]</code>。</p><p>与单中括号相比，双中括号具有其他功能。 如，可以对其中正则使用逻辑<code>&amp;&amp;</code>和<code>||</code>和<code>=〜</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">VAR1=<span class="string">"variable"</span></span><br><span class="line">VAR2=<span class="string">"variable 2"</span></span><br><span class="line"><span class="keyword">if</span> [[ (VAR1 == <span class="string">"variable"</span>)  ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"They are the same."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Not the same."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 &amp;&amp;</span></span><br><span class="line">[[ (<span class="variable">$VAR1</span> == variable) &amp;&amp; (</span><br><span class="line"><span class="variable">$VAR2</span> == <span class="string">"variable 2"</span>) ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">"They are the same again."</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">digit=4</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$digit</span> =~ [0-9] ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$digit</span> is a digit"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$digit</span> isn't a digit"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">letter=<span class="string">"abc"</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$letter</span> =~ [0-9] ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$letter</span> is a digit"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$letter</span> isn't a digit"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># 4 is a digit</span></span><br><span class="line"><span class="comment"># abc isn't a digit</span></span><br></pre></td></tr></table></figure><h3 id="怎么使用-For-循环"><a href="#怎么使用-For-循环" class="headerlink" title="怎么使用 For 循环"></a>怎么使用 For 循环</h3><p><code>for</code>循环的使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> VARIABLE_NAME <span class="keyword">in</span> ITEM_1 ITEM_N</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">command</span> A</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> COLOR <span class="keyword">in</span> red green blue</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"COLOR: <span class="variable">$COLOR</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># COLOR: red</span></span><br><span class="line"><span class="comment"># COLOR: green</span></span><br><span class="line"><span class="comment"># COLOR: blue</span></span><br></pre></td></tr></table></figure><p>可以在其中使用变量，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">COLORS=<span class="string">"red green blue"</span></span><br><span class="line"><span class="keyword">for</span> COLOR <span class="keyword">in</span> <span class="variable">$COLORS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"COLOR: <span class="variable">$COLOR</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="用-for-循环重命名文件"><a href="#用-for-循环重命名文件" class="headerlink" title="用 for 循环重命名文件"></a>用 <code>for</code> 循环重命名文件</h4><p>我们举个简单的例子，用<code>for</code>循环重命名当前目录下的jpg图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IMGS=$(ls *jpg)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line"><span class="keyword">for</span> IMG <span class="keyword">in</span> <span class="variable">$IMGS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Renaming <span class="variable">$&#123;IMG&#125;</span> to <span class="variable">$&#123;DATE&#125;</span>-<span class="variable">$&#123;IMG&#125;</span>"</span></span><br><span class="line">  mv <span class="variable">$&#123;IMG&#125;</span> <span class="variable">$&#123;DATE&#125;</span>-<span class="variable">$&#123;IMG&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img data-src="https://st.razeen.cn/img/20210213170152_image-20210213170152011.png" alt="image-20210213170152011"></p><h3 id="怎么传参"><a href="#怎么传参" class="headerlink" title="怎么传参"></a>怎么传参</h3><p>执行脚本的时候，后面可以跟着很多参数，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scriptname param1 param2 param3</span><br></pre></td></tr></table></figure><p><code>param1</code> 到 <code>param3</code> 称为可选参数， 可以在脚本中用 <code>$0</code>, <code>$1</code>, <code>$2</code>等，来引用这些参赛。例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"'\$0' is <span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"'\$1' is <span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"'\$2' is <span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"'\$3' is <span class="variable">$3</span>"</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./param.sh</span><br><span class="line"><span class="string">'$0'</span> is ./param.sh</span><br><span class="line"><span class="string">'$1'</span> is</span><br><span class="line"><span class="string">'$2'</span> is</span><br><span class="line"><span class="string">'$3'</span> is</span><br></pre></td></tr></table></figure><p><code>$0</code> 参数0返回的是当前执行文件的名字，包括路径。</p><p>可以用 <code>$@</code> 接受所以的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> PARAM <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Param is: <span class="variable">$PARAM</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Using this script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./params.sh a b c d e f</span><br><span class="line">Param is: a</span><br><span class="line">Param is: b</span><br><span class="line">Param is: c</span><br><span class="line">Param is: d</span><br><span class="line">Param is: e</span><br><span class="line">Param is: f</span><br></pre></td></tr></table></figure><h3 id="怎么接收用户输入"><a href="#怎么接收用户输入" class="headerlink" title="怎么接收用户输入"></a>怎么接收用户输入</h3><p>用户输入称为<code>STDIN</code>。可以将<code>read</code>命令与<code>-p</code>（提示）选项一起使用来读取用户输入，它将输出提示字符串。 <code>-r</code> 选项不允许反斜杠转义任何字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -rp <span class="string">"PROMPT"</span> VARIABLE</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -rp <span class="string">"Enter your programming languages: "</span> PROGRAMMES</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Your programming languages are: "</span></span><br><span class="line"><span class="keyword">for</span> PROGRAMME <span class="keyword">in</span> <span class="variable">$PROGRAMMES</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$PROGRAMME</span> "</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./read.sh</span><br><span class="line">Enter your programming languages: go py</span><br><span class="line">Your programming languages are:</span><br><span class="line">go</span><br><span class="line">py</span><br></pre></td></tr></table></figure><h3 id="用大括号来表示范围"><a href="#用大括号来表示范围" class="headerlink" title="用大括号来表示范围 {}"></a>用大括号来表示范围 <code>{}</code></h3><p>如下所示，我们可以用大括号来表所一个数字或字母的范围。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;0..3&#125;</span><br><span class="line">$ <span class="built_in">echo</span> &#123;a..d&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># output: </span></span><br><span class="line"><span class="comment"># 0 1 2 3</span></span><br><span class="line"><span class="comment"># a b c d</span></span><br></pre></td></tr></table></figure><p>你也可以在 <code>for</code> 循环中这么使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;0..9&#125;; </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  touch file_<span class="string">"<span class="variable">$i</span>"</span>.txt; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>This will create different file names with different modification times.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al file_*</span><br><span class="line">-rw-rw-r-- 1 razeen razeen 0 2月  14 09:54 file_0.txt</span><br><span class="line">-rw-rw-r-- 1 razeen razeen 0 2月  14 09:54 file_1.txt</span><br><span class="line">-rw-rw-r-- 1 razeen razeen 0 2月  14 09:54 file_2.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="怎么使用While"><a href="#怎么使用While" class="headerlink" title="怎么使用While"></a>怎么使用While</h3><p>当 While 后的表达式结果为 <code>true</code>时，执行循环内语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 5 ]; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  ((i++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="退出码-返回码-是什么？"><a href="#退出码-返回码-是什么？" class="headerlink" title="退出码/返回码 是什么？"></a>退出码/返回码 是什么？</h3><p>每个命令都返回退出状态，范围为0-255。 0代表成功，非0代表错误。 可以用来进行错误检查。</p><table><thead><tr><th style="text-align:left">数值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">0</td><td style="text-align:left">成功</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">返回内置命令，从而提示错误</td></tr><tr><td style="text-align:left">126</td><td style="text-align:left">命令找到了，但不是可执行的</td></tr><tr><td style="text-align:left">127</td><td style="text-align:left">没有找到命令</td></tr><tr><td style="text-align:left">128+N</td><td style="text-align:left">由于接收到信号N，命令退出</td></tr></tbody></table><h4 id="怎么检查退出码"><a href="#怎么检查退出码" class="headerlink" title="怎么检查退出码"></a>怎么检查退出码</h4><p><code>$?</code> 包含了上一条命令执行的返回码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls ./no/exist</span><br><span class="line">ls: cannot access <span class="string">'./no/exist'</span>: No such file or directory</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"$?"</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>如，在<code>if</code>表达式中检查返回码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">HOST=<span class="string">"razeen.cn"</span></span><br><span class="line">ping -c 1 <span class="variable">$HOST</span></span><br><span class="line">RETURN_CODE=$?</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$RETURN_CODE</span>"</span> -eq <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$HOST</span> reachable."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$HOST</span> unreachable."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><code>-c 1</code> 参数表示发送一个可达包就停止发送。 然后我们检查一下<code>ping</code>执行的返回码。</p><p>输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./ex.sh</span><br><span class="line">PING razeen.cn (47.108.161.7) 56(84) bytes of data.</span><br><span class="line">64 bytes from 47.108.161.7 (47.108.161.7): icmp_seq=1 ttl=50 time=38.5 ms</span><br><span class="line"></span><br><span class="line">--- razeen.cn ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 38.541/38.541/38.541/0.000 ms</span><br><span class="line">razeen.cn reachable.</span><br></pre></td></tr></table></figure><h3 id="怎么连接多个命令"><a href="#怎么连接多个命令" class="headerlink" title="怎么连接多个命令"></a>怎么连接多个命令</h3><h4 id="逻辑运算符和命令退出状态"><a href="#逻辑运算符和命令退出状态" class="headerlink" title="逻辑运算符和命令退出状态"></a>逻辑运算符和命令退出状态</h4><p>执行命令后都有退出状态，我们可以使用 <code>&amp;&amp;</code> 和 <code>||</code>去决定下一步。</p><h4 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h4><p>你可以使用 <code>exit</code> 来决定退出码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exit 0</span><br><span class="line">exit 1</span><br><span class="line">exit 2</span><br><span class="line">etc.</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">HOST=<span class="string">"razeen.cn"</span></span><br><span class="line">ping -c 1 <span class="variable">$HOST</span>  </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"$?"</span> -ne <span class="string">"0"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$HOST</span> unreachable."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>我们可以将该脚本通过<code>&amp;&amp;</code>与其他脚本/命令连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./ex2.sh &amp;&amp; ls</span><br><span class="line">....</span><br><span class="line">2021-02-13-132m93.jpg   ex2.sh      file_1.txt  file_4.txt</span><br></pre></td></tr></table></figure><p>如果<code>./ex2.sh</code>返回状态码非0，后面的就不会执行。</p><h4 id="逻辑与-amp-amp"><a href="#逻辑与-amp-amp" class="headerlink" title="逻辑与 (&amp;&amp;)"></a>逻辑与 (&amp;&amp;)</h4><p>当<code>&amp;&amp;</code>前面的语句返回的状态码为<code>0</code>时，执行后面的语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/bak &amp;&amp; cp test.txt /tmp/bak</span><br></pre></td></tr></table></figure><h4 id="逻辑或"><a href="#逻辑或" class="headerlink" title="逻辑或 (||)"></a>逻辑或 (||)</h4><p>当<code>||</code>前面的语句返回的状态码非<code>0</code>时（也就是执行失败），执行后面的语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp test.txt /tmp/bak/ || cp test.test.txt /tmp</span><br></pre></td></tr></table></figure><p>例如：</p><p>如果<code>ping</code>通了，就执行后面的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host=<span class="string">"razeen.cn"</span></span><br><span class="line">ping -c 1 <span class="variable">$host</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"You can reach <span class="variable">$&#123;host&#125;</span>."</span></span><br></pre></td></tr></table></figure><p>如果<code>ping</code>失败了，就执行后面的输出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host=<span class="string">"google.com"</span></span><br><span class="line">ping -c 1 <span class="variable">$host</span> || <span class="built_in">echo</span> <span class="string">"You can't reach <span class="variable">$&#123;host&#125;</span>."</span></span><br></pre></td></tr></table></figure><h4 id="分号"><a href="#分号" class="headerlink" title="分号 (;)"></a>分号 (;)</h4><p>分号不是一个逻辑运算符，但你可以用它来分割语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp text.txt /tmp/bak/ ; cp test.txt /tmp</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">cp text.txt /tmp/bak/  </span><br><span class="line">cp test.txt /tmp</span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h3><p>管道<code>|</code>两侧的命令在各自的子shell中运行，并且两者同时启动。</p><p>如下：</p><p>第一个命令将目录更改为主目录，并列出文件和目录。</p><p>第二个命令仅显示执行该命令的文件和目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"<span class="variable">$(cd ~ &amp;&amp; ls)</span>"</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"<span class="variable">$(cd ~ | ls)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>在<code>Bash</code>中，你可以使用<code>function</code>或者直接定义一个函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">function</span>-<span class="function"><span class="title">name</span></span>()&#123;&#125;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">function</span>-<span class="function"><span class="title">name</span></span>()&#123;&#125;</span><br></pre></td></tr></table></figure><p>当你调用函数的时候，只需要函数名，不用带<code>()</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Hello!"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 正确</span></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误</span></span><br><span class="line"><span class="comment"># hello()</span></span><br></pre></td></tr></table></figure><p>在函数中，可以调用其他函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Hello!"</span></span><br><span class="line">  now</span><br><span class="line">  <span class="built_in">bye</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">now</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"It's <span class="variable">$(date +%r)</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bye</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Bye bye."</span></span><br><span class="line">&#125;</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># Hello!</span></span><br><span class="line"><span class="comment"># It's 09:29:44 PM</span></span><br><span class="line"><span class="comment"># Bye bye.</span></span><br></pre></td></tr></table></figure><p>但，需要注意函数的定义顺序。如果你在函数声明的前就去调用函数，函数就不会执行。如下， 在<code>hello</code>中执行<code>now</code>函数，但<code>now</code>是定义<code>hello</code>执行下面的，结果就会出错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># this won't work</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Hello!"</span></span><br><span class="line">  now</span><br><span class="line">&#125;</span><br><span class="line">hello</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">now</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"It's <span class="variable">$(date +%r)</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello2.sh</span><br><span class="line">Hello!</span><br><span class="line">./hello2.sh: line 5: now: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4><p>和脚本执行的时候传参一样，函数的参数也用<code>$1</code>…,<code>$@</code> 来输出。</p><p>注意<code>$0</code>这里并不是函数的名字，而是当前脚本的名字。</p><p><code>$N</code>是第N个参数，<code>$@</code>表示所有的参数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fullname</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"My name is <span class="variable">$1</span> <span class="variable">$2</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fullname Razeen Cheng</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line"><span class="comment"># ./func.sh</span></span><br><span class="line"><span class="comment"># My name is Razeen Cheng</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">greeting</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> NAME <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Hi <span class="variable">$NAME</span>."</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeting Tom Jerry</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>默认变量的作用域是全局的，必须先声明，后使用。 当然，最好在最上面就把需要的变量声明好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">my_func</span></span>() &#123;</span><br><span class="line">  GLOBAL_VAR=1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这时，变量还是空的</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Calling GLONAL_VAR before calling function my_func"</span></span><br><span class="line"><span class="comment"># echo $GLOBAL_VAR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明后，就可以输出了</span></span><br><span class="line">my_func</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Calling GLONAL_VAR after calling function my_func"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GLOBAL_VAR</span></span><br></pre></td></tr></table></figure><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>可以用<code>local</code>来定义局部变量，且只能在函数中使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">MY_VAR=1</span><br><span class="line"><span class="function"><span class="title">my_func</span></span> () &#123;</span><br><span class="line">  <span class="built_in">local</span> MY_VAR=2</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"my_func: MY_VAR=<span class="variable">$MY_VAR</span>"</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"global: MY_VAR=<span class="variable">$MY_VAR</span>"</span></span><br><span class="line">my_func</span><br></pre></td></tr></table></figure><h3 id="函数返回码"><a href="#函数返回码" class="headerlink" title="函数返回码"></a>函数返回码</h3><p>你可以在函数中，指定返回码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 0</span><br></pre></td></tr></table></figure><p>函数中最后执行的命令的退出状态将隐式返回。 有效代码范围为0-255。<code>0</code>代表成功，<code>$?</code>可以显示退出码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ my_function</span><br><span class="line">$ echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>可以在<code>if</code> 判断中用<code>$?</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该函数用来创建一个备份文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup_file</span></span> () &#123;</span><br><span class="line">    <span class="built_in">local</span> BACK <span class="comment"># 声明局部变量</span></span><br><span class="line">    <span class="keyword">if</span> [[ -f <span class="variable">$1</span> ]];<span class="keyword">then</span> <span class="comment"># 检查参数（是否是文件）</span></span><br><span class="line">        BACK=<span class="string">"/tmp/<span class="variable">$(basename "$1")</span>.<span class="variable">$(date +%F)</span>.$$"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Backing up <span class="variable">$1</span> to <span class="variable">$BACK</span>"</span></span><br><span class="line">        cp <span class="string">"<span class="variable">$1</span>"</span> <span class="string">"<span class="variable">$BACK</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 文件不存在.</span></span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    backup_file <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">    <span class="comment"># if [[ $? -eq 0 ]]; then</span></span><br><span class="line">    <span class="keyword">if</span> [[ $(backup_file <span class="string">"<span class="variable">$1</span>"</span>) -eq 0 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Backup succeeded."</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Backup failed."</span></span><br><span class="line">        <span class="comment"># 备份失败，中断，并返回非0状态.</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    backup_file /etc/hosts</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"/etc/hosts Backup succeeded."</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>上面这个脚本默认备份<code>/etc/hosts</code>文件，除非你制定一个文件外。如果你指定一个文件参数，他会先检查文件，然后备份到<code>/tmp</code>目录。</p><p><code>$$</code> 返回 <a href="https://tldp.org/LDP/abs/html/internalvariables.html" target="_blank" rel="noopener">当前脚本执行的PID</a>. 每次运行PID都会发生变化。当你需要多次运行脚本时，或许对你有帮助。</p><p><code>basename ${1}</code> 可以从你输入的路径中提取文件的名字. 如 <code>basename /etc/hosts</code> 是 <code>hosts</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls /tmp</span><br><span class="line">$ ex1           </span><br><span class="line">Backing up /etc/hosts to /tmp/hosts.2020-10-04.77124</span><br><span class="line">Backup succeeded.</span><br><span class="line">$ ls /tmp</span><br><span class="line">hosts.2020-10-04.77124</span><br></pre></td></tr></table></figure><h4 id="关键字-exit-和-return"><a href="#关键字-exit-和-return" class="headerlink" title="关键字 exit 和 return"></a>关键字 exit 和 return</h4><p><code>return</code> 会跳出当前函数, <code>exit</code>会结束当前脚本。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇博客总结了常用的，我们需要了解的一些脚本语法与知识。如果向更好的使用<code>bash</code>, 我们还需要进一步学习更多的命令等。希望这篇博客能对你有所帮助。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_02.html" target="_blank" rel="noopener">Variables</a>, <a href="https://tldp.org/LDP/abs/html/internalvariables.html" target="_blank" rel="noopener">Internal variables</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=timonwong.shellcheck" target="_blank" rel="noopener">shellcheck</a></li><li><a href="https://github.com/koalaman/shellcheck/wiki" target="_blank" rel="noopener">shellcheck wiki</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format" target="_blank" rel="noopener">shell-format</a></li><li><a href="https://wiki.bash-hackers.org/start" target="_blank" rel="noopener">The Bash Hackers Wiki</a></li><li><a href="https://tldp.org/LDP/abs/html/index.html" target="_blank" rel="noopener">Advanced Bash-Scripting Guide</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发的过程中，经常需要处理一些重复的工作，或者逻辑相当简单但耗时的功能，这时我们可能会考虑到用脚本来自动化完成这些工作。而 Bash 脚本是我们最容易接触到和上手的脚本语言。&lt;/p&gt;&lt;p&gt;这篇博客汇总一些常用的 Bash 语法，方便日后查阅学习。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux 点滴" scheme="https://razeencheng.com/categories/about-linux/"/>
    
    
      <category term="shell" scheme="https://razeencheng.com/tags/shell/"/>
    
      <category term="bash" scheme="https://razeencheng.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>Typora 自动上传图片到七牛云</title>
    <link href="https://razeencheng.com//post/typora-upload-image-qiniu.html"/>
    <id>https://razeencheng.com//post/typora-upload-image-qiniu.html</id>
    <published>2021-01-31T00:18:10.000Z</published>
    <updated>2021-07-10T09:23:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>用 Markdown 写博客配图片一直是个烦恼我的为问题， 每次上传图片都比较麻烦，或是中断思路，或是最后集中处理耗费时间。今天无意中，发现了 Typora 的图片自动上传功能，配合一段脚本，将插入的图片自动上传七牛，让写文章更爽了。</p><a id="more"></a><h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><p>我们看到在 Typora 的偏好设置中，有将图片插入时执行的动作。 在上传的设置中可以选择几种上传方式，由于前面几种要下其他软件，我就直接选了其他命令的方式。</p><p><img data-src="https://st.razeen.cn/img/20210130225707_image-20210130225707678.png" alt="image-20210130225707678"></p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>看了一下规则，很简单。 当你插入图片的时候会执行你的命令。 假如你的命令叫 <code>upload-image.sh</code> , 则会执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload-image.sh <span class="string">"imagepath1"</span> <span class="string">"imagepath2"</span> ...</span><br></pre></td></tr></table></figure><p>而你的命令只需要如下格式返回上传后的链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Upload Success:</span><br><span class="line">http://remote-image-1.png</span><br><span class="line">http://remote-image-2.png</span><br></pre></td></tr></table></figure><h3 id="qshell"><a href="#qshell" class="headerlink" title="qshell"></a>qshell</h3><p>知道了脚本怎么写，我首先想到了，平常用来上传文件到七牛的命令行工具 <code>qshell</code> 。</p><p><a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">GitHub🔗</a>上有详细的说明，你可以下下来自己编译，也可以直接下载编译好的。</p><p>关于命令使用，上面也有详细的介绍。 其实，我们这里主要只用到两个命令。</p><ul><li><p>设置账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell account [AccessKey] [SecretKey] [Name]</span><br></pre></td></tr></table></figure><p>其中，两个 Key 七牛账户中可以添加。 后面的 Name 随便写。</p></li><li><p>上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qshell rput &lt;Bucket&gt; &lt;Key&gt; &lt;LocalFile&gt;</span><br></pre></td></tr></table></figure><p>其中，Bucket 就是对象存储空间的名字， key 上传后的路径， LocalFile 本地文件路径。</p></li></ul><h3 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h3><p>最新的脚本可以看<a href="https://github.com/razeencheng/typora-upload-img-qiniu" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">IFS=$<span class="string">';'</span></span><br><span class="line"></span><br><span class="line">BUCKET=<span class="string">"blog"</span>  <span class="comment"># 这里换成 你在七牛的空间名称</span></span><br><span class="line">QSHELL=<span class="string">"D:\Users\Razeen\wspace\bin\qshell.exe"</span> <span class="comment"># 这里换成 你qshell可执行文件的路径</span></span><br><span class="line">DOMAIN=<span class="string">"https://st.razeen.cn"</span> <span class="comment"># 这里换成 你在七牛对应的自定义域名</span></span><br><span class="line">PATH_PREFIX=<span class="string">"img"</span> <span class="comment"># 这里换成 你想设置的图片路径前缀</span></span><br><span class="line">ACCESSKEY=xxxxxxxx <span class="comment"># 这里设置 你的七牛密钥</span></span><br><span class="line">SECUREKEY=xxxxxxx </span><br><span class="line">ACTNAME=self <span class="comment"># 可以给这个账号一个别名</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$QSHELL</span> account <span class="variable">$ACCESSKEY</span> <span class="variable">$SECUREKEY</span> <span class="variable">$ACTNAME</span> -w</span><br><span class="line"></span><br><span class="line">sys=$(uname -s)</span><br><span class="line"></span><br><span class="line">i=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filepath <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">    i=$((<span class="variable">$&#123;i&#125;</span>+1))</span><br><span class="line"></span><br><span class="line">    date_prefix=$(date +<span class="string">'%Y%m%d%H%M%S'</span>)</span><br><span class="line"></span><br><span class="line">    filename=<span class="string">"<span class="variable">$&#123;date_prefix&#125;</span>-<span class="variable">$&#123;filepath##*/&#125;</span>"</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># windows 路径匹配不一样</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;sys&#125;</span> == <span class="string">"MINGW64"</span>* ]]; <span class="keyword">then</span></span><br><span class="line">        filename=<span class="string">"<span class="variable">$&#123;date_prefix&#125;</span>-<span class="variable">$&#123;filepath##*\\&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span>                                                                   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;filepath&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">         <span class="variable">$&#123;QSHELL&#125;</span> rput <span class="variable">$&#123;BUCKET&#125;</span> <span class="string">"<span class="variable">$&#123;PATH_PREFIX&#125;</span>/<span class="variable">$&#123;filename&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;filepath&#125;</span>"</span> &gt; /dev/null</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$&#123;i&#125;</span> -eq 1 ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Upload Success:"</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;DOMAIN&#125;</span>/<span class="variable">$&#123;PATH_PREFIX&#125;</span>/<span class="variable">$&#123;filename&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"upload <span class="variable">$&#123;filepath&#125;</span> failed!"</span></span><br><span class="line">            <span class="built_in">exit</span> 1;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;filepath&#125;</span> does not exist"</span></span><br><span class="line">        <span class="built_in">exit</span> 1;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ol><li><p>保存上面脚本，修改当中需要的信息，并添加执行权限。</p></li><li><p>在 <code>Typora</code> 中设置 这个命令（绝对路径），如</p><p><img data-src="https://st.razeen.cn/img/20210131000315_image-20210131000315109.png" alt="image-20210131000315109"></p><p>Mac/Ubutun上这么设置没问题， 但Windows上可能会出现如下错误。</p><p><img data-src="https://st.razeen.cn/img/20210701002430_image-20210701002428848.png" alt="image-20210701002428848"></p><p>这时我们需要换一个脚本解释器，如换成 <code>Git Bash</code>，如下图，直接在脚本前面加上<code>Git Bash</code>路径。</p><p><img data-src="https://st.razeen.cn/img/20210701002926-image-20210701002924703.png" alt="image-20210701002924703"></p></li></ol><ol start="4"><li><p>最后使用效果如下：</p><p><img data-src="https://st.razeen.cn/img/20210131000625_image-20210131000625463.png" alt="image-20210131000625463"></p></li></ol><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><ul><li><p>shell 脚本读取用户输入参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$# 是传给脚本的参数个数</span><br><span class="line">$0 是脚本本身的名字</span><br><span class="line">$1是传递给该shell脚本的第一个参数</span><br><span class="line">$2是传递给该shell脚本的第二个参数</span><br><span class="line">$@ 是传给脚本的所有参数的列表</span><br></pre></td></tr></table></figure></li><li><p>shell脚本中判断上一个命令是否执行成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell中使用符号 $? 来显示上一条命令执行的返回值，如果为0则代表执行成功，其他表示失败。</span><br></pre></td></tr></table></figure></li><li><p>shell 从路径中提取文件名和目录名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">提取文件名 $&#123;filepath##*/&#125;</span><br><span class="line">提取文件后缀 $&#123;filepath##*.&#125; 或 $&#123;filepath#*.&#125;</span><br><span class="line">提取目录 $&#123;filepath%/*&#125;</span><br><span class="line">主要原理：</span><br><span class="line">#：表示从左边算起第一个</span><br><span class="line">%：表示从右边算起第一个</span><br><span class="line">##：表示从左边算起最后一个</span><br><span class="line">%%：表示从右边算起最后一个</span><br><span class="line"></span><br><span class="line">除此之外，basename 和 filename 命令也可以做到。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Markdown 写博客配图片一直是个烦恼我的为问题， 每次上传图片都比较麻烦，或是中断思路，或是最后集中处理耗费时间。今天无意中，发现了 Typora 的图片自动上传功能，配合一段脚本，将插入的图片自动上传七牛，让写文章更爽了。&lt;/p&gt;
    
    </summary>
    
      <category term="博客折腾日记" scheme="https://razeencheng.com/categories/my-blog/"/>
    
    
      <category term="shell" scheme="https://razeencheng.com/tags/shell/"/>
    
      <category term="linux" scheme="https://razeencheng.com/tags/linux/"/>
    
      <category term="typora" scheme="https://razeencheng.com/tags/typora/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 20.04 LTS 有线网卡驱动安装</title>
    <link href="https://razeencheng.com//post/ubutun-realtek-r8125-driver-install.html"/>
    <id>https://razeencheng.com//post/ubutun-realtek-r8125-driver-install.html</id>
    <published>2021-01-20T01:30:08.000Z</published>
    <updated>2021-07-10T09:23:16.416Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 20.04 LTS 安装好后，发现 WIFI 可以正常连接，有线网络连图标都没有显示。经过诊断发现是有线网卡驱动未正确问题。最后通过手动安装网卡驱动得以解决。这里记录一下。</p><p>我的主板是 <code>微星B460M MORTAR WIFI</code>，驱动 <code>R8125</code>。类似型号安装应也差不多。</p><a id="more"></a><h3 id="怎么看网卡驱动是否安装？"><a href="#怎么看网卡驱动是否安装？" class="headerlink" title="怎么看网卡驱动是否安装？"></a>怎么看网卡驱动是否安装？</h3><p>用 <code>ifconfig</code>查看网络设备情况。</p><blockquote><p><code>ifconfig</code> 没有，可以用 <code>sudo apt install net-tools</code> 安装。</p></blockquote><p>如果一切正常，你或许看到的是类似这样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; ifconfig</span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">wlp3s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.123.57  netmask 255.255.255.0  broadcast 192.168.123.255</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">enp4s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.123.64  netmask 255.255.255.0  broadcast 192.168.123.255</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>lo</code> 开头的，表示本地连接</li><li><code>wl</code> 开头的，表示无线局域网 (wlan Wireless Local Area Network)<ul><li><code>p3s0</code>描述了无线局域网的 PCI 接口位置： bus=3, slot=0</li></ul></li><li><code>en</code> 开头的，表示以太网(ethernet)<ul><li><code>p2s0</code> 描述了以太网的 PCI 接口位置： bus=2, slot=0</li></ul></li></ul><blockquote><p><code>PCI</code> 全称(Peripheral Component Interconnect)，即外设部件互连标准</p></blockquote><p>如果没有<code>en</code>开头的这个，说明网卡驱动存在问题。 我们可以利用<code>lspci -v | grep Ethernet</code> 具体的查看一下网卡的型号，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lspci -v | grep Ethernet</span><br><span class="line">04:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8125 2.5GbE Controller (rev 04)</span><br></pre></td></tr></table></figure><h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><p>到 <a href="https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software" target="_blank" rel="noopener">Realtek官网</a> 下载好驱动，如对应上面的输出<code>RTL8125 2.5GbE Controller</code>，我找到了该驱动。</p><p><img data-src="https://st.razeen.cn/img/2021-01-30_00-43.png" alt></p><p>下载好后，经入下载后的文件夹，开始准备安装了。</p><ol><li><p>准备环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall linux-headers-$(uname -r) linux-headers-generic build-essential dkms</span><br></pre></td></tr></table></figure></li><li><p>解压源码到 <code>/usr/src</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar xvf r8125-9.004.01.tar.bz2 -C /usr/src</span><br></pre></td></tr></table></figure><p><em>按照其中README.md的方法安装后也可使用，但重启后需要重新安装。</em></p></li><li><p>添加一个 <code>dkms.conf</code> 到 <code>/usr/src/r8125-9.004.01/</code> 目录下，内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_NAME=Realtek_r8125</span><br><span class="line">PACKAGE_VERSION=9.003.02</span><br><span class="line"></span><br><span class="line">DEST_MODULE_LOCATION=/updates/dkms</span><br><span class="line">BUILT_MODULE_NAME=r8125</span><br><span class="line">BUILT_MODULE_LOCATION=src/</span><br><span class="line"></span><br><span class="line">MAKE=<span class="string">"'make' -C src/ all"</span></span><br><span class="line">CLEAN=<span class="string">"'make' -C src/ clean"</span></span><br><span class="line">AUTOINSTALL=<span class="string">"yes"</span></span><br></pre></td></tr></table></figure></li><li><p>编译 dkms</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo dkms add -m r8125 -v 9.004.01</span><br><span class="line">sudo dkms build -m r8125 -v 9.004.01</span><br><span class="line">sudo dkms install -m r8125 -v 9.004.01</span><br><span class="line">sudo depmod -a</span><br><span class="line">sudo modprobe r8125</span><br></pre></td></tr></table></figure></li><li><p>操作完成后，你就可以通过<code>ifconfig</code> 看到<code>en</code>开头的有线网连接了。</p></li><li><p>如果后续有升级，需要先删除，再安装新的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dkms remove r8125/9.004.01 --all</span><br></pre></td></tr></table></figure></li></ol><p>另外，我遇到过一次升级内核，把这个驱动弄没了，这时再编译安装一次就好了。</p><p><strong>相关链接</strong></p><ul><li><a href="https://www.realtek.com/en/component/zoo/category/network-interface-controllers-10-100-1000m-gigabit-ethernet-pci-express-software" target="_blank" rel="noopener">Realtek 驱动</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 20.04 LTS 安装好后，发现 WIFI 可以正常连接，有线网络连图标都没有显示。经过诊断发现是有线网卡驱动未正确问题。最后通过手动安装网卡驱动得以解决。这里记录一下。&lt;/p&gt;&lt;p&gt;我的主板是 &lt;code&gt;微星B460M MORTAR WIFI&lt;/code&gt;，驱动 &lt;code&gt;R8125&lt;/code&gt;。类似型号安装应也差不多。&lt;/p&gt;
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
    
      <category term="linux" scheme="https://razeencheng.com/tags/linux/"/>
    
      <category term="ubuntu" scheme="https://razeencheng.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>折腾 Ubuntu 20.04 LTS 开发环境</title>
    <link href="https://razeencheng.com//post/start-use-ubuntu-and-win.html"/>
    <id>https://razeencheng.com//post/start-use-ubuntu-and-win.html</id>
    <published>2020-08-28T02:48:08.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p><del>前段时间买了个 Inter NUC (NUC10i5FNH6), 主要用来在家里搬砖。体验了一段时间 win10, 虽然配置了 WSL2， 但开发体验实在糟糕，在考虑过 Ubuntu 和黑苹果后，还是选择了 Ubuntu, 毕竟用习惯了白苹果，突然用个黑苹果，不能随意升级，还有接一个 USB WiFi ，还担心驱动问题。。。</del></p><blockquote><p>NUC 用了一段时间，还是有点卡，CPU跟不上。 最后还是组装了一台台式主机，将原来的系统盘查上去直接就可使用，爽到飞起。 至于NUC就当服务器用了。</p></blockquote><p>毕竟头一次想把 Ubuntu 当作生产力，记录一下折腾过程。</p><a id="more"></a><h3 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h3><table><thead><tr><th></th><th>配置</th></tr></thead><tbody><tr><td>CPU</td><td><del>i5-10210U (1.6GHz-4.2GHz)</del> Intel(R) Core(TM) i5-10400F CPU @ 2.90GHz</td></tr><tr><td>显卡</td><td><del>Intel UHD</del> GeForce GTX 1050 Ti</td></tr><tr><td>内存</td><td><del>32G x 2 (相当浪费==)</del> 32G</td></tr><tr><td>磁盘</td><td>Intel 760p 512G + 三星 860 EVO 500G</td></tr></tbody></table><h3 id="系统篇"><a href="#系统篇" class="headerlink" title="系统篇"></a>系统篇</h3><h4 id="安装双系统"><a href="#安装双系统" class="headerlink" title="安装双系统"></a>安装双系统</h4><p>双系统安装很简单，网上教程视频很多，这里主要说一下我的 Ubuntu 怎么分区的。</p><p>我分了 200G 磁盘给 Ubuntu, 其中：</p><ul><li><p>根目录 (/) - 120G</p><p>主要是系统和软件，还是比较吃空间的。</p></li><li><p>HOME (/home) - 79G</p><p>桌面，文档等一些东西，差不多够用了。不够再把其他分区挂载进来存东西就行了。</p></li><li><p>BOOT (/boot) - 1G</p><p>其实现在都用了LVM，BOOT直接放根目录一起也可以了，但我还是给了1G。</p></li></ul><p>至于SWAP分区，我看了以下SWAP分区的作用（内存交换，内存不足就把一部分硬盘虚拟成内存使用），emmm… 貌似我……64G的内存我目前还用不完，索性不分了。</p><h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><ul><li><p>软件源设置国内的（<strong>关于-&gt;Software Updates-&gt;Ubuntu软件-&gt;下载自</strong>）；</p><p>我选了一个阿里的，感觉速度还可以。</p></li><li><p>软件更新频率等按自己偏好设置一波；</p></li><li><p>Dock栏放右边；</p></li></ul><h4 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h4><p>我想在 <code>Linux</code> 下查看原来 <code>Win</code>的文件，找到磁盘，挂载即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找磁盘</span></span><br><span class="line">sudo fdisk -l</span><br><span class="line">设备                起点       末尾      扇区   大小 类型</span><br><span class="line">/dev/nvme0n1p1      2048    1085439   1083392   529M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p2   1085440    1290239    204800   100M EFI 系统</span><br><span class="line">/dev/nvme0n1p3   1290240    1323007     32768    16M Microsoft 保留</span><br><span class="line">/dev/nvme0n1p4   1323008  419337986 418014979 199.3G Microsoft 基本数据</span><br><span class="line">/dev/nvme0n1p5 419338240  420745215   1406976   687M Windows 恢复环境</span><br><span class="line">/dev/nvme0n1p6 420747264 1000212479 579465216 276.3G Microsoft 基本数据</span><br></pre></td></tr></table></figure><p>如，按照分区顺序，大小，我这里基本可以确认 <code>/dev/nvme0n1p4</code> 是 C 盘， <code>/dev/nvme0n1p6</code>是 D 盘。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建一个目录 挂载</span></span><br><span class="line">sudo mkdir /mnt/d</span><br><span class="line">sudo mount /dev/nvme0n1p6 /mnt/d</span><br></pre></td></tr></table></figure><p>这只是临时挂载，重启系统需要再次执行挂载命令。启动时自动挂载需要修改文件<code>/etc/fstab</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入如以下(我这里是ntfs系统，如果FAT32，把ntfs改成vfat即可)</span></span><br><span class="line">/dev/nvme0n1p6 /mnt/d ntfs defaults 0 0</span><br></pre></td></tr></table></figure><h4 id="CAPS-与-CTRL-键位互换"><a href="#CAPS-与-CTRL-键位互换" class="headerlink" title="CAPS 与 CTRL 键位互换"></a>CAPS 与 CTRL 键位互换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /usr/share/X11/xkb/keycodes/evdev</span><br></pre></td></tr></table></figure><p>搜索 <code>&lt;CAPS&gt;</code> 和 <code>CTRL</code>, 并互换后面的数字。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;CAPS&gt; = 37;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;LCTL&gt; = 66;</span><br></pre></td></tr></table></figure><p>注销，重新登录生效。</p><h4 id="安装L2TP-IPSec-VPN"><a href="#安装L2TP-IPSec-VPN" class="headerlink" title="安装L2TP/IPSec VPN"></a>安装L2TP/IPSec VPN</h4><p>公司办公用的是这个VPN，在家要处理一些事情需要连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nm-l2tp/network-manager-l2tp  </span><br><span class="line">sudo apt update  </span><br><span class="line">sudo apt install -y network-manager-l2tp network-manager-l2tp-gnome</span><br></pre></td></tr></table></figure><p>安装后就可以直接在 <strong>设置&gt;网络&gt; VPN &gt; ‘+’ &gt; ‘第2层隧道协议(L2TP)’</strong> 中添加了。</p><p><img data-src="https://st.razeen.cn/img/2020-08-22_01-484.png" alt></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>在home目录下建一个 <code>.bash_profile</code> 放自定义的环境变量，并在启动终端时自动应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">touch .bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source \$HOME/.bash_profile"</span> &gt;&gt; .zshrc</span><br></pre></td></tr></table></figure><h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>长时间搬砖，字体一定得看着束缚。 个人偏好<code>CamingoCode</code>字体。<a href="https://github.com/chrissimpkins/codeface/tree/master/fonts" target="_blank" rel="noopener">更多字体</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y font-manager</span><br></pre></td></tr></table></figure><p>字体下载好后，打开安在，在IDE/终端内设置该字体即可。</p><h4 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h4><p>为了面向 Google , Stackoverflow 编程， 科学上网必不可少。我用的<a href="https://portal.shadowsocks.nz/aff.php?aff=26059" target="_blank" rel="noopener">这家</a>，￥90多一年，速度够用。</p><h4 id="换个Grub2主题"><a href="#换个Grub2主题" class="headerlink" title="换个Grub2主题"></a>换个Grub2主题</h4><p>也就是开机选择系统的界面主题。</p><p>主题 <a href="https://github.com/gustawho/grub2-theme-breeze" target="_blank" rel="noopener">breeze</a>。 更换步骤如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:gustawho/grub2-theme-breeze.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题移到合适位置</span></span><br><span class="line">sudo mkdir /boot/grub/themes</span><br><span class="line">sudo cp -r grub2-theme-breeze/breeze /boot/grub/themes/breeze</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认配置</span></span><br><span class="line">sudo vim /etc/default/grub</span><br><span class="line"><span class="comment"># 添加如下</span></span><br><span class="line">GRUB_THEME=<span class="string">"/boot/grub/themes/breeze/theme.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h4 id="修改开机启动顺序"><a href="#修改开机启动顺序" class="headerlink" title="修改开机启动顺序"></a>修改开机启动顺序</h4><p>默认 Win，毕竟有时候家人也要用。但默认配置是</p><ol><li>Ubuntu</li><li>Ubuntu 的高级选项</li><li>Windows</li><li>EFI 设置</li></ol><p>看着难受，必须把 Win 第一， Ubuntu第二。</p><p>很简单，修改 <code>/boot/grub</code> 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该文件是只读的， 给一个修改权限</span></span><br><span class="line">sudo chmod u+w /boot/grub/grub.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">sudo vim /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p><code>menuentry &#39;xxx&#39; {}</code> 就对应显示的一个启动菜单， 把<code>menuentry &#39;Windows Boot Manager xxx {}&#39;</code> 移动到<code>menuentry &#39;Ubuntu&#39; xxx {}</code> 之前 <code>:wq</code>保存即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复只读权限</span></span><br><span class="line">sudo chmod u-w /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><blockquote><p>上面的方式，在系统更新 grub 后，或 <code>sudo update-grub</code>之后会失效（grub.cfg 文件被更新了）。</p><p>推荐使用下面的方式，即 修改配置文件 <code>/etc/default/grub</code> , 设置 <code>GRUB_DEFAULT=2</code>, 这里的<code>2</code>是 win 在启动界面的顺序，从上到下<code>0，1，2</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># sudo vim /etc/default/grub</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; GRUB_DEFAULT=2</span><br><span class="line">&gt; GRUB_TIMEOUT_STYLE=hidden</span><br><span class="line">&gt; GRUB_TIMEOUT=10</span><br><span class="line">&gt; GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || <span class="built_in">echo</span> Debian`</span><br><span class="line">&gt; GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash"</span></span><br><span class="line">&gt; GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="顶部状态栏显示CPU等监控信息"><a href="#顶部状态栏显示CPU等监控信息" class="headerlink" title="顶部状态栏显示CPU等监控信息"></a>顶部状态栏显示CPU等监控信息</h4><p>效果如下：</p><p><img data-src="http://st.razeen.cn/img/2020-08-29_16-31.png" alt></p><p>其实这只是桌面系统<code>gnome</code>的一个插件，我们只需要安装一个 Chrome 浏览器插件<code>GNOME Shell integration</code> 和 本地的代理<code>chrome-gnome-shell</code> 就可以在<code>https://extensions.gnome.org/</code> 上安装、管理你的桌面插件。</p><ul><li><p>Chrome 浏览器插件 -&gt; <a href="https://chrome.google.com/webstore/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep" target="_blank" rel="noopener">chrome-gnome-shell</a> ;</p></li><li><p>本地代理安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure></li></ul><p>安装完成后，打开 <a href="https://extensions.gnome.org" target="_blank" rel="noopener">https://extensions.gnome.org</a> ，搜索 <code>system-monitor</code> ，打开开关，状态栏就有了，可以点击设计按钮设置喜欢的样式。</p><p><img data-src="http://st.razeen.cn/img/2020-08-29_16-52.png" alt="2020-08-29_16-52.png"></p><h3 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h3><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>最喜欢的浏览器还是Chrome, <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb" target="_blank" rel="noopener">直接下载 .deb 包安装</a>。</p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><p>没错，Markdown 就用它，简洁而强大。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># or run:</span></span><br><span class="line"><span class="comment"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"><span class="comment"># add Typora's repository</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io/linux ./'</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line">sudo apt install -y typora</span><br></pre></td></tr></table></figure><h4 id="Flameshot"><a href="#Flameshot" class="headerlink" title="Flameshot"></a>Flameshot</h4><p>很强大的一款截图软件，写文档需要标注，说明，马赛克等等，很实用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y flameshot</span><br></pre></td></tr></table></figure><h4 id="Enpass"><a href="#Enpass" class="headerlink" title="Enpass"></a>Enpass</h4><p>一款仅次于 1password 的<a href="https://www.enpass.io/support/kb/general/how-to-install-enpass-on-linux/" target="_blank" rel="noopener">密码管理软件</a>。 由于是早期付费用户（￥80全平台==），还是享受到一定优惠的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo - i </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://apt.enpass.io/ stable main"</span> &gt; /etc/apt/sources.list.d/enpass.list</span><br><span class="line">wget -O - https://apt.enpass.io/keys/enpass-linux.key | apt-key add -</span><br><span class="line">apt update</span><br><span class="line">apt install -y enpsudo vi /usr/share/X11/xkb/keycodes/evdevass</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a>SwitchHosts</h4><p>一款 <code>Electron</code> 写的跨平台 <code>Hosts</code> 管理软件，管理/切换 <code>Hosts</code>很方便。</p><p><a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener">SwitchHosts</a></p><p>images/PNG image.png</p><h4 id="SMB服务"><a href="#SMB服务" class="headerlink" title="SMB服务"></a>SMB服务</h4><p>手机与 <code>Linux</code> 怎么快速传文件，我考虑用了 <code>SMB</code>。 正好苹果手机的<code>文件</code>支持连接<code>SMB</code>服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install -y samba samba-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个共享文件夹</span></span><br><span class="line">mkdir /home/razeen/wspace/share</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限放开</span></span><br><span class="line">sudo chmod 777 /home/razeen/wspace/share -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户, 需要输入密码</span></span><br><span class="line">sudo smbpasswd -a razeen</span><br><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line">Added user razeen.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我简单设置了一下</span></span><br><span class="line">[ubuntu]</span><br><span class="line">   comment = ubuntu share dir</span><br><span class="line">   path = /home/razeen/wspace/share</span><br><span class="line">   public = yes</span><br><span class="line">   writable = yes</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo systemctl restart smbd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> smbd.service</span><br></pre></td></tr></table></figure><p>在手机直接输入 <code>smb://你的ip</code> 浏览器提示打开<code>文件</code>应用， 确认，然后进去输入刚刚设置的账户以及密码即可。然后手机中的文件就可以直接分享到电脑，电脑上的文件拖到共享文件夹可以快速下载。</p><p><img data-src="https://st.razeen.cn/img/smbimage12.png" alt></p><h3 id="搬砖工具篇"><a href="#搬砖工具篇" class="headerlink" title="搬砖工具篇"></a>搬砖工具篇</h3><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><p>高效，美观的终端，就靠它了。</p><p>先安装 <code>zsh , git</code>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh git</span><br></pre></td></tr></table></figure><p>再安装 <code>oh-my-zsh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>设置启动时自动进入 zsh</p><p>在 <strong>首选项 -&gt; 配置文件 -&gt; 运行自定义命令而不是shell -&gt; 自定义命令</strong> 输入 <code>zsh</code>。</p><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><p>分屏，Session, 多缓存区，高效管理终端，终端复用 用它没错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y tmux</span><br></pre></td></tr></table></figure><p>配置还在摸索，<code>Mac</code> 上的不适用了，后面再单独整理一篇文章。</p><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>效率，极客之选。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y vim</span><br></pre></td></tr></table></figure><p>同上，配置还在摸索，<code>Mac</code> 上的不适用了，后面再单独整理一篇文章。</p><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install -y \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>把 docker 加入当前用户组，然后重启，用非 root 运行 docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>添加国内的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 163</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker服务</span></span><br><span class="line">systemctl restart docker.service</span><br><span class="line"><span class="comment"># 自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h4 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h4><p>好用，没话说。直接<a href="https://code.visualstudio.com/docs/?dv=linux64_deb" target="_blank" rel="noopener">官网下载</a>，点击安装。</p><h3 id="Golang-篇"><a href="#Golang-篇" class="headerlink" title="Golang 篇"></a>Golang 篇</h3><p>作为主力编程语言，不能怠慢。</p><h4 id="从源码安装"><a href="#从源码安装" class="headerlink" title="从源码安装"></a>从源码安装</h4><p>必须从源码安装，掌控每个细节。</p><h5 id="通商准备工作"><a href="#通商准备工作" class="headerlink" title="通商准备工作"></a>通商准备工作</h5><p>给自己建一个工作区， 以及相关目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># go 相关目录</span></span><br><span class="line">mkdir -p wspace/<span class="built_in">source</span>/go \</span><br><span class="line">wspace/<span class="built_in">source</span>/go14 \</span><br><span class="line">wspace/go/src \</span><br><span class="line">wspace/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string"># 我的工作区</span></span><br><span class="line"><span class="string">export WSPACE=$HOME/wspace</span></span><br><span class="line"><span class="string"># 源码文件</span></span><br><span class="line"><span class="string">export SOURCECODE=$WSPACE/source</span></span><br><span class="line"><span class="string"># go 安装引导</span></span><br><span class="line"><span class="string">export GOROOT_BOOTSTRAP=$SOURCECODE/go14</span></span><br><span class="line"><span class="string"># go root</span></span><br><span class="line"><span class="string">export GOROOT=$SOURCECODE/go</span></span><br><span class="line"><span class="string"># go path</span></span><br><span class="line"><span class="string">export GOPATH=$WSPACE/go</span></span><br><span class="line"><span class="string"># go bin</span></span><br><span class="line"><span class="string">export GOBIN=$GOPATH/bin</span></span><br><span class="line"><span class="string"># go module</span></span><br><span class="line"><span class="string">export GO111MODULE=on</span></span><br><span class="line"><span class="string"># go proxy</span></span><br><span class="line"><span class="string">export GOPROXY=https://goproxy.io,direct</span></span><br><span class="line"><span class="string"># cgo</span></span><br><span class="line"><span class="string">export CGO_ENABLED=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># PATH</span></span><br><span class="line"><span class="string">export PATH=$PATH:$GOROOT/bin:$GOBIN</span></span><br><span class="line"><span class="string">'</span> &gt;&gt; .bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h5 id="下载Go1-4引导"><a href="#下载Go1-4引导" class="headerlink" title="下载Go1.4引导"></a>下载Go1.4引导</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://dl.google.com/go/go1.4-bootstrap-20171003.tar.gz -v -o go1.4.tar.gz</span><br><span class="line">tar -zxvf go1.4.tar.gz</span><br><span class="line">mv go/* <span class="variable">$GOROOT_BOOTSTRAP</span></span><br><span class="line">rm -fr go go1.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOROOT_BOOTSTRAP</span>/src</span><br><span class="line">./all.bash</span><br></pre></td></tr></table></figure><h5 id="下载源码并编译"><a href="#下载源码并编译" class="headerlink" title="下载源码并编译"></a>下载源码并编译</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://go.googlesource.com/go <span class="variable">$GOROOT</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOROOT</span></span><br><span class="line">git checkout go1.15</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./all.bash</span><br><span class="line">go version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;前段时间买了个 Inter NUC (NUC10i5FNH6), 主要用来在家里搬砖。体验了一段时间 win10, 虽然配置了 WSL2， 但开发体验实在糟糕，在考虑过 Ubuntu 和黑苹果后，还是选择了 Ubuntu, 毕竟用习惯了白苹果，突然用个黑苹果，不能随意升级，还有接一个 USB WiFi ，还担心驱动问题。。。&lt;/del&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;NUC 用了一段时间，还是有点卡，CPU跟不上。 最后还是组装了一台台式主机，将原来的系统盘查上去直接就可使用，爽到飞起。 至于NUC就当服务器用了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;毕竟头一次想把 Ubuntu 当作生产力，记录一下折腾过程。&lt;/p&gt;
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
      <category term="ubuntu" scheme="https://razeencheng.com/tags/ubuntu/"/>
    
      <category term="windows" scheme="https://razeencheng.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记（九） 计时器的生命周期[译]</title>
    <link href="https://razeencheng.com//post/go-timers-life-cycle.html"/>
    <id>https://razeencheng.com//post/go-timers-life-cycle.html</id>
    <published>2020-08-15T07:41:00.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://st.razeen.cn/img/go-timer.png" alt="Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French."></p><p><em>全文基于GO 1.14</em></p><p>计时器在定时执行一些任务时很有用。Go内部依靠调度器来管理创建的计时器。而Go的调度程序是协作式的调度方式，这会让整个调度看起来比较复杂，因为goroutune必须自己停止（依赖channel阻塞或system call), 或者由调度器自己在某个调度点暂停。</p><a id="more"></a><p><em>有关抢占的更多信息，建议您阅读作者的文章<a href="https://medium.com/a-journey-with-go/go-goroutine-and-preemption-d6bc2aa2f4b7" target="_blank" rel="noopener">Go: Goroutine and Preemption</a></em>.</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>下面是一段简单示例代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">sigs := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal,<span class="number">1</span>)</span><br><span class="line">signal.Notify(sigs,syscall.SIGINT,syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line">time.AfterFunc(time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"done"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;- sigs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计时器创建后，他会保存到一个链接到当前P的计时器内部列表上，下图就是这段代码的表示形式：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p.png" alt></p><p><em>有关G，M，P模型的更多信息，建议您阅读作者的文章<a href="https://medium.com/a-journey-with-go/go-goroutine-os-thread-and-cpu-management-2f5a5eaf518a" target="_blank" rel="noopener">Go: Goroutine, OS Thread and CPU Management</a></em></p><p>从图中可以看到，一旦创建了计时器，它就会注册一个内部回调，该内部回调将使用<code>go</code>回调用户函数，并将其转换为goroutine。</p><p>然后，将通过调度程序管理计时器。在每一轮调度中，它都会检查计时器是否准备好运行，如果准备就绪，则准备运行。实际上，由于Go调度程序本身不会运行任何代码，因此运行计时器的回调会将其goroutine排队到本地队列中。然后，当调度程序在队列中将其接收时，goroutine将运行。如选图所示：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p2.png" alt></p><p>根据本地队列的大小，计时器运行可能会稍有延迟。不过，由于Go 1.14中的异步抢占，goroutines在运行时间10ms后会被抢占，降低了延迟的可能性。</p><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>为了了解计时器可能存在的延迟，我们创造一个场景：从同一goroutine创建大量计时器。</p><p>由于计时器都链接到当前<code>P</code>，因此繁忙的<code>P</code>无法及时运行其链接的计时器。代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">trace.Start(os.Stderr)</span><br><span class="line"><span class="keyword">defer</span> trace.Stop()</span><br><span class="line"></span><br><span class="line">sigs := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal,<span class="number">1</span>)</span><br><span class="line">signal.Notify(sigs,syscall.SIGINT,syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line"><span class="comment">//time.AfterFunc(time.Second, func() &#123;</span></span><br><span class="line"><span class="comment">//println("done")</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt; <span class="number">1e3</span> ; i++ &#123;</span><br><span class="line">time.AfterFunc(time.Second, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">atomic.AddInt64(&amp;num,<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t:= <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">1e10</span>; i++ &#123;</span><br><span class="line">t ++</span><br><span class="line">&#125;</span><br><span class="line">_ = t</span><br><span class="line"></span><br><span class="line">&lt;- sigs</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(num,<span class="string">"timers created,"</span>,t,<span class="string">"iterations done"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过go tool trace， 我们可以看到goroutine正在占用处理器：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p3.png" alt></p><p>由于异步抢占的原因，代表正在运行的goroutine图形被分成了大量较小的块。</p><p>在这些块中，一个空间看起来比其他空间大。让我们放大一下：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p4.png" alt></p><p>在该计时器需要运行时，就会发生改情况。此时，当前goroutine已被Go调度程序抢占和取代。调度程序将计时器转换为可运行的goroutine，如图所示。</p><p>但是，当前线程的Go调度程序并不是唯一运行计时器的调度程序。Go实施了一种计时器窃取策略，以确保在当前P繁忙时可以由另一个P运行计时器。由于异步抢占，它不太可能发生，但是在我们的示例中，由于使用了大量的计时器，它发生了。如下图所示：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p5.png" alt></p><p>如果我们不考虑计时器窃取，将发生以下情况：</p><p><img data-src="https://st.razeen.cn/img/timer-on-p6.png" alt></p><p>持有计时器的所有goroutine都会添加到本地队列中。然后，由于 <code>P</code>之间的窃取，将准确的调度计时器。</p><p>所以，由于异步抢占和工作窃取，延迟几乎不可能发生。</p><blockquote><p>原文 <a href="https://medium.com/a-journey-with-go/go-timers-life-cycle-403f3580093a" target="_blank" rel="noopener">Go: Timers’ Life Cycle</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://st.razeen.cn/img/go-timer.png&quot; alt=&quot;Illustration created for “A Journey With Go”, made from the original Go Gopher, created by Renee French.&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;全文基于GO 1.14&lt;/em&gt;&lt;/p&gt;&lt;p&gt;计时器在定时执行一些任务时很有用。Go内部依靠调度器来管理创建的计时器。而Go的调度程序是协作式的调度方式，这会让整个调度看起来比较复杂，因为goroutune必须自己停止（依赖channel阻塞或system call), 或者由调度器自己在某个调度点暂停。&lt;/p&gt;
    
    </summary>
    
      <category term="Go学习笔记" scheme="https://razeencheng.com/categories/go-learn/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
      <category term="timer" scheme="https://razeencheng.com/tags/timer/"/>
    
  </entry>
  
  <entry>
    <title>利用 git hook 规范你的代码与 commit message</title>
    <link href="https://razeencheng.com//post/golang-and-git-commit-message-pre-commit.html"/>
    <id>https://razeencheng.com//post/golang-and-git-commit-message-pre-commit.html</id>
    <published>2020-04-13T07:08:37.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>在团队协作时，由于个人编码习惯的差异，导致代码格式，风格都会有所不同，这就给代码审核带来一定的困难，更严重的是会导致整体的代码质量不可控。这时，我们有必要借助一些工具来约束我们的代码格式。在Go中，我们经常使用的工具有：</p><ul><li><code>goimports</code>: 自动导包；</li><li><code>gofmt</code> : 格式化我们的代码；</li><li><code>golint</code>: 检查代码命名，注释等；</li><li><code>go vet</code>: 静态错误检查。</li></ul><p>那么，我们可以利用这些工具来规范团队的代码风格。但如果每次手动执行这些命令，或者仅仅依靠IDE去检查，这是不靠谱的，因为人的行为本身是不靠谱的==。</p><p>于是，我们可以结合<code>git hook</code>, 强制执行这些检查，检查不通过，代码都无法提交，从而达到强一致性。</p><p>同时，结合上一篇<a href="https://razeencheng.com/post/conventional-commits-and-standard-version.html">&lt;&lt;规范git commit message与自动化版本控制&gt;&gt;</a>, 这里我们介绍一下利用pre-commit 约束commit-msg来约束我们的代码与git commit message。</p><a id="more"></a><p><em><a href="https://github.com/razeencheng/git-hooks" target="_blank" rel="noopener">源码在这里</a></em></p><h3 id="go-pre-commit-hook"><a href="#go-pre-commit-hook" class="headerlink" title="go pre-commit hook"></a>go pre-commit hook</h3><p>那么，我们怎么写一个pre-commit hook呢？</p><ul><li>首先，我们需要判断用户是否装上面这些工具；</li><li>然后，我们需要对git暂存区的代码(不包括vendor)，利用上面提到的四个工具进检查。</li></ul><p>直接上代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">has_errors=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取git暂存的所有go代码</span></span><br><span class="line"><span class="comment"># --cached 暂存的</span></span><br><span class="line"><span class="comment"># --name-only 只显示名字</span></span><br><span class="line"><span class="comment"># --diff-filter=ACM 过滤暂存文件，A=Added C=Copied M=Modified, 即筛选出添加/复制/修改的文件</span></span><br><span class="line">allgofiles=$(git diff --cached --name-only --diff-filter=ACM | grep <span class="string">'.go$'</span>)</span><br><span class="line"></span><br><span class="line">gofiles=()</span><br><span class="line">godirs=()</span><br><span class="line"><span class="keyword">for</span> allfile <span class="keyword">in</span> <span class="variable">$&#123;allgofiles[@]&#125;</span>; <span class="keyword">do</span> </span><br><span class="line">    <span class="comment"># 过滤vendor的</span></span><br><span class="line">    <span class="comment"># 过滤prootobuf自动生产的文件</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$allfile</span> == <span class="string">"vendor"</span>* || <span class="variable">$allfile</span> == *<span class="string">".pb.go"</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        gofiles+=(<span class="string">"<span class="variable">$allfile</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件夹去重</span></span><br><span class="line">        existdir=0</span><br><span class="line">        dir=`<span class="built_in">echo</span> <span class="string">"<span class="variable">$allfile</span>"</span> |xargs -n1 dirname|sort -u`</span><br><span class="line">        <span class="keyword">for</span> somedir <span class="keyword">in</span> <span class="variable">$&#123;godirs[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">if</span> [[ <span class="variable">$dir</span> == <span class="variable">$somedir</span> ]]; <span class="keyword">then</span> </span><br><span class="line">                existdir=1</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$existdir</span> -eq 0 ]]; <span class="keyword">then</span> </span><br><span class="line">            godirs+=(<span class="string">"<span class="variable">$dir</span>"</span>)</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">[ -z <span class="string">"<span class="variable">$gofiles</span>"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># gofmt 格式化代码</span></span><br><span class="line">unformatted=$(gofmt -l <span class="variable">$&#123;gofiles[@]&#125;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$unformatted</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">"gofmt FAIL:\n Run following command:"</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$&#123;unformatted[@]&#125;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">" gofmt -w <span class="variable">$PWD</span>/<span class="variable">$f</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n"</span></span><br><span class="line">has_errors=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># goimports 自动导包</span></span><br><span class="line"><span class="keyword">if</span> goimports &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span>  <span class="comment"># 检测是否安装</span></span><br><span class="line">unimports=$(goimports -l <span class="variable">$&#123;gofiles[@]&#125;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$unimports</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">"goimports FAIL:\nRun following command:"</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$&#123;unimports[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">" goimports -w <span class="variable">$PWD</span>/<span class="variable">$f</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n"</span></span><br><span class="line">has_errors=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Error: goimports not install. Run: "go get -u golang.org/x/tools/cmd/goimports"'</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># golint 代码规范检测</span></span><br><span class="line"><span class="keyword">if</span> golint &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span>  <span class="comment"># 检测是否安装</span></span><br><span class="line">lint_errors=<span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$&#123;gofiles[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">lint_result=<span class="string">"<span class="variable">$(golint $file)</span>"</span> <span class="comment"># run golint</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -n <span class="string">"<span class="variable">$lint_result</span>"</span> ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"golint '<span class="variable">$file</span>':\n<span class="variable">$lint_result</span>"</span></span><br><span class="line">lint_errors=<span class="literal">true</span></span><br><span class="line">has_errors=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$lint_errors</span> = <span class="literal">true</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Error: golint not install. Run: "go get -u github.com/golang/lint/golint"'</span> &gt;&amp;2</span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># go vet 静态错误检查</span></span><br><span class="line">show_vet_header=<span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> <span class="variable">$&#123;godirs[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    vet=$(go vet <span class="variable">$PWD</span>/<span class="variable">$dir</span> 2&gt;&amp;1)</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$vet</span>"</span> -a <span class="variable">$show_vet_header</span> = <span class="literal">true</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"govet FAIL:"</span></span><br><span class="line">show_vet_header=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$vet</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$vet</span>\n"</span></span><br><span class="line">has_errors=1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$has_errors</span></span><br></pre></td></tr></table></figure><h3 id="commit-msg-hook"><a href="#commit-msg-hook" class="headerlink" title="commit-msg hook"></a>commit-msg hook</h3><p>结合上一篇的规范化git commit message提交，我们这里做几点限制：</p><ul><li>至少15个字符（15个字符都没有，提交信息肯定不详细)；</li><li>必须以<code>feat|fix|chore|docs</code>关键词开头，可选<code>(scope)</code> , 之后必须紧跟冒号和空格<code>:</code> ,之后就是具体的描述。</li></ul><p>直接上脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略merge request</span></span><br><span class="line">MERGE_MSG=`cat <span class="variable">$1</span> | egrep <span class="string">'^Merge branch*'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MERGE_MSG</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">COMMIT_MSG=`cat <span class="variable">$1</span> | egrep <span class="string">"^(feat|fix|docs|chore)(\(\w+\))?:\s(\S|\w)+"</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$COMMIT_MSG</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Commit Message Irregular，Please check!\n"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#COMMIT_MSG&#125;</span> -lt 15 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Commit Message Too Short，Please show me more detail!\n"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="配置Hooks"><a href="#配置Hooks" class="headerlink" title="配置Hooks"></a>配置Hooks</h3><p><code>git hooks</code>已经写好了，我们开始配置。</p><p>首先进入你的项目，找到<code>.git/hooks</code>文件夹，可以看到很多<code>*.simple</code>结尾的文件，我们新增<code>commit-msg</code>和<code>pre-commit</code>文件，或者去掉<code>commit-msg.simple</code>和<code>pre-commit.simple</code>的<code>simple</code>后缀。</p><p>然后，我们分别用 <strong>go pre-commit hook</strong> 和 <strong>commit-msg hook</strong>两部分的脚本替换<code>pre-commit</code>和<code>commit-msg</code>的内容。</p><p>最后，我们给这两个文件执行权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x commit-msg pre-commit</span><br></pre></td></tr></table></figure><p>之后我们就可以正常使用了。</p><p><strong>一键安装</strong></p><p>用Mac电脑的童鞋，可以在需要支持的项目下面，一键安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -kSL https://raw.githubusercontent.com/razeencheng/git-hooks/master/install.sh | sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在团队协作时，由于个人编码习惯的差异，导致代码格式，风格都会有所不同，这就给代码审核带来一定的困难，更严重的是会导致整体的代码质量不可控。这时，我们有必要借助一些工具来约束我们的代码格式。在Go中，我们经常使用的工具有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;goimports&lt;/code&gt;: 自动导包；&lt;/li&gt;&lt;li&gt;&lt;code&gt;gofmt&lt;/code&gt; : 格式化我们的代码；&lt;/li&gt;&lt;li&gt;&lt;code&gt;golint&lt;/code&gt;: 检查代码命名，注释等；&lt;/li&gt;&lt;li&gt;&lt;code&gt;go vet&lt;/code&gt;: 静态错误检查。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，我们可以利用这些工具来规范团队的代码风格。但如果每次手动执行这些命令，或者仅仅依靠IDE去检查，这是不靠谱的，因为人的行为本身是不靠谱的==。&lt;/p&gt;&lt;p&gt;于是，我们可以结合&lt;code&gt;git hook&lt;/code&gt;, 强制执行这些检查，检查不通过，代码都无法提交，从而达到强一致性。&lt;/p&gt;&lt;p&gt;同时，结合上一篇&lt;a href=&quot;https://razeencheng.com/post/conventional-commits-and-standard-version.html&quot;&gt;&amp;lt;&amp;lt;规范git commit message与自动化版本控制&amp;gt;&amp;gt;&lt;/a&gt;, 这里我们介绍一下利用pre-commit 约束commit-msg来约束我们的代码与git commit message。&lt;/p&gt;
    
    </summary>
    
      <category term="开发实战总结" scheme="https://razeencheng.com/categories/dev-daily/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
      <category term="git hook" scheme="https://razeencheng.com/tags/git-hook/"/>
    
  </entry>
  
  <entry>
    <title>规范 git commit message 与自动化版本控制</title>
    <link href="https://razeencheng.com//post/conventional-commits-and-standard-version.html"/>
    <id>https://razeencheng.com//post/conventional-commits-and-standard-version.html</id>
    <published>2020-04-12T23:27:53.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>git commit message是你对你所编码内容的总结概括。规范、详细的git commit message不仅能体现你的内容概括能力，还能为你自己和团队，或项目带来巨大的好处，这也是我所推崇的。但很多小伙伴不愿意花时间在这里，经常会写出<code>优化了一些功能</code>、<code>修复了一些BUG</code>等等模糊不清的commit message，完全没有意识到这么写会带来一些严重的问题：</p><ul><li>管理者/其他项目参与者无法快速获取有用信息，判定修改内容，只有花大量时间阅读源码；</li><li>事后无法快速定位以前遇到的类似问题；</li><li>无法自动化版本控制，只有每次重新阅读代码，手动写一些详细的描述，用来发布新版或提交测试。</li></ul><p>规范、详细的git commit message不仅能解决这些问题，还能带来更多的好处。</p><a id="more"></a><ul><li><p>提供详细的历史信息，方便快速浏览，不用花大量时间阅读源码；</p></li><li><p>提供高效的团队合作，参与者能从提交信息中看到项目的进度；</p></li><li><p>可以快读定位问题，如果现在出现一个BUG，可以从BUG的类型，通过提交信息快读定位可能是哪次修改带来的；</p></li><li><p>可以直接从commit中总结周报，日报，项目报告；</p></li><li><p>可以直接从commit生成CHANGELOG;</p></li><li><p>影响团队其他成员，培养大家养成良好的习惯。</p></li></ul><p>下面我们推荐一个git commit message书写规范，以及如何通过commit message自动完成版本控制，生成CHANGELOG。</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>我们严格遵循<a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/" target="_blank" rel="noopener"><code>Conventional Commits</code></a> 的约定，详细内容可以点击链接查看，下面我们简单总结一下。</p><p>commit messge格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;[optional scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">[optional body]</span><br><span class="line"></span><br><span class="line">[optional footer]</span><br></pre></td></tr></table></figure><p>我们先举几个例子，再详细解析这个格式，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">feat(xxx): 新增了xxx功能，实现了xxx </span><br><span class="line">BREAKING CHANGE: 我们需要切换到V2了</span><br><span class="line">fix(comment): 修复多用户评论时，顺序错乱问题</span><br><span class="line">feat(comment): 新增用户评论功能</span><br><span class="line">chore(comment): 新增了评论部分的swagger文档</span><br><span class="line">docs(readme): 创建README.md文件</span><br></pre></td></tr></table></figure><p>是不是不用我解释就懂了，对的就这么简单：</p><ul><li><code>&lt;type&gt;</code> : 是指本次提交的类型，一般有<code>feat</code>,<code>fix</code>,<code>chore</code>,<code>docs</code>,<code>style</code>,<code>refactor</code>,<code>perf</code>,<code>test</code>等，这里我推荐使用<code>feat</code>,<code>fix</code>,<code>chore</code>,<code>docs</code>四个，也就先说明这几个，更多的看<a href="https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines" target="_blank" rel="noopener">这里</a>。<ul><li><code>feat</code>: 说明本次提交的是一个新的feature;</li><li><code>fix</code>: 修复了一个bug;</li><li><code>chore</code>: 一些没有构成feature, 但又不是其他类型的提交；</li><li><code>docs</code>: 只是修改了文档相关的内容。</li></ul></li><li><code>[optional scope]</code>: 从单词的意思我们不难看出, 这里可以选填一个范围，也就是说，我们可以通过该关键词说明本次提交影响的范围（或许是一个模块，某一个功能，某一个业务等）。</li><li><code>&lt;description&gt;</code> : 这里就是我们需要详细的描述本次提交内容的部分了。</li><li><code>[optional body]</code> ,<code>[optional footer]</code> 如果还有需要补充或者详细展开的部分，我们可以在这两个部分说明。</li></ul><h3 id="自动化版本控制"><a href="#自动化版本控制" class="headerlink" title="自动化版本控制"></a>自动化版本控制</h3><p>有了规划化的提交后，我们就可以利用<a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener"><code>standard-version</code></a>实现自动化版本控制与CHANGELOG自动生成了。</p><p>首先，我们全局安装一下<code>standard-version</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g standard-version</span><br></pre></td></tr></table></figure><p>安装完成，可以查看一下版本，推荐一个团队最好使同一个大版本，避免一些奇怪的问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard-version --version</span><br></pre></td></tr></table></figure><p>当然，你也可以直接安装指定版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g standard-version@7.1.0</span><br></pre></td></tr></table></figure><p>有了规范的提交与<code>standard-version</code> 后，我们就可以愉快的进行版本控制和自动生成CHANGELOG了，只需要每次提交之后，在你的项目下面运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standard-version</span><br></pre></td></tr></table></figure><p>即可。</p><p>我们很容易想到，<code>standard-version</code>可能会将git commit message, 自动整理生成CHANGELOG。 但版本升级怎么做到，规则是怎么样的呢？</p><p>这就取决于上面的git commit message中的<code>type</code>了。</p><ul><li>其中 <code>fix</code>对应于语义版本<code>patch</code>, 白话一点就是升级<code>0.0.1</code>个版本；</li><li><code>feat</code>对应于与<code>minor</code>，也就是升级<code>0.1.0</code>个版本；</li></ul><p>那么怎么实现从<code>1.0.0</code>到<code>2.0.0</code>呢，也就是改变<code>major</code>版本呢？</p><ul><li><p>其实只要在任何类型commit message后面的<code>[optional body]</code>或<code>[optional footer]</code>部分，以<strong>BREAKING CHANGE: </strong>开头，写一些版本升级的内容即可，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">feat(xxx): 新增了xxx功能，实现了xxx </span><br><span class="line">BREAKING CHANGE: xxxxxx</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这里我们补充点<a href="https://semver.org/#summary" target="_blank" rel="noopener">语义版本控制</a>的内容。</p><p>通常我们看到的版本是这样的：<code>1.1.1</code> 、<code>1.0.0-beta.11</code> 或者 <code>1.0.0-rc</code> ，其实这种写法就是遵循语义化版本规范的，详细内容可以点上面链接查看，我们主要说明一下核心语法，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;version core&gt; ::= &lt;major&gt; &quot;.&quot; &lt;minor&gt; &quot;.&quot; &lt;patch&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>也就是版本 <code>1.2.3</code>，主版本号为1，次要版本为2，补丁号为3.</p></blockquote><p>到这里你应该对规范化的git commit message有所了解，以及知道通过<code>standard-version</code>控制版本与自动生成CHANGELOG了。希望能对你有所帮助，养成良好的习惯，从而提高生产效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git commit message是你对你所编码内容的总结概括。规范、详细的git commit message不仅能体现你的内容概括能力，还能为你自己和团队，或项目带来巨大的好处，这也是我所推崇的。但很多小伙伴不愿意花时间在这里，经常会写出&lt;code&gt;优化了一些功能&lt;/code&gt;、&lt;code&gt;修复了一些BUG&lt;/code&gt;等等模糊不清的commit message，完全没有意识到这么写会带来一些严重的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;管理者/其他项目参与者无法快速获取有用信息，判定修改内容，只有花大量时间阅读源码；&lt;/li&gt;&lt;li&gt;事后无法快速定位以前遇到的类似问题；&lt;/li&gt;&lt;li&gt;无法自动化版本控制，只有每次重新阅读代码，手动写一些详细的描述，用来发布新版或提交测试。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;规范、详细的git commit message不仅能解决这些问题，还能带来更多的好处。&lt;/p&gt;
    
    </summary>
    
      <category term="开发实战总结" scheme="https://razeencheng.com/categories/dev-daily/"/>
    
    
      <category term="git" scheme="https://razeencheng.com/tags/git/"/>
    
      <category term="standard-version" scheme="https://razeencheng.com/tags/standard-version/"/>
    
  </entry>
  
  <entry>
    <title>超详细 vim 配置</title>
    <link href="https://razeencheng.com//post/my-macvim-vimrc.html"/>
    <id>https://razeencheng.com//post/my-macvim-vimrc.html</id>
    <published>2020-03-24T23:26:48.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>MacVim用了很久，非常喜欢vim编程带来的高效，清爽，hack的感觉，感谢<a href="https://github.com/deepzz0/dotfiles/blob/master/macvim/vimrc" target="_blank" rel="noopener">deepzz</a>多年前的传道。这两天花了点时间一行一行的去查vimrc内的配置，大概弄清了每一项配置的作用，并标上注释，整理常用快捷键。</p><a id="more"></a><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br></pre></td><td class="code"><pre><span class="line">"  repo: https://github.com/razeencheng/dotfiles/macvim</span><br><span class="line">"  email: me@razeen.me</span><br><span class="line"></span><br><span class="line">" 关闭vi的兼容模式(兼容模式下会让vim关闭所有的扩展，丢掉vim很多强大的功能去兼容vi)</span><br><span class="line">set nocompatible</span><br><span class="line"></span><br><span class="line">" filetype vim会对文件自动检测文件类型;</span><br><span class="line">" plugin 会在Vim的运行时环境目录下加载该类型相关的插件;</span><br><span class="line">"   比如为了让Vim更好的支持Python编程，需要下载一些Python相关的插件，此时就必须设置plugin为on;</span><br><span class="line">" indent 不同类型文件有不同的缩进方式;</span><br><span class="line">"   如Python就要求使用4个空格作为缩进,c使用两个tab作为缩进;</span><br><span class="line">"   那么indent就可以为不同文件类型选择合适的缩进方式了;</span><br><span class="line">"   在Vim的安装目录的indent目录下看到定义了很多缩进相关的脚本</span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" rtp 即 vim runtime path</span><br><span class="line">"   把vim bundle加入rtp</span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line"></span><br><span class="line">" 插件开始的位置</span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">" Vundle插件管理</span><br><span class="line">Plugin 'VundleVim/Vundle.vim'</span><br><span class="line"></span><br><span class="line">" 导航目录侧边栏</span><br><span class="line">Plugin 'scrooloose/nerdtree'</span><br><span class="line">" 使nerdtree tab标签的名称更友好</span><br><span class="line">Plugin 'jistr/vim-nerdtree-tabs'</span><br><span class="line">" nerdtree中看git版本信息</span><br><span class="line">Plugin 'Xuyuanp/nerdtree-git-plugin'</span><br><span class="line"></span><br><span class="line">" 代码自动补全(需要额外配置）</span><br><span class="line">Plugin 'Valloric/YouCompleteMe'</span><br><span class="line">" 下面两个配合 生成代码片段 </span><br><span class="line">Plugin 'SirVer/ultisnips'</span><br><span class="line">Plugin 'honza/vim-snippets'</span><br><span class="line">" Python自动补全</span><br><span class="line">Plugin 'davidhalter/jedi-vim'</span><br><span class="line">" 符号自动补全</span><br><span class="line">Plugin 'Raimondi/delimitMate'</span><br><span class="line"></span><br><span class="line">" 文件搜索, 快速跳转文件</span><br><span class="line">Plugin 'ctrlpvim/ctrlp.vim'</span><br><span class="line">" 全局搜索</span><br><span class="line">Plugin 'dyng/ctrlsf.vim'</span><br><span class="line">" 大纲式导航(右边出现的那个导航的）</span><br><span class="line">Plugin 'majutsushi/tagbar'</span><br><span class="line">" 内容搜索</span><br><span class="line">Plugin 'rking/ag.vim'</span><br><span class="line">" 快速移动（跳转）</span><br><span class="line">Plugin 'Lokaltog/vim-easymotion'</span><br><span class="line">" 成对标签跳转</span><br><span class="line">Plugin 'vim-scripts/matchit.zip'</span><br><span class="line"></span><br><span class="line">" 快速注释</span><br><span class="line">Plugin 'tomtom/tcomment_vim'</span><br><span class="line">" 成对符号编辑(快速给词加环绕符号,例如单引号/双引号/括号/成对标签等)</span><br><span class="line">Plugin 'tpope/vim-surround'</span><br><span class="line">" 多光标操作(类似sublimetext的多光标选中)</span><br><span class="line">Plugin 'terryma/vim-multiple-cursors'</span><br><span class="line"></span><br><span class="line">" 语法检查(支持大部分语言）</span><br><span class="line">Plugin 'vim-syntastic/syntastic'</span><br><span class="line">" 快速对齐</span><br><span class="line">Plugin 'junegunn/vim-easy-align'</span><br><span class="line">" Python开发插件</span><br><span class="line">Plugin 'klen/python-mode'</span><br><span class="line">" Lua开发插件</span><br><span class="line">Plugin 'xolox/vim-lua-ftplugin'</span><br><span class="line">" Lua缩进插件</span><br><span class="line">Plugin 'raymond-w-ko/vim-lua-indent'</span><br><span class="line">" Go开发插件</span><br><span class="line">Plugin 'fatih/vim-go'</span><br><span class="line">" Vue开发插件</span><br><span class="line">Plugin 'posva/vim-vue'  </span><br><span class="line">" 杂项自动加载</span><br><span class="line">Plugin 'xolox/vim-misc'</span><br><span class="line">" 集成各种git操作</span><br><span class="line">Plugin 'tpope/vim-fugitive'</span><br><span class="line">" gitk</span><br><span class="line">Plugin 'gregsexton/gitv'</span><br><span class="line">" git差比对</span><br><span class="line">Plugin 'airblade/vim-gitgutter'</span><br><span class="line">" 状态栏增强显示</span><br><span class="line">Plugin 'bling/vim-airline'</span><br><span class="line">" 配色插件（深色/浅色）</span><br><span class="line">Plugin 'noahfrederick/vim-hemisu'</span><br><span class="line">" 配色</span><br><span class="line">Plugin 'tomasr/molokai'</span><br><span class="line">" 颜色主题</span><br><span class="line">Plugin 'zaki/zazen'</span><br><span class="line">" 关闭全部的Buff, 除了当前的</span><br><span class="line">Plugin 'vim-scripts/BufOnly.vim'</span><br><span class="line"></span><br><span class="line">" 插件结束的位置</span><br><span class="line">call vundle#end()</span><br><span class="line"></span><br><span class="line">" 插件简要使用</span><br><span class="line">" :PluginList       - 插件列表</span><br><span class="line">" :PluginInstall    - 安装插件; 加!表示更新</span><br><span class="line">" :PluginSearch foo - 搜索插件 foo; 加!刷新本地缓存</span><br><span class="line">" :PluginClean      - 移除插件; 加!不需要确认</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 对所有缓冲区中的文件启用语法高亮度</span><br><span class="line">syntax on</span><br><span class="line">" 使用bash作为默认shell环境</span><br><span class="line">set shell=bash</span><br><span class="line">" 定义快捷键的前缀</span><br><span class="line">let mapleader = ','</span><br><span class="line"></span><br><span class="line">" 关闭欢迎页面</span><br><span class="line">set shortmess=atI</span><br><span class="line">"被分割窗口之間顯示空白</span><br><span class="line">set fillchars=vert:/</span><br><span class="line"></span><br><span class="line">" 保存历史命令行数</span><br><span class="line">set history=1000</span><br><span class="line">" 关闭swap</span><br><span class="line">set noswapfile</span><br><span class="line">" 关闭备份</span><br><span class="line">set nobackup</span><br><span class="line">" 关闭vim bb声</span><br><span class="line">set noerrorbells</span><br><span class="line">" 高亮当前行</span><br><span class="line">set cursorline</span><br><span class="line">" 高亮当前列</span><br><span class="line">" set cursorcolumn</span><br><span class="line">" 关闭鼠标</span><br><span class="line">" set mouse-=a</span><br><span class="line">" 控制vim剪贴板</span><br><span class="line">set clipboard+=unnamed</span><br><span class="line">" 允许在插入模式下对所有内容进行退格</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">" 行间距</span><br><span class="line">set linespace=0</span><br><span class="line">" 刷新率100ms ?</span><br><span class="line">set updatetime=100</span><br><span class="line">" 在新Tab中打开新的缓冲区</span><br><span class="line">set switchbuf=usetab,usetab</span><br><span class="line">" 搜索时 忽略这些文件/夹</span><br><span class="line">set wildignore+=*/.git/*,</span><br><span class="line">      \*/.hg/*,*/.svn/*,</span><br><span class="line">      \*/cscope*,*/*.csv/,</span><br><span class="line">      \*/*.log,*tags*,*/bin/*</span><br><span class="line"></span><br><span class="line">" 在最下面状态栏显示正在输入的命令</span><br><span class="line">set showcmd</span><br><span class="line">" 在左下角的状态栏显示 --INSERT-- 之类的状态</span><br><span class="line">set showmode</span><br><span class="line">" 显示行号</span><br><span class="line">set number</span><br><span class="line">" 行号显示宽度</span><br><span class="line">set numberwidth=4</span><br><span class="line">" 当输入一个左括号时自动匹配右括号</span><br><span class="line">set showmatch</span><br><span class="line">" 关闭Preview窗口</span><br><span class="line">set completeopt-=preview</span><br><span class="line"></span><br><span class="line">" 增强自带的 ? 和 ／ 搜索功能， 并且支持更加高级的正则表达式匹配</span><br><span class="line">set incsearch</span><br><span class="line">" 高亮搜索内容</span><br><span class="line">set hlsearch</span><br><span class="line">" 查找忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line">" 如果有一个大写字母，则切换到大小写敏感查找</span><br><span class="line">set smartcase</span><br><span class="line"></span><br><span class="line">" 自动缩进所使用的空白长度</span><br><span class="line">set shiftwidth=4</span><br><span class="line">" 按下tab键，插入的是空格和tab制表符的混合</span><br><span class="line">set softtabstop=4</span><br><span class="line">" 空格代替Tab</span><br><span class="line">set expandtab</span><br><span class="line">" 自动缩进，新增加的行和前一行使用相同的缩进形式</span><br><span class="line">set autoindent</span><br><span class="line">" 每一行都和前一行有相同的缩进量，同时能正确的识别出花括号，当遇&#125;，取消缩进形式</span><br><span class="line">set smartindent</span><br><span class="line"></span><br><span class="line">" 默认的字符编码</span><br><span class="line">set encoding=utf-8</span><br><span class="line">" 自动识别文件编码</span><br><span class="line">set fileencodings=utf-8,ucs-bom,gbk,gb2312,gb18030,default</span><br><span class="line">" 文本格式优先unix风格</span><br><span class="line">set fileformats=unix,dos,mac</span><br><span class="line">" 文本格式化选项</span><br><span class="line">" t：根据 textwidth 自动折行</span><br><span class="line">" c：在（程序源代码中的）注释中自动折行，插入合适的注释起始字符</span><br><span class="line">" r：插入模式下在注释中键入回车时，插入合适的注释起始字符</span><br><span class="line">" q：允许使用“gq”命令对注释进行格式化</span><br><span class="line">" o: 如果当前有注释，用O，o时自动插入注释</span><br><span class="line">" w: 尾部白色空格代表下一行继续，非白色表示一个段落的结尾</span><br><span class="line">set formatoptions+=tcroqw</span><br><span class="line"></span><br><span class="line">" 向右切分窗口</span><br><span class="line">set splitright</span><br><span class="line">" 向下切分窗口</span><br><span class="line">set splitbelow</span><br><span class="line"></span><br><span class="line">" 自动保存</span><br><span class="line">set autowrite</span><br><span class="line">" 自动读取文件(如果文本改变，自动更新）</span><br><span class="line">set autoread</span><br><span class="line">" 始终显示状态栏（倒数第二行）</span><br><span class="line">set laststatus=2</span><br><span class="line"></span><br><span class="line">" 主题设置</span><br><span class="line">" GUI的一些可选参数</span><br><span class="line">set guioptions=''</span><br><span class="line">" 背景颜色</span><br><span class="line">set background=dark</span><br><span class="line">" 配色 terminal Color 256色</span><br><span class="line">set t_Co=256</span><br><span class="line">" 字体</span><br><span class="line">set guifont=CamingoCode\ Regular:h15</span><br><span class="line">" 主题</span><br><span class="line">colorscheme molokai</span><br><span class="line">" colorscheme solarized</span><br><span class="line">" colorscheme desert</span><br><span class="line"></span><br><span class="line">" 切换buffer(文件/tab)的时候, 之前编辑的文件就只是切换到后台, 而不是关掉,还可以回切</span><br><span class="line">set hidden</span><br><span class="line">" 自动补全的模式（显示可能匹配的列表,并使用最长的子串进行补全)</span><br><span class="line">set wildmode=list:longest</span><br><span class="line">" 快速滚动</span><br><span class="line">set ttyfast</span><br><span class="line"></span><br><span class="line">" 文本折叠</span><br><span class="line">" 开启折叠</span><br><span class="line">set foldenable</span><br><span class="line">" 折叠方式（安装缩进折叠）</span><br><span class="line">set foldmethod=indent</span><br><span class="line">" 折叠级别</span><br><span class="line">set foldlevel=99</span><br><span class="line"></span><br><span class="line">" 设置折叠的快捷键</span><br><span class="line">" 我这里就是 ,zz</span><br><span class="line">" 第一次 ,zz 折叠，再一次就展开</span><br><span class="line">let g:FoldMethod = 0</span><br><span class="line">map &lt;leader&gt;zz :call ToggleFold()&lt;CR&gt;</span><br><span class="line">fun! ToggleFold()</span><br><span class="line">    if g:FoldMethod == 0</span><br><span class="line">        exe "normal! zM"</span><br><span class="line">        let g:FoldMethod = 1</span><br><span class="line">    else</span><br><span class="line">        exe "normal! zR"</span><br><span class="line">        let g:FoldMethod = 0</span><br><span class="line">    endif</span><br><span class="line">endfun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 在Visual/Select模式下的一些成对字符插入快捷键</span><br><span class="line">" 如你选择  hellworld 然后按下"号，就会成对加上" 变成 "helloworld"</span><br><span class="line">vmap " S"</span><br><span class="line">vmap ' S'</span><br><span class="line">vmap ` S`</span><br><span class="line">vmap [ S[</span><br><span class="line">vmap ( S(</span><br><span class="line">vmap &#123; S&#123;</span><br><span class="line">vmap &#125; S&#125;</span><br><span class="line">vmap ] S]</span><br><span class="line">vmap ) S)</span><br><span class="line">  </span><br><span class="line">" 多个窗口 用Ctr加 jkhl切换</span><br><span class="line">map &lt;C-j&gt; &lt;C-W&gt;j</span><br><span class="line">map &lt;C-k&gt; &lt;C-W&gt;k</span><br><span class="line">map &lt;C-h&gt; &lt;C-W&gt;h</span><br><span class="line">map &lt;C-l&gt; &lt;C-W&gt;l</span><br><span class="line">  </span><br><span class="line">" 普通模式下 shift + h/l 快速切换缓冲区</span><br><span class="line">nmap &lt;S-H&gt; :bp&lt;CR&gt;</span><br><span class="line">nmap &lt;S-L&gt; :bn&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" 快速切换多个标签页</span><br><span class="line">" ,1 到第一个标签页</span><br><span class="line">noremap &lt;leader&gt;1 1gt</span><br><span class="line">noremap &lt;leader&gt;2 2gt</span><br><span class="line">noremap &lt;leader&gt;3 3gt</span><br><span class="line">noremap &lt;leader&gt;4 4gt</span><br><span class="line">noremap &lt;leader&gt;5 5gt</span><br><span class="line">noremap &lt;leader&gt;6 6gt</span><br><span class="line">noremap &lt;leader&gt;7 7gt</span><br><span class="line">noremap &lt;leader&gt;8 8gt</span><br><span class="line">noremap &lt;leader&gt;9 9gt</span><br><span class="line">noremap &lt;leader&gt;0 :tablast&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" 开启相对行号</span><br><span class="line">set relativenumber</span><br><span class="line">augroup CursorLineOnlyInActiveWindow</span><br><span class="line">    autocmd!</span><br><span class="line">    autocmd InsertLeave * setlocal relativenumber</span><br><span class="line">    autocmd InsertEnter * setlocal norelativenumber</span><br><span class="line">    autocmd BufEnter * setlocal cursorline</span><br><span class="line">    autocmd BufLeave * setlocal nocursorline</span><br><span class="line">    " autocmd CompleteDone *.go  call OnGolangCompleteDone()</span><br><span class="line">augroup END</span><br><span class="line">function! NumberToggle()</span><br><span class="line">    if(&amp;relativenumber == 1)</span><br><span class="line">        set norelativenumber number</span><br><span class="line">    else</span><br><span class="line">        set relativenumber</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line">nnoremap &lt;C-n&gt; :call NumberToggle()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" 自动记住上次位置</span><br><span class="line">autocmd BufReadPost *</span><br><span class="line">    \ if line("'\"")&gt;0&amp;&amp;line("'\"")&lt;=line("$") |</span><br><span class="line">    \   exe "normal g'\"" |</span><br><span class="line">    \ endif</span><br><span class="line"></span><br><span class="line">" auto load vimrc</span><br><span class="line">" autocmd! BufWritePost .vimrc source %</span><br><span class="line"></span><br><span class="line">autocmd BufNewFile,BufRead *.define setf define</span><br><span class="line">" 针对不同的文件类型 设置不同格式</span><br><span class="line">" go中，不用空格代理Tab</span><br><span class="line">autocmd FileType go :set tabstop=4 noexpandtab " Do not use spaces instead of tabs</span><br><span class="line">" cpp c 缩进空格长度为4 用空格代替Tab</span><br><span class="line">autocmd FileType c,cpp :set shiftwidth=4 expandtab</span><br><span class="line">" lua 缩进空格长度为4 </span><br><span class="line">autocmd FileType lua :set shiftwidth=4 </span><br><span class="line">" sh 缩进空格长度为2 空格代理Tab</span><br><span class="line">autocmd FileType sh :set shiftwidth=2 expandtab</span><br><span class="line">" py 缩进空格长度为4 空格代理Tab 自动缩进</span><br><span class="line">autocmd FileType python :set tabstop=4 shiftwidth=4 expandtab ai</span><br><span class="line">" ruby,javascript,html,css,xml 缩进空格长度为2 空格代理Tab 自动缩进</span><br><span class="line">autocmd FileType ruby,javascript,html,css,xml :set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 热键设置</span><br><span class="line">" w!! 用sudo权限保存文件</span><br><span class="line">cmap w!! %!sudo tee &gt; /dev/null %</span><br><span class="line">" ,/ 移除搜索高亮</span><br><span class="line">noremap &lt;silent&gt;&lt;leader&gt;/ :nohls&lt;CR&gt;</span><br><span class="line">" ,sa 选择全部</span><br><span class="line">map &lt;leader&gt;sa ggvG$</span><br><span class="line">" ,w 保存当前文件</span><br><span class="line">nnoremap &lt;leader&gt;w :w&lt;CR&gt;</span><br><span class="line">" ; -&gt; :</span><br><span class="line">nnoremap ; :</span><br><span class="line">" 修复ctags ctrl+]无效问题</span><br><span class="line">nmap &lt;c-]&gt; g&lt;c-]&gt;</span><br><span class="line"></span><br><span class="line">" inoremap &lt;esc&gt; &lt;esc&gt;:set iminsert=0&lt;cr&gt;</span><br><span class="line">" nmap &lt;expr&gt; &lt;c-j&gt; &amp;diff ? ']c' : '&lt;c-j&gt;'</span><br><span class="line">" nmap &lt;expr&gt; &lt;c-k&gt; &amp;diff ? '[c' : '&lt;c-k&gt;'</span><br><span class="line"></span><br><span class="line">" 隐藏文本设置</span><br><span class="line">if has('conceal')</span><br><span class="line">    set conceallevel=2 concealcursor=niv</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">" ,bd 关闭但前缓冲区, 不关闭窗口</span><br><span class="line">map &lt;leader&gt;bd :Bclose&lt;cr&gt;:tabclose&lt;cr&gt;gT</span><br><span class="line">command! Bclose call &lt;SID&gt;BufcloseCloseIt()</span><br><span class="line">function! &lt;SID&gt;BufcloseCloseIt()</span><br><span class="line">   let l:currentBufNum = bufnr("%")</span><br><span class="line">   let l:alternateBufNum = bufnr("#")</span><br><span class="line">   if buflisted(l:alternateBufNum)</span><br><span class="line">     buffer #</span><br><span class="line">   else</span><br><span class="line">     bnext</span><br><span class="line">   endif</span><br><span class="line">   if bufnr("%") == l:currentBufNum</span><br><span class="line">     new</span><br><span class="line">   endif</span><br><span class="line">   if buflisted(l:currentBufNum)</span><br><span class="line">     execute("bdelete! ".l:currentBufNum)</span><br><span class="line">   endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">" GUI设置</span><br><span class="line">if has("gui_macvim")</span><br><span class="line">"透明</span><br><span class="line">set transparency=10 </span><br><span class="line">" " fullscreen</span><br><span class="line">" set fullscreen</span><br><span class="line"></span><br><span class="line">" Command + r/R 搜索</span><br><span class="line">let g:ctrlp_map = '&lt;D-p&gt;'</span><br><span class="line">nmap &lt;D-r&gt; :CtrlPBufTag&lt;CR&gt;</span><br><span class="line">imap &lt;D-r&gt; &lt;esc&gt;:CtrlPBufTag&lt;CR&gt;</span><br><span class="line">nmap &lt;D-R&gt; :CtrlPBufTagAll&lt;CR&gt;</span><br><span class="line">imap &lt;D-R&gt; &lt;esc&gt;:CtrlPBufTagAll&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" Command + / 加注释</span><br><span class="line">map &lt;D-/&gt; :TComment&lt;CR&gt;</span><br><span class="line">vmap &lt;D-/&gt; :TComment&lt;CR&gt;g</span><br><span class="line"></span><br><span class="line">" ,f 快速搜索</span><br><span class="line">nmap &lt;D-f&gt; :CtrlSF &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;</span><br><span class="line">imap &lt;D-f&gt; &lt;ESC&gt;:CtrlSF &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;</span><br><span class="line">vnoremap &lt;D-f&gt;  y :CtrlSF"&lt;C-R&gt;=escape(@", '\\/.*$^~[]()"')&lt;CR&gt;"</span><br><span class="line"></span><br><span class="line">" Commond e 显示/关闭 NERDTree</span><br><span class="line">map &lt;D-e&gt; :NERDTreeTabsToggle&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;e :NERDTreeFind&lt;CR&gt;&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" window上改几个按键</span><br><span class="line">" map &lt;D-j&gt; &lt;C-W&gt;j</span><br><span class="line">" map &lt;D-k&gt; &lt;C-W&gt;k</span><br><span class="line">" map &lt;D-l&gt; &lt;C-W&gt;l</span><br><span class="line">" map &lt;D-h&gt; &lt;C-W&gt;h</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">" python 设置</span><br><span class="line">" macvim with --with-python3</span><br><span class="line">let g:pymode_python = 'python3'</span><br><span class="line">" close syntax when save file</span><br><span class="line">let g:pymode_lint_on_write = 0</span><br><span class="line"></span><br><span class="line">" vim-go 设置</span><br><span class="line">let g:go_highlight_functions = 1</span><br><span class="line">let g:go_highlight_methods = 1</span><br><span class="line">let g:go_highlight_fields = 1</span><br><span class="line">let g:go_highlight_types = 1</span><br><span class="line">let g:go_highlight_operators = 1</span><br><span class="line">let g:go_highlight_build_constraints = 1</span><br><span class="line">let g:go_fmt_command = "goimports"</span><br><span class="line">let g:go_list_type = "quickfix"</span><br><span class="line">let g:go_def_mode = 'godef'</span><br><span class="line"></span><br><span class="line">" go 相关快捷键</span><br><span class="line">nmap &lt;Leader&gt;gc :GoErrCheck&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gb :GoBuild&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gd :GoDoc&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gt :GoTest&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gi :GoInstall&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gr :GoRename&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;gl :GoLint&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" function! OnGolangCompleteDone()</span><br><span class="line">"     if !exists('v:completed_item') || empty(v:completed_item)</span><br><span class="line">"         return</span><br><span class="line">"     endif</span><br><span class="line">"</span><br><span class="line">"     let complete_str = v:completed_item.word</span><br><span class="line">"     if complete_str == ''</span><br><span class="line">"         return</span><br><span class="line">"     endif</span><br><span class="line">"</span><br><span class="line">"     let line = getline('.')</span><br><span class="line">"     let next_char = line[col('.')-1]</span><br><span class="line">"     if  next_char == "("</span><br><span class="line">"         return</span><br><span class="line">"     end</span><br><span class="line">"     let cur_char =line[col('.')-2]</span><br><span class="line">"</span><br><span class="line">"     let abbr = v:completed_item.abbr</span><br><span class="line">"     let startIdx = match(abbr,"(")</span><br><span class="line">"     let endIdx = match(abbr,")")</span><br><span class="line">"     if endIdx - startIdx &gt; 1</span><br><span class="line">"         let argsStr = strpart(abbr, startIdx+1, endIdx - startIdx -1)</span><br><span class="line">"   let argsList = split(argsStr, ",")</span><br><span class="line">"   let snippet = ""</span><br><span class="line">"   if cur_char != "("</span><br><span class="line">"             let snippet = "("</span><br><span class="line">"   end</span><br><span class="line">"   let c = 1</span><br><span class="line">"   for i in argsList</span><br><span class="line">"       if c &gt; 1</span><br><span class="line">"           let snippet = snippet. ", "</span><br><span class="line">"             endif</span><br><span class="line">"             " strip space</span><br><span class="line">"             let arg = substitute(i, '^\s*\(.\&#123;-&#125;\)\s*$', '\1', '')</span><br><span class="line">"             let snippet = snippet . '$&#123;'.c.":".arg.'&#125;'</span><br><span class="line">"             let c += 1</span><br><span class="line">"         endfor</span><br><span class="line">"         let snippet = snippet . ")$0"</span><br><span class="line">"         call UltiSnips#Anon(snippet)</span><br><span class="line">"     endif</span><br><span class="line">" endfunction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" NERDTree 设置</span><br><span class="line">let g:NERDTreeDirArrows = 0</span><br><span class="line">let g:nerdtree_tabs_open_on_gui_startup = 0</span><br><span class="line">let NERDTreeIgnore=['node_modules']</span><br><span class="line">let NERDTreeShowHidden=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" nerdtree-git-plugin 一些git状态符号</span><br><span class="line">let g:NERDTreeIndicatorMapCustom = &#123;</span><br><span class="line">    \ "Modified"  : "✹",</span><br><span class="line">    \ "Staged"    : "✚",</span><br><span class="line">    \ "Untracked" : "✭",</span><br><span class="line">    \ "Renamed"   : "➜",</span><br><span class="line">    \ "Unmerged"  : "═",</span><br><span class="line">    \ "Deleted"   : "✖",</span><br><span class="line">    \ "Dirty"     : "✗",</span><br><span class="line">    \ "Clean"     : "✔︎",</span><br><span class="line">    \ "Unknown"   : "?"</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line">" 状态栏设置</span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">let g:airline_theme='dark'</span><br><span class="line">let g:airline_powerline_fonts=0</span><br><span class="line">let g:airline#extensions#tabline#exclude_preview = 1</span><br><span class="line">let g:airline#extensions#tabline#show_buffers = 1</span><br><span class="line">let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number</span><br><span class="line">let g:airline#extensions#bufferline#enabled = 1</span><br><span class="line"></span><br><span class="line">" cscope </span><br><span class="line">if has("cscope")</span><br><span class="line">    " set csprg=/usr/local/bin/cscope</span><br><span class="line">    set csto=0</span><br><span class="line">    set cscopequickfix=s-,c-,d-,i-,t-,e-</span><br><span class="line">    set cst</span><br><span class="line">    set nocsverb</span><br><span class="line">    " add any database in current directory</span><br><span class="line">    if filereadable("cscope.out")</span><br><span class="line">        cs add cscope.out</span><br><span class="line">        " else add database pointed to by environment</span><br><span class="line">    elseif $CSCOPE_DB != ""</span><br><span class="line">        cs add $CSCOPE_DB</span><br><span class="line">    endif</span><br><span class="line">    set csverb</span><br><span class="line">    nmap &lt;D-[&gt; :cs find c &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;&lt;C-O&gt;:copen&lt;CR&gt;</span><br><span class="line">    nmap &lt;D-\&gt; :cs find s &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;&lt;C-O&gt;:copen&lt;CR&gt;</span><br><span class="line">    nmap &lt;D-]&gt; :cs find g &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" Command y 开启大纲导航</span><br><span class="line">map &lt;D-y&gt; :TagbarToggle&lt;CR&gt;</span><br><span class="line">" 大纲导航设置</span><br><span class="line">let g:tagbar_autofocus=1</span><br><span class="line">let g:tagbar_sort=0</span><br><span class="line">let g:tagbar_type_go = &#123;</span><br><span class="line">    \ 'ctagstype' : 'go',</span><br><span class="line">    \ 'kinds'     : [</span><br><span class="line">        \ 'p:package',</span><br><span class="line">        \ 'i:imports:1',</span><br><span class="line">        \ 'c:constants',</span><br><span class="line">        \ 'v:variables',</span><br><span class="line">        \ 't:types',</span><br><span class="line">        \ 'n:interfaces',</span><br><span class="line">        \ 'w:fields',</span><br><span class="line">        \ 'e:embedded',</span><br><span class="line">        \ 'm:methods',</span><br><span class="line">        \ 'r:constructor',</span><br><span class="line">        \ 'f:functions'</span><br><span class="line">    \ ],</span><br><span class="line">    \ 'sro' : '.',</span><br><span class="line">    \ 'kind2scope' : &#123;</span><br><span class="line">        \ 't' : 'ctype',</span><br><span class="line">        \ 'n' : 'ntype'</span><br><span class="line">    \ &#125;,</span><br><span class="line">    \ 'scope2kind' : &#123;</span><br><span class="line">        \ 'ctype' : 't',</span><br><span class="line">        \ 'ntype' : 'n'</span><br><span class="line">    \ &#125;,</span><br><span class="line">    \ 'ctagsbin'  : 'gotags',</span><br><span class="line">    \ 'ctagsargs' : '-sort -silent'</span><br><span class="line">\ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 搜索设置</span><br><span class="line">" 忽略文件</span><br><span class="line">" MacOSX/Linux</span><br><span class="line">set wildignore+=*/tmp/*,*.so,*.swp,*.zip     </span><br><span class="line">" Windows</span><br><span class="line">set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  </span><br><span class="line">" search anything (in files, buffers and MRU files at the same time.)</span><br><span class="line">let g:ctrlp_cmd = 'CtrlPMixed'               </span><br><span class="line">let g:ctrlp_by_filename = 1</span><br><span class="line">" search for nearest ancestor like .git, .hg, and the directory of the current file</span><br><span class="line">let g:ctrlp_working_path_mode = 'ra'         </span><br><span class="line">" show the match window at the top of the screen</span><br><span class="line">let g:ctrlp_match_window_bottom = 1          </span><br><span class="line">" maxiumum height of match window</span><br><span class="line">let g:ctrlp_max_height = 10                  </span><br><span class="line">" jump to a file if it's open already</span><br><span class="line">let g:ctrlp_switch_buffer = 'Et'             </span><br><span class="line">" enable caching</span><br><span class="line">let g:ctrlp_use_caching = 1                  </span><br><span class="line">" speed up by not removing clearing cache evertime</span><br><span class="line">let g:ctrlp_clear_cache_on_exit=1            </span><br><span class="line">" number of recently opened files</span><br><span class="line">let g:ctrlp_mruf_max = 250                   </span><br><span class="line">let g:ctrlp_open_new_file = 't'</span><br><span class="line">let g:ctrlp_open_multiple_files = 't'</span><br><span class="line">let g:ctrlp_open_new_file = 'r'</span><br><span class="line">let g:ctrlp_custom_ignore = &#123;</span><br><span class="line">    \ 'dir':  '\v[\/](\.git|\.hg|\.svn|\.build|github.com|labix.org|bin|pkg)$',</span><br><span class="line">    \ 'file': '\v(\.exe|\.so|\.dll|\.a|\.xls|\.csv|\.json|\.log|\.out|gs|gw|gm|tags|gotags|\/U)$',</span><br><span class="line">    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',</span><br><span class="line">    \ &#125;</span><br><span class="line">let g:ctrlp_buftag_types = &#123;</span><br><span class="line">    \ 'go'         : '--language-force=go --golang-types=ftv',</span><br><span class="line">    \ 'as'         : '--language-force=actionscript --actionscript-types=fpvc',</span><br><span class="line">    \ 'actionscript': '--language-force=actionscript --actionscript-types=fpvc',</span><br><span class="line">    \ 'coffee'     : '--language-force=coffee --coffee-types=cmfvf',</span><br><span class="line">    \ 'markdown'   : '--language-force=markdown --markdown-types=hik',</span><br><span class="line">    \ 'objc'       : '--language-force=objc --objc-types=mpci',</span><br><span class="line">    \ 'rc'         : '--language-force=rust --rust-types=fTm'</span><br><span class="line">    \ &#125;</span><br><span class="line">let g:ctrlp_prompt_mappings = &#123;</span><br><span class="line">    \ 'PrtBS()':              ['&lt;bs&gt;', '&lt;c-]&gt;'],</span><br><span class="line">    \ 'PrtDelete()':          ['&lt;del&gt;'],</span><br><span class="line">    \ 'PrtDeleteWord()':      ['&lt;c-w&gt;'],</span><br><span class="line">    \ 'PrtClear()':           ['&lt;c-u&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("j")':   ['&lt;c-j&gt;', '&lt;down&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("k")':   ['&lt;c-k&gt;', '&lt;up&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("t")':   ['&lt;Home&gt;', '&lt;kHome&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("b")':   ['&lt;End&gt;', '&lt;kEnd&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("u")':   ['&lt;PageUp&gt;', '&lt;kPageUp&gt;'],</span><br><span class="line">    \ 'PrtSelectMove("d")':   ['&lt;PageDown&gt;', '&lt;kPageDown&gt;'],</span><br><span class="line">    \ 'PrtHistory(-1)':       ['&lt;c-n&gt;'],</span><br><span class="line">    \ 'PrtHistory(1)':        ['&lt;c-p&gt;'],</span><br><span class="line">    \ 'AcceptSelection("e")': ['&lt;cr&gt;', '&lt;2-LeftMouse&gt;'],</span><br><span class="line">    \ 'AcceptSelection("h")': ['&lt;c-x&gt;', '&lt;c-cr&gt;', '&lt;c-s&gt;'],</span><br><span class="line">    \ 'AcceptSelection("t")': ['&lt;c-t&gt;'],</span><br><span class="line">    \ 'AcceptSelection("v")': ['&lt;c-v&gt;', '&lt;RightMouse&gt;'],</span><br><span class="line">    \ 'ToggleFocus()':        ['&lt;s-tab&gt;'],</span><br><span class="line">    \ 'ToggleRegex()':        ['&lt;c-r&gt;'],</span><br><span class="line">    \ 'ToggleByFname()':      ['&lt;c-d&gt;'],</span><br><span class="line">    \ 'ToggleType(1)':        ['&lt;c-f&gt;', '&lt;c-up&gt;'],</span><br><span class="line">    \ 'ToggleType(-1)':       ['&lt;c-b&gt;', '&lt;c-down&gt;'],</span><br><span class="line">    \ 'PrtExpandDir()':       ['&lt;tab&gt;'],</span><br><span class="line">    \ 'PrtInsert("c")':       ['&lt;MiddleMouse&gt;', '&lt;insert&gt;'],</span><br><span class="line">    \ 'PrtInsert()':          ['&lt;c-\&gt;'],</span><br><span class="line">    \ 'PrtCurStart()':        ['&lt;c-a&gt;'],</span><br><span class="line">    \ 'PrtCurEnd()':          ['&lt;c-e&gt;'],</span><br><span class="line">    \ 'PrtCurLeft()':         ['&lt;c-h&gt;', '&lt;left&gt;', '&lt;c-^&gt;'],</span><br><span class="line">    \ 'PrtCurRight()':        ['&lt;c-l&gt;', '&lt;right&gt;'],</span><br><span class="line">    \ 'PrtClearCache()':      ['&lt;F5&gt;'],</span><br><span class="line">    \ 'PrtDeleteEnt()':       ['&lt;F7&gt;'],</span><br><span class="line">    \ 'CreateNewFile()':      ['&lt;c-y&gt;'],</span><br><span class="line">    \ 'MarkToOpen()':         ['&lt;c-z&gt;'],</span><br><span class="line">    \ 'OpenMulti()':          ['&lt;D-o&gt;'],</span><br><span class="line">    \ 'PrtExit()':            ['&lt;esc&gt;', '&lt;c-c&gt;', '&lt;c-g&gt;'],</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 语法检查</span><br><span class="line">set statusline+=%#warningmsg#</span><br><span class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span><br><span class="line">set statusline+=%*</span><br><span class="line">let g:syntastic_check_on_wq=1</span><br><span class="line">let g:syntastic_auto_jump=1</span><br><span class="line">let g:syntastic_auto_loc_list=1</span><br><span class="line">let g:syntastic_error_symbol = "▶▶"</span><br><span class="line">let g:syntastic_warning_symbol = "⚠"</span><br><span class="line">let g:syntastic_sh_checkers = ['shellcheck']</span><br><span class="line">" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']</span><br><span class="line">" let g:syntastic_go_checkers = ['errcheck']</span><br><span class="line">" passive</span><br><span class="line">let g:syntastic_mode_map = &#123; "mode": "active",</span><br><span class="line">    \ "active_filetypes": ["ruby", "go", "python"],</span><br><span class="line">    \ "passive_filetypes": ["shell"] &#125;</span><br><span class="line"></span><br><span class="line">" 全局查找</span><br><span class="line">command! CO CtrlSFOpen</span><br><span class="line">let g:ctrlsf_winsize = '30%'</span><br><span class="line">let g:ctrlsf_auto_close = 1</span><br><span class="line">let g:ctrlsf_ignore_dir = ['vendor', 'bower_components', 'node_modules']</span><br><span class="line"></span><br><span class="line">" YouCompleteMe 自动补全</span><br><span class="line">" preview window settiing</span><br><span class="line">let g:ycm_add_preview_to_completeopt = 1</span><br><span class="line">let g:ycm_autoclose_preview_window_after_completion = 0</span><br><span class="line">let g:ycm_autoclose_preview_window_after_insertion = 1</span><br><span class="line">" typing 2 chars</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion = 2</span><br><span class="line">" Completion when typing inside comments</span><br><span class="line">let g:ycm_complete_in_comments = 1  </span><br><span class="line">" Query the UltiSnips plugin</span><br><span class="line">let g:ycm_use_ultisnips_completer = 1 </span><br><span class="line">" Collect identifiers from strings and comments and tag fiels</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings = 1   </span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files = 1</span><br><span class="line">" some symbols</span><br><span class="line">let g:ycm_error_symbol = '&gt;&gt;'</span><br><span class="line">let g:ycm_warning_symbol = '&gt;*'</span><br><span class="line">" Specifies Python interpreter to run jedi</span><br><span class="line">let g:ycm_python_binary_path = 'python3'</span><br><span class="line">" Seed its identifier database</span><br><span class="line">" let g:ycm_seed_identifiers_with_syntax=1</span><br><span class="line">" youcompleteme select keys</span><br><span class="line">let g:ycm_key_list_select_completion = ['&lt;Down&gt;']</span><br><span class="line">let g:ycm_key_list_previous_completion = ['&lt;Up&gt;']</span><br><span class="line">" Where GoTo* commands result should be opened, same-buffer</span><br><span class="line">let g:ycm_goto_buffer_command = 'horizontal-split'</span><br><span class="line">" nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinition&lt;CR&gt;</span><br><span class="line">" ,jd</span><br><span class="line">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</span><br><span class="line">" ,gd</span><br><span class="line">nnoremap &lt;leader&gt;gd :YcmCompleter GoToDeclaration&lt;CR&gt;</span><br><span class="line">" ycm 配置</span><br><span class="line">let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"</span><br><span class="line">" blacklist</span><br><span class="line">let g:ycm_filetype_blacklist = &#123;</span><br><span class="line">    \ 'gitcommit' : 1,</span><br><span class="line">    \ 'tagbar' : 1,</span><br><span class="line">    \ 'qf' : 1,</span><br><span class="line">    \ 'notes' : 1,</span><br><span class="line">    \ 'markdown' : 1,</span><br><span class="line">    \ 'unite' : 1,</span><br><span class="line">    \ 'text' : 1,</span><br><span class="line">    \ 'vimwiki' : 1,</span><br><span class="line">    \ 'pandoc' : 1,</span><br><span class="line">    \ 'infolog' : 1,</span><br><span class="line">    \ 'mail' : 1</span><br><span class="line">    \&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" 代码片段</span><br><span class="line">let g:UltiSnipsExpandTrigger       = "&lt;TAB&gt;"</span><br><span class="line">let g:UltiSnipsJumpForwardTrigger  = "&lt;TAB&gt;"</span><br><span class="line">let g:UltiSnipsJumpBackwardTrigger = "&lt;S-TAB&gt;"</span><br><span class="line">let g:UltiSnipsSnippetDirectories  = ['UltiSnips']</span><br><span class="line">let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips'</span><br><span class="line">" ,us 修改当前文件类型的代码片段</span><br><span class="line">map &lt;leader&gt;us :UltiSnipsEdit&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">" ctrl+j/k</span><br><span class="line">func! g:JInYCM()</span><br><span class="line">    if pumvisible()</span><br><span class="line">        return "\&lt;C-n&gt;"</span><br><span class="line">    else</span><br><span class="line">        return "\&lt;c-j&gt;"</span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">func! g:KInYCM()</span><br><span class="line">    if pumvisible()</span><br><span class="line">        return "\&lt;C-p&gt;"</span><br><span class="line">    else</span><br><span class="line">        return "\&lt;c-k&gt;"</span><br><span class="line">    endif</span><br><span class="line">endfunction</span><br><span class="line">inoremap &lt;c-j&gt; &lt;c-r&gt;=g:JInYCM()&lt;cr&gt;</span><br><span class="line">au BufEnter,BufRead * exec "inoremap &lt;silent&gt; " . g:UltiSnipsJumpBackwordTrigger . " &lt;C-R&gt;=g:KInYCM()&lt;cr&gt;"</span><br><span class="line">let g:UltiSnipsJumpBackwordTrigger = "&lt;c-k&gt;"</span><br><span class="line"></span><br><span class="line">" 符号自动补全</span><br><span class="line">let g:delimitMate_expand_cr = 1</span><br><span class="line">let delimitMate_balance_matchpairs = 1</span><br><span class="line">let g:delimitMate_expand_space = 2</span><br><span class="line">imap &lt;expr&gt; &lt;TAB&gt; delimitMate#ShouldJump() ? "&lt;Plug&gt;delimitMateS-Tab" : "&lt;TAB&gt;"</span><br><span class="line">inoremap &lt;expr&gt; &lt;S-Tab&gt; delimitMate#JumpAny()</span><br><span class="line"></span><br><span class="line">" 快速跳转</span><br><span class="line">let g:EasyMotion_smartcase = 1</span><br><span class="line">"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion</span><br><span class="line">" ,,h 显示往前可快速移动的点</span><br><span class="line">map &lt;Leader&gt;&lt;leader&gt;h &lt;Plug&gt;(easymotion-linebackward)</span><br><span class="line">" ,,j 显示往下可快速移动的点</span><br><span class="line">map &lt;Leader&gt;&lt;Leader&gt;j &lt;Plug&gt;(easymotion-j)</span><br><span class="line">" ,,k 显示往上可快速移动的点</span><br><span class="line">map &lt;Leader&gt;&lt;Leader&gt;k &lt;Plug&gt;(easymotion-k)</span><br><span class="line">" ,,l 显示往后可快速移动的点</span><br><span class="line">map &lt;Leader&gt;&lt;leader&gt;l &lt;Plug&gt;(easymotion-lineforward)</span><br><span class="line">" ,,. 显示上一次可快速移动的点</span><br><span class="line">map &lt;Leader&gt;&lt;leader&gt;. &lt;Plug&gt;(easymotion-repeat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" git 快捷操作</span><br><span class="line">" :Gdiff  :Gstatus :Gvsplit</span><br><span class="line">nnoremap &lt;leader&gt;gtaa :Git add .&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtc  :Gcommit&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtp  :Gpush&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtl  :Gpull&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtb  :Gblame&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtst :Gstatus&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtd  :Gdiff&lt;CR&gt;</span><br><span class="line">nnoremap &lt;leader&gt;gtlg :Glog&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">" multiplecursors </span><br><span class="line">let g:multi_cursor_use_default_mapping=0</span><br><span class="line">" Default mapping</span><br><span class="line">let g:multi_cursor_next_key='&lt;C-m&gt;'</span><br><span class="line">let g:multi_cursor_prev_key='&lt;C-p&gt;'</span><br><span class="line">let g:multi_cursor_skip_key='&lt;C-x&gt;'</span><br><span class="line">let g:multi_cursor_quit_key='&lt;Esc&gt;'</span><br><span class="line"></span><br><span class="line">" 一些状态栏的颜色</span><br><span class="line">hi Pmenu      guifg=#F6F3E8 guibg=#444444</span><br><span class="line">" hi PmenuSel   guifg=#FFFFFF guibg=#0077DD</span><br><span class="line">hi PmenuSel   guifg=#FFFFFF guibg=#11AADD</span><br><span class="line">hi PMenuSbar  guibg=#5A647E</span><br><span class="line">hi PMenuThumb guibg=#AAAAAA</span><br><span class="line">" hi Visual     guibg=#1122FF</span><br><span class="line">" hi Visual     guibg=#0066FF</span><br><span class="line">hi Visual     guibg=#2566FA</span><br><span class="line">" hi VertSplit guibg=#272822</span><br><span class="line">hi VertSplit guibg=#1B1D1E</span><br><span class="line">hi Cursor    guibg=#FF0000</span><br><span class="line"></span><br><span class="line">" 关闭初当前Buffer外的所有Buffer</span><br><span class="line">nmap &lt;Leader&gt;bo :BufOnly&lt;CR&gt;</span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>vim一些基础操作可以看下图。</p><p><img data-src="https://st.razeen.cn/img/blog/vim-keyboard.jpg" alt></p><p>我这里主要整理一些组合操作（这里主要以上面的配置为准）</p><table><thead><tr><th>快捷键</th><th>操作</th><th>备注</th></tr></thead><tbody><tr><td>Cmd e</td><td>开启/关闭 侧边栏（目录树）</td><td></td></tr><tr><td>Cmd y</td><td>开启大纲</td><td></td></tr><tr><td>Cmd+/</td><td>代码注释</td><td></td></tr><tr><td>Ctrl j/k/h/l</td><td>多窗口切换</td><td></td></tr><tr><td>Shift h/l</td><td>切换缓冲区</td><td></td></tr><tr><td>Cmd f</td><td>快速搜索</td><td></td></tr><tr><td>:CO</td><td>打开上次搜索的结果</td><td></td></tr><tr><td>:w!!</td><td>用sudo权限保存文件</td><td></td></tr><tr><td>,1/2/3/4/5/6/7/8/9/0</td><td>切换tab</td><td></td></tr><tr><td>,zz</td><td>折叠行</td><td></td></tr><tr><td>,/</td><td>移除搜索高亮</td><td></td></tr><tr><td>,sa</td><td>选择全部</td><td></td></tr><tr><td>,w</td><td>保存当前文件</td><td></td></tr><tr><td>,bd</td><td>关闭当前缓冲区, 不关闭窗口</td><td></td></tr><tr><td>,gc</td><td>GoErrCheck</td><td></td></tr><tr><td>,gb</td><td>GoBuild</td><td></td></tr><tr><td>,gr</td><td>GoRename</td><td></td></tr><tr><td>,gl</td><td>GoLint</td><td></td></tr><tr><td>,us</td><td>修改当前文件类型的代码片段</td><td></td></tr><tr><td>,,h</td><td>显示往前可快速移动的点</td><td></td></tr><tr><td>,,j</td><td>显示往下可快速移动的点</td><td></td></tr><tr><td>,,k</td><td>显示往上可快速移动的点</td><td></td></tr><tr><td>,,l</td><td>显示往后可快速移动的点</td><td></td></tr><tr><td>,,.</td><td>显示上一次可快速移动的点</td><td></td></tr><tr><td>,gtaa</td><td>Git add</td><td></td></tr><tr><td>,gtc</td><td>git commit</td><td></td></tr><tr><td>,gtl</td><td>git pull</td><td></td></tr><tr><td>,bo</td><td>:BufOnly 关闭初当前Buffer外的所有Buffer</td></tr></tbody></table><h3 id="快速使用该配置"><a href="#快速使用该配置" class="headerlink" title="快速使用该配置"></a>快速使用该配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -kSL https://raw.githubusercontent.com/razeencheng/dotfiles/master/macvim/install.sh | sh</span><br></pre></td></tr></table></figure><p>然后打开MacVim执行 “:PluginInstall”。</p><h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p><strong>Q1</strong>. 插件安装后，关于<code>YouCompleteMe</code>报错。</p><p><strong>A1</strong>. <code>YouCompleteMe</code>插件需要单独配置, 你可以配置你需要的语言，如golang:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  ~/.vim/bundle/YouCompleteMe</span><br><span class="line">git clean -f</span><br><span class="line">git pull</span><br><span class="line">git submodule update --recursive --init</span><br><span class="line">./install.py --clang-completer --go-completer</span><br></pre></td></tr></table></figure><p><strong>Q2</strong>. Cmd f / Cmd e 与MacVim系统按键冲突。</p><p><strong>A2</strong>. 要么修改系统按键，要么修改配置。由于使用频率较高，我把系统的改了，如下。</p><p><img data-src="https://st.razeen.cn/img/blog/modify_sys_keyboard.jpg" alt></p><p>大概4步：</p><ol><li>找到是什么菜单占用了你的按键， 如 “Find…‘;</li><li>在“系统设置” &gt; “键盘” &gt; ‘快捷键’ 中添加你的MacVim；</li><li>修改占用菜单（如“Find…”） 为其他快捷键；</li><li>回来再看看，原来的快捷键已经改了，不再冲突了。</li></ol><p><strong>Q3</strong>: 搜索报错 <code>Option &#39;*g*:*ctrlsf_ackprg*&#39; is not defined or empty.</code></p><p><strong>A3</strong>: 要安装依赖 <code>brew install the_silver_searcher</code></p><h3 id="在-Ubuntu-上的使用"><a href="#在-Ubuntu-上的使用" class="headerlink" title="在 Ubuntu 上的使用"></a>在 Ubuntu 上的使用</h3><p>最近在折腾 Ubuntu, 尝试将这套配置用在 Ubuntu 上。</p><ul><li><p>首先需要安装 <code>Vundle</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>YouCompleteMe</code> 需要先安装 <code>python3-dev</code> 和 <code>cmake</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-dev cmake</span><br></pre></td></tr></table></figure></li></ul><p>之后就可可以愉快的使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MacVim用了很久，非常喜欢vim编程带来的高效，清爽，hack的感觉，感谢&lt;a href=&quot;https://github.com/deepzz0/dotfiles/blob/master/macvim/vimrc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;deepzz&lt;/a&gt;多年前的传道。这两天花了点时间一行一行的去查vimrc内的配置，大概弄清了每一项配置的作用，并标上注释，整理常用快捷键。&lt;/p&gt;
    
    </summary>
    
      <category term="开发实战总结" scheme="https://razeencheng.com/categories/dev-daily/"/>
    
      <category term="开发工具" scheme="https://razeencheng.com/categories/dev-daily/dev-tools/"/>
    
    
      <category term="vim" scheme="https://razeencheng.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Golang 中的 RESTful API 最佳实践</title>
    <link href="https://razeencheng.com//post/golang-and-restful-api.html"/>
    <id>https://razeencheng.com//post/golang-and-restful-api.html</id>
    <published>2020-03-15T01:58:42.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>RESRful API已经流行很多年了，我也一直在使用它。最佳实践也看过不少，但当一个项目完成，再次回顾/梳理项目时，会发现很多API和规范还是多少有些出入。在这篇文章中，我们结合Go Web再次梳理一下RESTful API的相关最佳实践。</p><a id="more"></a><p><em><a href="https://github.com/razeencheng/demo-go/blob/master/restful-api/main.go" target="_blank" rel="noopener">示例完整代码在这里</a></em></p><h3 id="关于RESTful-API"><a href="#关于RESTful-API" class="headerlink" title="关于RESTful API"></a>关于RESTful API</h3><p>关于什么是RESTful API，不再累述。推荐几个相关链接。</p><ul><li><a href="https://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">理解RESTful架构</a></li><li><a href="https://restfulapi.net/" target="_blank" rel="noopener">REST API Tutorial</a></li></ul><h3 id="1-使用JSON"><a href="#1-使用JSON" class="headerlink" title="1.使用JSON"></a>1.使用JSON</h3><p>不管是接收还是返回数据都推荐使用JSON。</p><p>通常返回数据的格式有JSON和XML，但XML过于冗长，可读性差，而且各种语言的解析上也不如JSON，使用JSON的好处，显而易见。</p><p>而接收数据，我们这里也推荐使用JSON，对于后端开发而言，入参直接与模型绑定，省去冗长的参数解析能简化不少代码，而且JSON能更简单的传递一些更复杂的结构等。</p><p>正如示例代码中的这一段，我们以<code>gin</code>框架为例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HandleLogin doc</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleLogin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">param := &amp;LoginParams&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := c.BindJSON(param); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, &amp;Resp&#123;Error: <span class="string">"parameters error"</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做一些校验</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">session := sessions.Default(c)</span><br><span class="line">session.Set(sessionsKey, param.UserID)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(http.StatusOK, &amp;Resp&#123;Data: <span class="string">"login succeed"</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>c.BindJSON</code>,轻松的将入参于模型<code>LoginParams</code>绑定；通过<code>c.JSON</code>轻松的将数据JSON序列化返回。</p><p>但所有接口都必须用JSON么？那也未必。比如文件上传，这时我们使用<code>FormData</code>比把文件base64之类的放到JSON里面更高效。</p><h3 id="2-路径中不包含动词"><a href="#2-路径中不包含动词" class="headerlink" title="2.路径中不包含动词"></a>2.路径中不包含动词</h3><p>我们的HTTP请求方法中已经有<code>GET</code>,<code>POST</code>等这些动作了，完全没有必要再路径中加上动词。</p><p>我们常用HTTP请求方法包括<code>GET</code>,<code>POST</code>,<code>PUT</code>和<code>DELETE</code>, 这也对应了我们经常需要做的数据库操作。<code>GET</code>查找/获取资源，<code>POST</code>新增资源，<code>PUT</code>修改资源，<code>DELETE</code>删除资源。</p><p>如下，这些路径中没有任何动词，简洁明了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取文章列表</span></span><br><span class="line">v1.GET(<span class="string">"/articles"</span>, HandleGetArticles)</span><br><span class="line"><span class="comment">// 发布文章</span></span><br><span class="line">v1.POST(<span class="string">"/articles"</span>, HandlePostArticles)</span><br><span class="line"><span class="comment">// 修改文章</span></span><br><span class="line">v1.PUT(<span class="string">"/articles"</span>, HandleUpdateArticles)</span><br><span class="line"><span class="comment">// 删除文章</span></span><br><span class="line">v1.DELETE(<span class="string">"/articles/:id"</span>, HandleDeleteArticles)</span><br></pre></td></tr></table></figure><h3 id="3-路径中对应资源用复数"><a href="#3-路径中对应资源用复数" class="headerlink" title="3.路径中对应资源用复数"></a>3.路径中对应资源用复数</h3><p>就像我们上面这段代码，<code>articles</code>对于的是我们的文章资源，背后就是一张数据库表<code>articles</code>, 所以操作这个资源的应该都用复数形式。</p><h3 id="4-次要资源可分层展示"><a href="#4-次要资源可分层展示" class="headerlink" title="4.次要资源可分层展示"></a>4.次要资源可分层展示</h3><p>一个博客系统中，最主要的应该是文章了，而评论应该是其子资源，我们可以评论嵌套在它的父资源后面，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取评论列表</span></span><br><span class="line">v1.GET(<span class="string">"/articles/:articles_id/comments"</span>, HandleGetComments)</span><br><span class="line"><span class="comment">// 添加评论</span></span><br><span class="line">v1.POST(<span class="string">"/articles/:articles_id/comments"</span>, HandleAddComments)</span><br><span class="line"><span class="comment">// 修改评论</span></span><br><span class="line">v1.PUT(<span class="string">"/articles/:articles_id/comments/:id"</span>, HandleUpdateComments)</span><br><span class="line"><span class="comment">// 删除评论</span></span><br><span class="line">v1.DELETE(<span class="string">"/articles/:articles_id/comments/:id"</span>, HandleDeleteComments)</span><br></pre></td></tr></table></figure><p>那么，我们需要获取所有文章的评论怎么办？可以这么写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1.GET(<span class="string">"/articles/-/comments"</span>, HandleGetComments)</span><br></pre></td></tr></table></figure><p>但这也不是决对的，资源虽然有层级关系，但这种层级关系不宜太深，个人感觉两层最多了，如果超过，可以直接拿出来放在一级。</p><h3 id="5-分页、排序、过滤"><a href="#5-分页、排序、过滤" class="headerlink" title="5.分页、排序、过滤"></a>5.分页、排序、过滤</h3><p>获取列表时，会使用到分页、排序过滤。一般：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?page=1&amp;page_size=10  <span class="comment"># 指定页面page与分页大小page_size</span></span><br><span class="line">?sort=-create_at,+author <span class="comment"># 按照创建时间create_at降序，作者author升序排序</span></span><br><span class="line">?title=helloworld <span class="comment"># 按字段title搜索</span></span><br></pre></td></tr></table></figure><h3 id="6-统一数据格式"><a href="#6-统一数据格式" class="headerlink" title="6.统一数据格式"></a>6.统一数据格式</h3><p>不管是路径的格式，还是参数的格式，还是返回值的格式建议统一形式。</p><p>一般常用的格式有<code>蛇形</code>,<code>大驼峰</code>和<code>小驼峰</code>，个人比较喜欢<code>蛇形</code>。Anyway, 不管哪种，只要统一即可。</p><p>除了参数的命名统一外，返回的数据格式，最好统一，方便前端对接。</p><p>如下，我们定义<code>Resp</code>为通用返回数据结构，<code>Data</code>中存放反会的数据，如果出错，将错误信息放在<code>Error</code>中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Resp doc</span></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">Data  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"data"`</span></span><br><span class="line">Error <span class="keyword">string</span>      <span class="string">`json:"error"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登陆成功返回</span></span><br><span class="line">  c.JSON(http.StatusOK, &amp;Resp&#123;Data: <span class="string">"login succeed"</span>&#125;)</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">c.JSON(http.StatusOK, &amp;Resp&#123;Data: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"result"</span>: tempStorage,</span><br><span class="line"><span class="string">"total"</span>:  <span class="built_in">len</span>(tempStorage),</span><br><span class="line">&#125;&#125;)</span><br><span class="line"><span class="comment">// 参数错误</span></span><br><span class="line">c.JSON(http.StatusBadRequest, &amp;Resp&#123;Error: <span class="string">"parameters error"</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-善用HTTP状态码"><a href="#7-善用HTTP状态码" class="headerlink" title="7.善用HTTP状态码"></a>7.善用HTTP状态码</h3><p>HTTP状态码有很多，我们没有必要也不可能全部用上，常用如下：</p><ul><li>200 StatusOK - 只有成功请求都返回200。</li><li>400 StatusBadRequest - 当出现参数不对，用户参数校验不通过时，给出该状态，并返回Error</li><li>401 StatusUnauthorized - 没有登陆/经过认证</li><li>403 Forbidden - 服务端拒绝授权(如密码错误)，不允许访问</li><li>404 Not Found - 路径不存在</li><li>500 Internal Server Error - 所请求的服务器遇到意外的情况并阻止其执行请求</li><li>502 Bad Gateway - 网关或代理从上游接收到了无效的响应</li><li>503 Service Unavailable - 服务器尚未处于可以接受请求的状态</li></ul><p>其中<code>502</code>,<code>503</code>，我们写程序时并不会明确去抛出。所以我们平常用6个状态码已经能很好的展示服务端状态了。</p><p>同时，我们将状态与返回值对应起来，<code>200</code>状态下，返回<code>Data</code>数据；其他状态返回<code>Error</code>。</p><h3 id="8-API版本化"><a href="#8-API版本化" class="headerlink" title="8.API版本化"></a>8.API版本化</h3><p>正如Demo中所示，我们将路由分组到了<code>/api/v1</code>路径下面，版本化API。如果后续的服务端升级，但可能仍有很大部分客户端请求未升级，依然请求老版本的API，那么我们只需要增加<code>/api/v2</code>，然后在该路径下为已升级的客户端提供服务。这样，我们就做到了API的版本控制，可以平滑的从一个版本切换到另外一个版本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v1 := r.Group(<span class="string">"/api/v1"</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">"/login"</span>, HandleLogin)</span><br><span class="line">v1.GET(<span class="string">"/articles"</span>, HandleGetArticles)</span><br><span class="line">v1.GET(<span class="string">"/articles/:id/comments"</span>, HandleGetComments)</span><br><span class="line">   <span class="comment">// ....</span></span><br></pre></td></tr></table></figure><h3 id="9-统一-‘-‘-开头"><a href="#9-统一-‘-‘-开头" class="headerlink" title="9. 统一 ‘/‘ 开头"></a>9. 统一 ‘/‘ 开头</h3><p>所以路由中，路径都以’/‘开头，虽然框架会为我们做这件事，但还是建议统一加上。</p><h3 id="10-增加-更新操作-返回资源"><a href="#10-增加-更新操作-返回资源" class="headerlink" title="10. 增加/更新操作 返回资源"></a>10. 增加/更新操作 返回资源</h3><p>对于<code>POST</code>,<code>PUT</code>操作，建议操作后，返回更新后的资源。</p><h3 id="11-使用HTTPS"><a href="#11-使用HTTPS" class="headerlink" title="11. 使用HTTPS"></a>11. 使用HTTPS</h3><p>对于暴露出去的接口/OpenAPI，一定使用HTTPS。一般时候，我们可以直接在服务前面架设一个WebServer，在WebServer内部署证书即可。当然，如果是直接由后端暴露出的接口，有必要直接在后端开启HTTPS！</p><h3 id="12-规范的API文档"><a href="#12-规范的API文档" class="headerlink" title="12. 规范的API文档"></a>12. 规范的API文档</h3><p>对于我们这种前后端分离的架构，API文档是很重要。在Go中，我们很容易的能用swag结合代码注释自动生成API文档，在<a href="https://razeencheng.com/post/go-swagger.html"> &lt;使用swaggo自动生成Restful API文档&gt;</a>中，我详细的介绍了怎么生成以及怎么写注释。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>API写的好不好，重要的还是看是否遵循WEB标准和保持一致性，最终目的也是让这些API更清晰，易懂，安全，希望这些建议对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RESRful API已经流行很多年了，我也一直在使用它。最佳实践也看过不少，但当一个项目完成，再次回顾/梳理项目时，会发现很多API和规范还是多少有些出入。在这篇文章中，我们结合Go Web再次梳理一下RESTful API的相关最佳实践。&lt;/p&gt;
    
    </summary>
    
      <category term="Go学习笔记" scheme="https://razeencheng.com/categories/go-learn/"/>
    
      <category term="Go实战" scheme="https://razeencheng.com/categories/go-learn/go-fighting/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
      <category term="restful api" scheme="https://razeencheng.com/tags/restful-api/"/>
    
  </entry>
  
  <entry>
    <title>折腾服务器(开篇) 我的第一台个人服务器</title>
    <link href="https://razeencheng.com//post/my-first-home-server.html"/>
    <id>https://razeencheng.com//post/my-first-home-server.html</id>
    <published>2019-12-19T12:31:52.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>在对比过VPS，NUC，二手企业服务器，自己组装等方案后，决定还是选择后者。考虑到自己的需求并不要求多高性能（玩玩Gitlab、CI/CD、harbor、k8s、放一些工具、物联网终端等等），以及耗能低、安静，最主要总体价格要低等特点，最后选配如下:</p><table><thead><tr><th>配件</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td>ASROCK/华擎科技J4105M集成主板+海盗船 2400 DDR4 8Gx2</td><td>¥1099</td><td><a href="https://ark.intel.com/content/www/cn/zh/ark/products/128989/intel-celeron-j4105-processor-4m-cache-up-to-2-50-ghz.html" target="_blank" rel="noopener">CPU是4核1.50 GHz的(最高2.5)，能耗10w</a></td></tr><tr><td>乔思伯 C2 台式机电脑机箱</td><td>¥139</td><td></td></tr><tr><td>航嘉 冷静王钻石版 额定300W</td><td>¥179</td><td>如果不选这机箱，其实可以选个更小的电源</td></tr><tr><td>旧的固态 120G + 西数蓝盘 1T</td><td>0</td><td>蓝盘不知道能撑多久==</td></tr></tbody></table><p>总体下来，1500大洋不到，比开一个vps便宜多了==。</p><p>话不多说，上图。</p><p><img data-src="http://st.razeen.cn/img/blog/IMG_4468.jpg" alt="IMG_4468.jpg"></p><p>​ 集成主板、内存条、硬盘</p><p><img data-src="http://st.razeen.cn/img/blog/IMG_4470.jpg" alt="IMG_4470.jpg"></p><p>​ 机箱、电源</p><p>最后，来一张电信悦me网关、Newifi3 和 装机后的全家福（装机过程略==）。</p><p><img data-src="http://st.razeen.cn/img/blog/IMG_4557.jpg" alt="IMG_4557.jpg"></p><p>接下来就开始我的折腾之旅～。</p>]]></content>
    
    <summary type="html">
    
      观望了许久，终于入手了我的第一台家用服务器，开始折腾起来。
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
      <category term="个人服务器" scheme="https://razeencheng.com/categories/my-home/my-server/"/>
    
    
      <category term="服务器" scheme="https://razeencheng.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Newifi3 实现低成本家庭级科学上网</title>
    <link href="https://razeencheng.com//post/start-use-newifi3.html"/>
    <id>https://razeencheng.com//post/start-use-newifi3.html</id>
    <published>2019-09-01T13:17:14.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>为了搭建一个家庭智能科学上网的环境，想找个支持Openwrt的路由刷一刷， 观望了一段时间，入手了款矿渣newifi3 d2，虽说有人吐槽信号不好，然而房间小的我并不担心==。</p><p><img data-src="https://st.razeen.cn/img/blog/newifi3.jpg" alt></p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>CPU：</strong> MT7621A<br><strong>闪存：</strong> 32MB<br><strong>内存：</strong> 512MB<br><strong>传输频段：</strong> 2.4G；5G<br><strong>网口：</strong> 全千兆 4xLAN + 1xWAN<br><strong>USB：</strong> 3.0x1<br><strong>价格：</strong> 某宝¥85</p><p>我买的是刷了Openwrt的，后来觉得Openwrt折腾起来还是需要点时间的，自己又刷了老毛子。</p><p>我们SSH上去看看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/cpuinfo</span><br><span class="line">system <span class="built_in">type</span>             : MediaTek MT7621 SoC</span><br><span class="line">processor               : 0</span><br><span class="line">cpu model               : MIPS 1004Kc V2.15</span><br><span class="line">BogoMIPS                : 583.68</span><br><span class="line"><span class="built_in">wait</span> instruction        : yes</span><br><span class="line">microsecond timers      : yes</span><br><span class="line">tlb_entries             : 32</span><br><span class="line">extra interrupt vector  : yes</span><br><span class="line">hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0ff8, 0x0000, 0x0003]</span><br><span class="line">ASEs implemented        : mips16 dsp mt</span><br><span class="line">shadow register sets    : 1</span><br><span class="line">kscratch registers      : 0</span><br><span class="line">core                    : 0</span><br><span class="line">VPE                     : 0</span><br><span class="line">VCED exceptions         : not available</span><br><span class="line">VCEI exceptions         : not available</span><br><span class="line"></span><br><span class="line">processor               : 1</span><br><span class="line">cpu model               : MIPS 1004Kc V2.15</span><br><span class="line">BogoMIPS                : 583.68</span><br><span class="line"><span class="built_in">wait</span> instruction        : yes</span><br><span class="line">microsecond timers      : yes</span><br><span class="line">tlb_entries             : 32</span><br><span class="line">extra interrupt vector  : yes</span><br><span class="line">hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0004, 0x0000, 0x0000]</span><br><span class="line">ASEs implemented        : mips16 dsp mt</span><br><span class="line">shadow register sets    : 1</span><br><span class="line">kscratch registers      : 0</span><br><span class="line">core                    : 0</span><br><span class="line">VPE                     : 1</span><br><span class="line">VCED exceptions         : not available</span><br><span class="line">VCEI exceptions         : not available</span><br><span class="line"></span><br><span class="line">processor               : 2</span><br><span class="line">cpu model               : MIPS 1004Kc V2.15</span><br><span class="line">BogoMIPS                : 583.68</span><br><span class="line"><span class="built_in">wait</span> instruction        : yes</span><br><span class="line">microsecond timers      : yes</span><br><span class="line">tlb_entries             : 32</span><br><span class="line">extra interrupt vector  : yes</span><br><span class="line">hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0000, 0x0000, 0x0000]</span><br><span class="line">ASEs implemented        : mips16 dsp mt</span><br><span class="line">shadow register sets    : 1</span><br><span class="line">kscratch registers      : 0</span><br><span class="line">core                    : 1</span><br><span class="line">VPE                     : 0</span><br><span class="line">VCED exceptions         : not available</span><br><span class="line">VCEI exceptions         : not available</span><br><span class="line"></span><br><span class="line">processor               : 3</span><br><span class="line">cpu model               : MIPS 1004Kc V2.15</span><br><span class="line">BogoMIPS                : 583.68</span><br><span class="line"><span class="built_in">wait</span> instruction        : yes</span><br><span class="line">microsecond timers      : yes</span><br><span class="line">tlb_entries             : 32</span><br><span class="line">extra interrupt vector  : yes</span><br><span class="line">hardware watchpoint     : yes, count: 4, address/irw mask: [0x0000, 0x0004, 0x0003, 0x0000]</span><br><span class="line">ASEs implemented        : mips16 dsp mt</span><br><span class="line">shadow register sets    : 1</span><br><span class="line">kscratch registers      : 0</span><br><span class="line">core                    : 1</span><br><span class="line">VPE                     : 1</span><br><span class="line">VCED exceptions         : not available</span><br><span class="line">VCEI exceptions         : not available</span><br></pre></td></tr></table></figure><p>CPU架构<code>mips</code>, 可以支持跑Go程序哦，一会试试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">rootfs                   13.0M     13.0M         0 100% /</span><br><span class="line">/dev/root                13.0M     13.0M         0 100% /</span><br><span class="line">tmpfs                     8.0K         0      8.0K   0% /dev</span><br><span class="line">tmpfs                    20.0M      1.7M     18.3M   8% /etc</span><br><span class="line">tmpfs                     1.0M         0      1.0M   0% /home</span><br><span class="line">tmpfs                     8.0K         0      8.0K   0% /media</span><br><span class="line">tmpfs                     8.0K         0      8.0K   0% /mnt</span><br><span class="line">tmpfs                    40.0M     17.9M     22.1M  45% /tmp</span><br><span class="line">tmpfs                     4.0M    348.0K      3.7M   8% /var</span><br><span class="line">tmpfs                    40.0M     17.9M     22.1M  45% /opt</span><br><span class="line">/dev/sda2               795.0M    438.8M    356.2M  55% /media/AiDisk_a2</span><br><span class="line">/dev/sda1               118.5G     56.1G     62.4G  47% /media/home</span><br></pre></td></tr></table></figure><p>这是磁盘情况（/dev/sda1-2 是我的外接硬盘）。</p><h3 id="刷不死Breed"><a href="#刷不死Breed" class="headerlink" title="刷不死Breed"></a>刷不死Breed</h3><p>由于我的路由器是已经刷了Openwrt了，我就不用再刷了，看了一下网友步骤，不外乎：</p><ol><li><p>初始化，设密码；</p></li><li><p>连LAN口，登陆后台 “<a href="http://192.168.99.1&quot;" target="_blank" rel="noopener">http://192.168.99.1&quot;</a> ，访问“<a href="http://192.168.99.1/newifi/ifiwen_hss.html”激活SSH" target="_blank" rel="noopener">http://192.168.99.1/newifi/ifiwen_hss.html”激活SSH</a>;</p></li><li><p>下载Breed文件<a href="https://st.razeen.cn/img/blog/newifi-d2-jail-break.ko" target="_blank" rel="noopener">newifi-d2-jail-break.ko</a>，<code>scp newifi-d2-jail-break.ko root@192.168.99.1:/tmp</code>;</p></li><li><p>ssh 登陆， <code>cd /tmp &amp;&amp; insmod newifi-d2-jail-break.ko</code>;</p></li><li><p>系统重启，成功刷入；</p></li><li><p>拔掉电源，按住reset后， 插入电源，等几秒，电源灯闪缩，浏览器输入192.168.1.1进入Breed,如下。</p></li></ol><p><img data-src="https://st.razeen.cn/img/blog/newifi3d2-breed.jpg" alt></p><p>在刷之前，我们备份一下。两个都选一下。</p><p><img data-src="https://st.razeen.cn/img/blog/newfi3d2-backup.jpg" alt></p><p>然后我们在固件更新这里就可以 刷机/恢复 我们的固件了。</p><p>我原来的Openwrt固件在这里-&gt; 【链接：<a href="https://share.weiyun.com/5hDGrBl" target="_blank" rel="noopener">https://share.weiyun.com/5hDGrBl</a> 密码：9u73g3】</p><p><img data-src="https://st.razeen.cn/img/blog/newifi3d2-con.jpg" alt></p><p>这里有newifi3 d2支持的固件帖子<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=658359&amp;page=1&amp;extra=#pid3990638" target="_blank" rel="noopener"><strong>新路由三 NEWifi D2 固件集合贴</strong></a>。</p><p>​</p><h3 id="刷老毛子"><a href="#刷老毛子" class="headerlink" title="刷老毛子"></a>刷老毛子</h3><p>下载h大的Padavan固件 原下载地址“<a href="http://opt.cn2qq.com/padavan/”" target="_blank" rel="noopener">http://opt.cn2qq.com/padavan/”</a> ，下载<code>RT-N56UB1-newif3D2-512M_3.4.3.9-099.trx</code>。 我在微云备份了一个【链接：<a href="https://share.weiyun.com/5YyHFA2" target="_blank" rel="noopener">https://share.weiyun.com/5YyHFA2</a> 密码：iiuf29】</p><p>进入上面图片中的固件更新，固件选择刚刚下载的估计，上传，进度完成再等几分钟，重启即可。</p><p><img data-src="https://st.razeen.cn/img/blog/Jietu20190830-214029.jpg" alt></p><p>启动后默认开启了无线网 <code>PDCN_5G</code>和<code>PDCN</code>, 密码为<code>1234567890</code>。</p><p>默认网关地址<code>192.168.123.1</code>, 用户名密码都是<code>admin</code>。</p><p>登陆后，大概是这样子。</p><p><img data-src="https://st.razeen.cn/img/blog/image-20190909000804648.png" alt></p><h3 id="配置ShadowSocks"><a href="#配置ShadowSocks" class="headerlink" title="配置ShadowSocks"></a>配置ShadowSocks</h3><p>要配置ShadowSocks，你先要有ShadowSocks服务，可以自己搭建或购买。</p><p>我个人是购买的SS服务，毕竟用自己的服务器有被封的概率。我在<a href="https://order.shadowsocks.website/aff.php?aff=26059" target="_blank" rel="noopener">这里</a>买的，约97RMB一年，基本能满足日常工作生活的需求。</p><p>点击ShadowSocks, 就可以配置了，如图是我的配置。</p><p><img data-src="https://st.razeen.cn/img/blog/Jietu20190909-001602.jpg" alt></p><p>为了达到全局自动代理的效果，我开启了重定向DNS，也就是我所有的DNS都会走<code>dnsmasq</code>, dnsmsq配合chinaDNS自动将国外的站点走翻墙。</p><p>GFW -&gt; <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p><p><img data-src="https://st.razeen.cn/img/blog/Jietu20190909-001657.jpg" alt></p><p>配置好后，点击应用本页配置，稍等片刻(可以点击右上角log,查看配置进度)，就可以轻松科学上网啦。</p><h3 id="在路由器上跑golang"><a href="#在路由器上跑golang" class="headerlink" title="在路由器上跑golang"></a>在路由器上跑golang</h3><p>这个漏油器有512MB的内存，不跑点什么感觉浪费了。查了一下，go居然可以在上面跑起来。</p><p>通过<code>uname -m</code>我们可以看出来，cpu架构为<code>mpis</code>。 我们查到<a href="https://golang.org/doc/install/source" target="_blank" rel="noopener"><code>golang</code>支持</a>的如下:</p><ul><li>amd64 (also known as x86-64)<ul><li>A mature implementation.</li></ul></li><li>386 (x86 or x86-32)<ul><li>Comparable to the amd64 port.</li></ul></li><li>arm (ARM)<ul><li>Supports Linux, FreeBSD, NetBSD, OpenBSD and Darwin binaries. Less widely used than the other ports.</li></ul></li><li>arm64 (AArch64)<ul><li>Supports Linux and Darwin binaries. New in 1.5 and not as well exercised as other ports.</li></ul></li><li>ppc64, ppc64le (64-bit PowerPC big- and little-endian)<ul><li>Supports Linux binaries. New in 1.5 and not as well exercised as other ports.</li></ul></li><li>mips, mipsle (32-bit MIPS big- and little-endian)<ul><li>Supports Linux binaries. New in 1.8 and not as well exercised as other ports.</li></ul></li><li>mips64, mips64le (64-bit MIPS big- and little-endian)<ul><li>Supports Linux binaries. New in 1.6 and not as well exercised as other ports.</li></ul></li><li>s390x (IBM System z)<ul><li>Supports Linux binaries. New in 1.7 and not as well exercised as other ports.</li></ul></li></ul><p>我们写个<code>hello world</code>试一下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># file openwrt.<span class="keyword">go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello world"</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"start listen"</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":12345"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=mipsle go build openwrt.go</span><br></pre></td></tr></table></figure><p>上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp openwrt razeen@192.168.123.1:/tmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入路由登陆密码，上传成功</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意目录。 其他目录可能没有空间</span></span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$./openwrt </span><br><span class="line">start listen</span><br></pre></td></tr></table></figure><p>访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v http://192.168.123.1:12345/hello </span><br><span class="line">*   Trying 192.168.123.1...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to 192.168.123.1 (192.168.123.1) port 12345 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /hello HTTP/1.1</span><br><span class="line">&gt; Host: 192.168.123.1:12345</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Tue, 01 Oct 2019 16:23:43 GMT</span><br><span class="line">&lt; Content-Length: 11</span><br><span class="line">&lt; Content-Type: text/plain; charset=utf-8</span><br><span class="line">&lt; </span><br><span class="line">* Connection <span class="comment">#0 to host 192.168.123.1 left intact</span></span><br><span class="line">hello world%</span><br></pre></td></tr></table></figure><p>完美～</p>]]></content>
    
    <summary type="html">
    
      利用Newifi3路由器，刷Padavan老毛子, 安装shadowsocks实现全家智能科学上网，在家再也不用手动切换网络,轻松Google,Youtube。
    
    </summary>
    
      <category term="家庭网络折腾" scheme="https://razeencheng.com/categories/my-home/"/>
    
    
      <category term="newifi3" scheme="https://razeencheng.com/tags/newifi3/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记(八) | 使用 os/exec 执行命令</title>
    <link href="https://razeencheng.com//post/simple-use-go-exec-command.html"/>
    <id>https://razeencheng.com//post/simple-use-go-exec-command.html</id>
    <published>2019-05-30T21:06:43.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>用Go去调用一些外部的命令其实很愉快的，这遍文章就总结一下我自己日常用的比较多的几种方法。</p><h3 id="关于Unix标准输入输出"><a href="#关于Unix标准输入输出" class="headerlink" title="关于Unix标准输入输出"></a>关于Unix标准输入输出</h3><p>在具体聊<code>os/exec</code>的使用前，了解一下shell的标准输出是很有必要的。</p><p>我们平常会用到或看到这样的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls xxx 1&gt;out.txt 2&gt;&amp;1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nohup xxx 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><p>你知道这里<code>1,2</code>含义么？</p><p>其实这里的<code>1,2</code>指的就是Unix文件描述符。文件描述符其实就一数字，每一个文件描述符代表的都是一个文件。如果你打开100个文件，你就会获取到100个文件描述符。</p><p>这里需要注意的一点就是，在Unix中<a href="https://en.wikipedia.org/wiki/Everything_is_a_file" target="_blank" rel="noopener"><strong>一切皆文件</strong></a>。当然，这里我们不必去深究，我们需要知道的是<code>1，2</code>代表的是标准输出<code>stdout</code>与标准错误输出<code>stderr</code>。还有<code>0</code>代表标准输入<code>stdin</code>。</p><p>在<code>os/exec</code>中就用到了<code>Stdin</code>,<code>Stdout</code>,<code>Stderr</code>，这些基本Unix知识或能帮助我们更好理解这些参数。</p><h3 id="os-exec"><a href="#os-exec" class="headerlink" title="os/exec"></a>os/exec</h3><p><code>os/exec</code>包内容并不多，我们大概过一下。</p><ol><li><p><a href="https://godoc.org/os/exec#LookPath" target="_blank" rel="noopener">LookPath(file string) (string, error)</a></p><p>寻找可执行文件路径，如果你指定的可执行文件在<code>$PATH</code>中，就会返回这个可执行文件的相对/绝对路径；如果你指定的是一个文件路径，他就是去判断文件是否可读取/执行，返回的是一样的路径。</p><p>在我们需要使用一些外部命令/可执行文件的时候，我们可以先使用该函数判断一下该命令/可执行文件是否有效。</p></li><li><p><a href="https://godoc.org/os/exec#Command" target="_blank" rel="noopener">Command(name string, arg …string) *Cmd</a></p><p>使用你输入的参数，返回Cmd指针，可用于执行Cmd的方法。</p><p>这里<code>name</code>就是我们的命令/可执行文件，后面的参数可以一个一个输入。</p></li><li><p><a href="https://godoc.org/os/exec#CommandContext" target="_blank" rel="noopener">CommandContext(ctx context.Context, name string, arg …string) *Cmd</a></p><p>和上面功能一样，不过我们可以用上下文做一些超时等控制。</p></li><li><p>之后几个就是Cmd的一些方法。</p><ul><li><p><a href="https://godoc.org/os/exec#Cmd.CombinedOutput" target="_blank" rel="noopener">(c *Cmd) CombinedOutput() ([]byte, error)</a> 将标准输出，错误输出一起返回；</p></li><li><p><a href="https://godoc.org/os/exec#Cmd.Output" target="_blank" rel="noopener">(c *Cmd) Output() ([]byte, error)</a> 输出标准输出，错误从error返回；</p></li><li><p><a href="https://godoc.org/os/exec#Cmd.Run" target="_blank" rel="noopener">(c *Cmd) Run() error</a> 执行任务，等待执行完成；</p></li><li><p><a href="https://godoc.org/os/exec#Cmd.Start" target="_blank" rel="noopener">(c *Cmd) Start() error</a>， <a href="https://godoc.org/os/exec#Cmd.Wait" target="_blank" rel="noopener">(c *Cmd) Wait() error</a> 前者执行任务，不等待完成，用后者等待，并释放资源；</p></li><li><p><a href="https://godoc.org/os/exec#Cmd.StderrPipe" target="_blank" rel="noopener">(c *Cmd) StderrPipe() (io.ReadCloser, error)</a></p><p><a href="https://godoc.org/os/exec#Cmd.StdinPipe" target="_blank" rel="noopener">(c *Cmd) StdinPipe() (io.WriteCloser, error)</a></p><p><a href="https://godoc.org/os/exec#Cmd.StdoutPipe" target="_blank" rel="noopener">(c *Cmd) StdoutPipe() (io.ReadCloser, error)</a></p><p>这三个功能类似，就是提供一个标准输入/输出/错误输出的管道，我们可用这些管道中去输入输出。</p></li></ul></li></ol><p>其实读完，结合官方的一些example，使用很简单，下面具体写几个场景。</p><p><em>注</em></p><ol><li><p>本文全部的Demo在<a href="https://github.com/razeencheng/demo-go/tree/master/os-exec" target="_blank" rel="noopener">这里</a>。</p></li><li><p><code>./testcmd/testcmd</code>是我用Go写的一个简单的可执行文件，可以根据指定的参数 输出/延时输出/输出错误，方便我们演示。如下</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">start <span class="keyword">bool</span></span><br><span class="line">e     <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">flag.BoolVar(&amp;start, <span class="string">"s"</span>, <span class="literal">false</span>, <span class="string">"start output"</span>)</span><br><span class="line">flag.BoolVar(&amp;e, <span class="string">"e"</span>, <span class="literal">false</span>, <span class="string">"output err"</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">5</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">fmt.Fprintln(os.Stdout, <span class="string">"test cmd output"</span>, i)</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> e &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"a err occur"</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Fprintln(os.Stdout, <span class="string">"test cmd stdout"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单执行"><a href="#简单执行" class="headerlink" title="简单执行"></a>简单执行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"./testcmd/testcmd"</span>, <span class="string">"-s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用CombinedOutput 将stdout stderr合并输出</span></span><br><span class="line">out, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"test1 failed %s\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"test1 output "</span>, <span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Run Test 1</span><br><span class="line">2019/06/06 18:02:39 test1 output  test cmd output 5</span><br><span class="line">test cmd output 4</span><br><span class="line">test cmd output 3</span><br><span class="line">test cmd output 2</span><br><span class="line">test cmd output 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>整个过程等待5秒，所有结果一次输出。</p><h3 id="分离标准输出与错误输出"><a href="#分离标准输出与错误输出" class="headerlink" title="分离标准输出与错误输出"></a>分离标准输出与错误输出</h3><p>将错误分开输出，同时开了两个协成，同步的接收命令的输出内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdout &amp; stderr 分开输出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"./testcmd/testcmd"</span>, <span class="string">"-s"</span>, <span class="string">"-e"</span>)</span><br><span class="line">stdout, _ := cmd.StdoutPipe()</span><br><span class="line">stderr, _ := cmd.StderrPipe()</span><br><span class="line">cmd.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := stderr.Read(buf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %s"</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := stdout.Read(buf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read out %s"</span>, <span class="keyword">string</span>(buf[:n]))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read out %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">err := cmd.Wait()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"cmd wait %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Run Test 2</span><br><span class="line">2019/06/06 18:02:39 read out test cmd output 5</span><br><span class="line">2019/06/06 18:02:40 read out test cmd output 4</span><br><span class="line">2019/06/06 18:02:41 read out test cmd output 3</span><br><span class="line">2019/06/06 18:02:42 read out test cmd output 2</span><br><span class="line">2019/06/06 18:02:43 read out test cmd output 1</span><br><span class="line">2019/06/06 18:02:44 read err a err occur</span><br><span class="line">2019/06/06 18:02:44 cmd wait exit status 1</span><br></pre></td></tr></table></figure><h3 id="按行读取输出内容"><a href="#按行读取输出内容" class="headerlink" title="按行读取输出内容"></a>按行读取输出内容</h3><p>使用<code>bufio</code>按行读取输出内容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按行读输出的内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test3</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"./testcmd/testcmd"</span>, <span class="string">"-s"</span>, <span class="string">"-e"</span>)</span><br><span class="line">stdout, _ := cmd.StdoutPipe()</span><br><span class="line">stderr, _ := cmd.StderrPipe()</span><br><span class="line">oReader := bufio.NewReader(stdout)</span><br><span class="line">eReader := bufio.NewReader(stderr)</span><br><span class="line"></span><br><span class="line">cmd.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := oReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line != <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read line %s"</span>, line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || line == <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read line err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := eReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line != <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %s"</span>, line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || line == <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">err := cmd.Wait()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"cmd wait %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Run Test 3</span><br><span class="line">2019/06/06 18:06:44 read line test cmd output 5</span><br><span class="line">2019/06/06 18:06:45 read line test cmd output 4</span><br><span class="line">2019/06/06 18:06:46 read line test cmd output 3</span><br><span class="line">2019/06/06 18:06:47 read line test cmd output 2</span><br><span class="line">2019/06/06 18:06:48 read line test cmd output 1</span><br><span class="line">2019/06/06 18:06:49 read err a err occur</span><br><span class="line">2019/06/06 18:06:49 cmd wait exit status 1</span><br></pre></td></tr></table></figure><h3 id="设置执行超时时间"><a href="#设置执行超时时间" class="headerlink" title="设置执行超时时间"></a>设置执行超时时间</h3><p>有时候我们要控制命令的执行时间，这是就可以使用上下文去控制了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过上下文控制超时</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test4</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ctx, calcel := context.WithTimeout(context.Background(), <span class="number">2</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> calcel()</span><br><span class="line"></span><br><span class="line">cmd := exec.CommandContext(ctx, <span class="string">"./testcmd/testcmd"</span>, <span class="string">"-s"</span>, <span class="string">"-e"</span>)</span><br><span class="line"></span><br><span class="line">stdout, _ := cmd.StdoutPipe()</span><br><span class="line">stderr, _ := cmd.StderrPipe()</span><br><span class="line">oReader := bufio.NewReader(stdout)</span><br><span class="line">eReader := bufio.NewReader(stderr)</span><br><span class="line"></span><br><span class="line">cmd.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := oReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line != <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read line %s"</span>, line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || line == <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read line err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, err := eReader.ReadString(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> line != <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %s"</span>, line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || line == <span class="string">""</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">err := cmd.Wait()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"cmd wait %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Run Test 4</span><br><span class="line">2019/06/06 18:06:49 read line err EOF</span><br><span class="line">2019/06/06 18:06:49 read err EOF</span><br><span class="line">2019/06/06 18:06:49 read line test cmd output 5</span><br><span class="line">2019/06/06 18:06:50 read line test cmd output 4</span><br><span class="line">2019/06/06 18:06:51 read line err EOF</span><br><span class="line">2019/06/06 18:06:51 read err EOF</span><br><span class="line">2019/06/06 18:06:51 cmd wait signal: killed</span><br></pre></td></tr></table></figure><h3 id="持续输入指令，交互模式"><a href="#持续输入指令，交互模式" class="headerlink" title="持续输入指令，交互模式"></a>持续输入指令，交互模式</h3><p>有很多命令支持交互模式，我们进入之后就可以持续的输入一些命令，同时获取输出。如<code>openssl</code>命令。</p><p>下面我们需要进入交换模式，执行输入三个命令，并获取输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 持续输入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test5</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">"openssl"</span>)</span><br><span class="line"></span><br><span class="line">stdout, _ := cmd.StdoutPipe()</span><br><span class="line">stderr, _ := cmd.StderrPipe()</span><br><span class="line"></span><br><span class="line">stdin, _ := cmd.StdinPipe()</span><br><span class="line"></span><br><span class="line">cmd.Start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := stderr.Read(buf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read err %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := stdout.Read(buf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read out %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">stdin.Write([]<span class="keyword">byte</span>(<span class="string">"version\n\n"</span>))</span><br><span class="line">stdin.Write([]<span class="keyword">byte</span>(<span class="string">"ciphers -v\n\n"</span>))</span><br><span class="line">stdin.Write([]<span class="keyword">byte</span>(<span class="string">"s_client -connect razeencheng.com:443"</span>))</span><br><span class="line">stdin.Close()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">err := cmd.Wait()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"cmd wait %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，我们就用到了<code>stdin</code>标准输入了。输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Run Test 5</span><br><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> LibreSSL 2.6.5</span></span><br><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> OpenSSL&gt;</span></span><br><span class="line">ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA384</span><br><span class="line">ECDHE-ECDSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(256)  Mac=SHA384</span><br><span class="line">ECDHE-RSA-AES256-SHA    SSLv3 Kx=ECDH     Au=RSA  Enc=AES(256)  Mac=SHA1</span><br><span class="line">ECDHE-ECDSA-AES256-SHA  SSLv3 Kx=ECDH     Au=ECDSA Enc=AES(256)  Mac=SHA1</span><br><span class="line">DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD</span><br><span class="line">DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA256</span><br><span class="line">DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1</span><br><span class="line">...</span><br><span class="line"><span class="meta">OpenSSL&gt;</span><span class="bash"> OpenSSL&gt;</span></span><br><span class="line">4466583148:error:14004410:SSL routines:CONNECT_CR_SRVR_HELLO:sslv3 alert handshake failure:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.260.1/libressl-2.6/ssl/ssl_pkt.c:1205:SSL alert number 40</span><br><span class="line">4466583148:error:140040E5:SSL routines:CONNECT_CR_SRVR_HELLO:ssl handshake failure:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22.260.1/libressl-2.6/ssl/ssl_pkt.c:585:</span><br><span class="line"></span><br><span class="line">CONNECTED(00000005)</span><br><span class="line">---</span><br><span class="line">no peer certificate available</span><br><span class="line">---</span><br><span class="line">No client certificate CA names sent</span><br><span class="line">---</span><br><span class="line">SSL handshake has read 7 bytes and written 0 bytes</span><br><span class="line">---</span><br><span class="line">New, (NONE), Cipher is (NONE)</span><br><span class="line">Secure Renegotiation IS NOT supported</span><br><span class="line">Compression: NONE</span><br><span class="line">Expansion: NONE</span><br><span class="line">No ALPN negotiated</span><br><span class="line">SSL-Session:</span><br><span class="line">    Protocol  : TLSv1.2</span><br><span class="line">    Cipher    : 0000</span><br><span class="line">    Session-ID:</span><br><span class="line">    Session-ID-ctx:</span><br><span class="line">    Master-Key:</span><br><span class="line">    Start Time: 1559815613</span><br><span class="line">    Timeout   : 7200 (sec)</span><br><span class="line">    Verify return code: 0 (ok)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>—END—</p>]]></content>
    
    <summary type="html">
    
      这篇文章主要总结了我在学习使用go os/exec包去调用外部命令的一些方法。
    
    </summary>
    
      <category term="Go学习笔记" scheme="https://razeencheng.com/categories/go-learn/"/>
    
      <category term="Go基础" scheme="https://razeencheng.com/categories/go-learn/Go%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>如何用 Go 调用 Windows API</title>
    <link href="https://razeencheng.com//post/breaking-all-the-rules-using-go-to-call-windows-api.html"/>
    <id>https://razeencheng.com//post/breaking-all-the-rules-using-go-to-call-windows-api.html</id>
    <published>2019-05-22T22:22:35.000Z</published>
    <updated>2021-07-10T09:23:16.412Z</updated>
    
    <content type="html"><![CDATA[<p>有时候为了更好的兼容Windows, 或者我们为了获得更高级别功能的访问权限（如配置或创建JobObjects或安全令牌等），我们需要直接去调用Windows的系统API。 很幸运，我们可以利用<code>syscall</code>包与系统直接通信，不用用到<code>CGO</code> 。 然而，也有不方便的地方，如大多数的API，我们需要依赖不安全 <code>(unsafe)</code>的内存管理。</p><p>这篇文章，主要记录了我在平时开发过程中以及网上收集到的一些关于Windows API调用相关的知识，或者开发模式，方便你遇到类似的情况后，能更快入手。</p><a id="more"></a><blockquote><p>注 <sup>1</sup> 本文完整Demo在<a href="https://github.com/razeencheng/demo-go/tree/master/windows_api" target="_blank" rel="noopener">这里</a>。<br>注<sup>2</sup> 文章中并未严格区分过程与函数。</p></blockquote><h3 id="关于syscall-包"><a href="#关于syscall-包" class="headerlink" title="关于syscall 包"></a>关于<code>syscall</code> 包</h3><p>在Go中，<code>syscall</code>包会由于你指定的系统或架构的不同而编译出不同的结果，因为<code>syscall</code>包里需要编译的函数或类型会根据你指定的编译参数不同而不同。在导入<code>syscall</code>时你必须在代码中指定”build tags” 或 用指定的文件后缀来命名你的文件。 Dave Cheney <a href="https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool" target="_blank" rel="noopener">有篇文章</a>深入的介绍了<code>go build</code>机制，可以看一看。简单来说，</p><ul><li>如果你的文件命名结构是这样的，<code>name_{GOOS}_{GOARCH}.go</code> 或者 <code>name_{GOOS}.go</code>, 那么这个文件只有在指定的<code>GOOS</code>+指定的<code>GOARCH</code>上才会编译。如：<code>myfile_windows_amd64.go</code>只会在<code>amd64</code>架构CPU的Windows上才会编译。 而<code>myfile_windows.go</code>会在Windows上编译，就不限制CPU架构了。</li><li>如果你在go代码顶部增加<code>// +build windows,amd64</code> 注释，那么该文件只会在<code>amd64</code>架构CPU的Windows上才会编译。</li></ul><h3 id="关于-unsafe包"><a href="#关于-unsafe包" class="headerlink" title="关于 unsafe包"></a>关于 <code>unsafe</code>包</h3><p>下面是一段<code>Youtube</code>视频(需要代理)。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/PAAkCSZUG1c?start=830" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>视频中 <code>Rob Pike</code>提到：</p><p><em>With the unsafe package there are no guarantees.</em></p><p>是的，<code>Rob Pike</code>不推荐使用<code>unsafe</code>包，因为它<strong>没有任何保障</strong>。</p><p>那么，为什么说使用<code>unsafe</code>包没有任何保障呢？</p><ol><li><p>Go (运行时) 不能保证内置类型（如切片、字符串）在不同的Go版本中内存结构是完全一样的。而且作为支持垃圾回收的语言，开发者并不知道Go内存管理的细节。<code>unsafe</code>包会暴露一些内部实现或实际的内存地址，这可能会让你做一些超出预期的事情，如你不小心改变了某个指针指向的地址。</p></li><li><p>Go (语言层面) 不能保证不同版本之间会有相同的特征或者函数签名，换句话来说，就是在 <a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">Go 1.x的兼容性承诺</a>中,并不包含<code>unsafe</code>包。</p></li></ol><blockquote><p><strong>Warning:</strong> <em>Avoid <code>unsafe</code> like the plague; if you can help it.</em></p></blockquote><p>这两点都告诉我们，在使用<code>unsafe</code>包的时候，我们需要特别的注意应该怎么去使用。我们必须了解，用<code>unsafe</code>包操作内存时，我们能做什么和不能做什么。而且这也可能会因为不同的Go版本而发生变化，在<code>unsafe</code>的<a href="https://golang.org/pkg/unsafe/" target="_blank" rel="noopener">官方文档</a>中，我们能了解到哪些我们该做，哪些不该做，我们应该密切关注。</p><p><strong>Note:</strong> 从技术上来说，<code>syscall</code>包，也不在 <a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">Go 1.x的兼容性承诺</a>中，因为它也不能保证系统是否向后兼容。不过，从Go1.4开始, go底层基本稳定，只有在操作系统发生变化才会有可能发生更改。而调用<code>Windows DLL</code>的部分改变的可能性比较小，这点对我们是个好消息。</p><p>在<a href="https://godoc.org/golang.org/x/sys/windows" target="_blank" rel="noopener"><code>x/sys/windows</code></a>包中，包含了Go1.x中使用的所有的Windows API调用，你可以直接拿来使用，但注意以下几点：</p><ol><li>该包不在<a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">Go 1.x的兼容性承诺</a>中, 不能保证你的代码稳定，如果想保持稳定，可以切到稳定的Git版本中。</li><li>该包的目标也不是暴露所有的Windows API, 而是为Go标准库其他包提供更便携的接口，如<code>os</code>,<code>time</code>和<code>net</code>包。所以你需要的内容，不一定能在该包找到。</li></ol><p>虽然是这样，但是现在我们知道了该用那些包去调用Windows API了，同时我们也要知道这会有一定的风险。</p><h3 id="Windows-API"><a href="#Windows-API" class="headerlink" title="Windows API"></a>Windows API</h3><p>Microsoft 提供了大部分的<a href="https://docs.microsoft.com/en-us/windows/desktop/apiindex/api-index-portal" target="_blank" rel="noopener">Windows API</a>文档。API是通过Windows安装时的<a href="[https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93](https://zh.wikipedia.org/wiki/动态链接库">DLL(Dynamic Link Library)</a>)发布的。DLL是否可用取决于Windows的版本，但API文档中都会列出API什么时候启用，过时或废弃。</p><h3 id="加载DLL"><a href="#加载DLL" class="headerlink" title="加载DLL"></a>加载DLL</h3><p>要在Go中加载DLL，可以使用<code>syscall.NewLazyDLL</code>或<code>syscall.LoadLibrary</code> 。</p><ul><li><p><code>NewLazyDLL</code>返回一个<code>*LazyDLL</code>，懒加载，只在第一次调用其函数时才加载库;</p></li><li><p><code>LoadLibrary</code>是立即加载DLL库。</p></li></ul><p>其实在<code>golang.org/x/sys/windows</code>还支持<code>windows.NewLazySystemDLL</code>的方式加载。这是一种安全的加载方式，它能确保DLL搜索路径被绑定到了Windows系统目录。</p><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><p>当我们加载（懒加载）了DLL库过，我们就要使用<code>dll.NewProc(&quot;ProcName&quot;)</code>去引用一些DLL中的函数(过程)。如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>（</span><br><span class="line">    kernel32DLL = syscall.NewLazyDLL（“kernel32.dll”）</span><br><span class="line">    procOpenProcess = kernel32DLL.NewProc（“OpenProcess”）</span><br><span class="line">）</span><br></pre></td></tr></table></figure><p>一旦有个这些引用，我们就可以<code>Call</code>这个函数本身的方法，或者使用<code>syscall.Syscall</code>函数及其变体进行API调用。使用的过程中发现<code>Call</code>方法更方便，但<code>syscall.Syscall</code>性能更优。根据函数参数的多数，我们可以使用</p><p><code>syscall.Syscall</code>的变体。</p><ul><li><code>syscall.Syscall</code> ：少于4个参数</li><li><code>syscall.Syscall6</code>：4到6个参数</li><li><code>syscall.Syscall9</code>：7到9个参数</li><li><code>syscall.Syscall12</code>：10到12个参数</li><li><code>syscall.Syscall15</code>：13到15个参数</li></ul><p>目前Go v1.12中，无法调用超过15个参数的函数。虽然我从来没有遇到过，但在<a href="https://github.com/golang/go/issues/28434" target="_blank" rel="noopener">于OpenGL中</a>确实有这种情况。</p><h3 id="API函数签名"><a href="#API函数签名" class="headerlink" title="API函数签名"></a>API函数签名</h3><p>在实际调用DLL函数之前，我们必须要了解一下过程所需要的参数，类型，大小。Microsoft将此描述为Windows API文档的一部分。如<code>CreateJobObjectA</code>的过程签名如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">CreateJobObjectA</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  LPSECURITY_ATTRIBUTES lpJobAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">  LPCSTR                lpName</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>也就是说，<code>CreateJobObjectA</code>需要一个指向<code>LPSECURITY_ATTRIBUTES</code>结构的指针，和一个指向C-String的指针（ASCII编码，技术上是<a href="https://en.wikipedia.org/wiki/Windows-1252" target="_blank" rel="noopener">Windows-1252编码</a> ;它与ASCII兼容）。</p><h3 id="C结构与Go结构"><a href="#C结构与Go结构" class="headerlink" title="C结构与Go结构"></a>C结构与Go结构</h3><p>在文档中我们可以搜索到，<code>LPSECURITY_ATTRIBUTES</code>是这么定义的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD  nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL   bInheritHandle;</span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>这时，我们就必须构造一个类似的Go结构来替代它。这时我们可以参考<code>syscall</code>中<a href="https://godoc.org/golang.org/x/sys/windows#SecurityAttributes" target="_blank" rel="noopener">SecurityAttributes</a>的定义。</p><p>在Windows API中，我们可以看到，<code>SecurityAttributes</code>是这么定义的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">SECURITY_ATTRIBUTES</span> &#123;</span></span><br><span class="line">  DWORD  nLength;</span><br><span class="line">  LPVOID lpSecurityDescriptor;</span><br><span class="line">  BOOL   bInheritHandle;</span><br><span class="line">&#125; SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;</span><br></pre></td></tr></table></figure><p>而Go中<a href="https://godoc.org/golang.org/x/sys/windows#SecurityAttributes" target="_blank" rel="noopener">SecurityAttributes</a>的定义为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SecurityAttributes <span class="keyword">struct</span> &#123;</span><br><span class="line">    Length             <span class="keyword">uint32</span></span><br><span class="line">    SecurityDescriptor <span class="keyword">uintptr</span></span><br><span class="line">    InheritHandle      <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此我们大概知道， <code>DWORD</code>对应Go <code>uint32</code>， <code>LPVOID (* void)</code>对应<code>uintptr</code>，<code>BOOL</code>对应<code>uint32</code>。所以在你不知道用什么类型来表示C中对应的结构时，你可以去看看<code>syscall</code>或<code>go.sys</code>库中找找，或许能有收获。Windows一些参考类型<a href="https://docs.microsoft.com/en-us/windows/desktop/WinProg/windows-data-types" target="_blank" rel="noopener">这里</a>也有描述。</p><p>然而，了解下面这些常见C类型与Go类型的对应关系会非常有用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">BOOL          <span class="keyword">uint32</span></span><br><span class="line">BOOLEAN       <span class="keyword">byte</span></span><br><span class="line">BYTE          <span class="keyword">byte</span></span><br><span class="line">DWORD         <span class="keyword">uint32</span></span><br><span class="line">DWORD64       <span class="keyword">uint64</span></span><br><span class="line">HANDLE        <span class="keyword">uintptr</span></span><br><span class="line">HLOCAL        <span class="keyword">uintptr</span></span><br><span class="line">LARGE_INTEGER <span class="keyword">int64</span></span><br><span class="line">LONG          <span class="keyword">int32</span></span><br><span class="line">LPVOID        <span class="keyword">uintptr</span></span><br><span class="line">SIZE_T        <span class="keyword">uintptr</span></span><br><span class="line">UINT          <span class="keyword">uint32</span></span><br><span class="line">ULONG_PTR     <span class="keyword">uintptr</span></span><br><span class="line">ULONGLONG     <span class="keyword">uint64</span></span><br><span class="line">WORD          <span class="keyword">uint16</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>在Windows中，一些函数使用的字符串有两种类型：一种是ANSI编码的，一种是UTF-16编码的。</p><p>如<code>CreateProcess</code>函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">    kernel32DLL = syscall.NewLazyDLL(<span class="string">"kernel32.dll"</span>)</span><br><span class="line">    procCreateProcessA = kernel32DLL.NewProc(<span class="string">"CreateProcessA"</span>)</span><br><span class="line">    procCreateProcessW = kernel32DLL.NewProc(<span class="string">"CreateProcessW"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>不管是哪一种，我们都不能直接使用Go中的字符串。这就需要我们去做一些兼容。其实这很简单，只要我们在原始字符串后面加上一个零值即可。如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"unicode/utf16"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringToCharPtr converts a Go string into pointer to a null-terminated cstring.</span></span><br><span class="line"><span class="comment">// This assumes the go string is already ANSI encoded.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToCharPtr</span><span class="params">(str <span class="keyword">string</span>)</span> *<span class="title">uint8</span></span> &#123;</span><br><span class="line">chars := <span class="built_in">append</span>([]<span class="keyword">byte</span>(str), <span class="number">0</span>) <span class="comment">// null terminated</span></span><br><span class="line"><span class="keyword">return</span> &amp;chars[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringToUTF16Ptr converts a Go string into a pointer to a null-terminated UTF-16 wide string.</span></span><br><span class="line"><span class="comment">// This assumes str is of a UTF-8 compatible encoding so that it can be re-encoded as UTF-16.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToUTF16Ptr</span><span class="params">(str <span class="keyword">string</span>)</span> *<span class="title">uint16</span></span> &#123;</span><br><span class="line">wchars := utf16.Encode([]<span class="keyword">rune</span>(str + <span class="string">"\x00"</span>))</span><br><span class="line"><span class="keyword">return</span> &amp;wchars[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>StringToUTF16Ptr</code>在标准库<code>syscall</code>中已经有了。</p><h3 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h3><p>把上面这些知识都用到，我们就可以开始调用一些API了。如我们调用<code>CreateJobObjectW</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">kernel32DLL          = syscall.NewLazyDLL(<span class="string">"kernel32.dll"</span>)</span><br><span class="line">procCreateJobObjectW = kernel32DLL.NewProc(<span class="string">"CreateJobObjectW"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateJobObject uses the CreateJobObjectW Windows API Call to create and return a Handle to a new JobObject</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateJobObject</span><span class="params">(attr *syscall.SecurityAttributes, name <span class="keyword">string</span>)</span> <span class="params">(syscall.Handle, error)</span></span> &#123;</span><br><span class="line">r1, _, err := procCreateJobObjectW.Call(</span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(attr)),</span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(syscall.StringToUTF16Ptr(name))),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != syscall.Errno(<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> syscall.Handle(r1), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管调用哪个API，<code>Call</code>的模式都是一样的。</p><p>而且<code>syscall.Syscall</code>函数始终返回<code>r1,r2 uintptr,err error</code>， 就最近的实践(windows_amd64)来看，基本可以确定:</p><ul><li><p>r1 始终返回 <code>syscall</code>的值；</p></li><li><p>r2 暂且使用；</p></li><li><p>err 返回调用Windows API<code>GetLastError</code>的结果，这是<code>syscall</code>自动调用的。</p></li></ul><p>而你传入<code>Call</code>中的值必须全部是<code>uintptr</code>，不管你原来的类型是什么。但，Go的指针很特别。</p><p>由于Go支持垃圾回收，标准的Go指针不是直接指向了物理内存中的一个地址。Go在运行时可以轻松的修改Go指针指向的物理内存地址，如增加堆栈时。当我们把一个Go指针通过<code>unsafe.Pointer</code>转换成<code>uintptr</code>时，对Go运行时来说，该指针变成了一个未被Go运行时追踪对一个数字而已。即使在下一个指令内，我们也无法确定这个数字指向的是否是它原来指向的那块有效的内存！</p><p>正因为如此，我们必须在Syscalls调用时，将指针指向确定的内存。使用<code>uintptr(unsafe.Pointer(&amp;x))</code>构造一个参数，告诉编译器，在Syscall期间不能修改x的内存空间。这样，C函数就能正常的去处理该指针了，直到Syscall返回为止。</p><p>在<a href="https://golang.org/pkg/unsafe/#Pointer" target="_blank" rel="noopener">godoc for unsafe.Pointer中</a>中写明了四种<code>unsafe.Pointers</code>的操作方式原则。这里用到</p><blockquote><p>(4) Conversion of a Pointer to a uintptr when calling syscall.Syscall.</p></blockquote><h3 id="获取原始数据"><a href="#获取原始数据" class="headerlink" title="获取原始数据"></a>获取原始数据</h3><p>有时，Syscall会自动为你填充C结构的内存块，如果你要使用就必须将其转化为可用的类型。</p><p>许多API的一般调用模式如下：</p><ol><li><p>通过空缓冲区调用一次API，指定一个获取缓冲区长度的变量，获取缓冲区的实际大小；</p></li><li><p>API返回<code>ERROR_INSUFFICIENT_LENGTH</code>错误，同时将长度值更新为实际需要的长度；</p></li><li><p>指定一个实际长度的扩展缓冲区，重新调用；</p></li><li><p>调用成功。</p></li></ol><p>如，我们需要调用<code>GetExtendedTcpTable</code>函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IPHLPAPI_DLL_LINKAGE DWORD <span class="title">GetExtendedTcpTable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  PVOID           pTcpTable,</span></span></span><br><span class="line"><span class="function"><span class="params">  PDWORD          pdwSize,</span></span></span><br><span class="line"><span class="function"><span class="params">  BOOL            bOrder,</span></span></span><br><span class="line"><span class="function"><span class="params">  ULONG           ulAf,</span></span></span><br><span class="line"><span class="function"><span class="params">  TCP_TABLE_CLASS TableClass,</span></span></span><br><span class="line"><span class="function"><span class="params">  ULONG           Reserved</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>GetExtendedTcpTable</code>返回的数据为<code>pTcpTable</code> 和 <code>pdwSize</code> ， 思路如下:</p><ol><li>我们第一次将<code>pTcpTable</code>直接指一个0值，使用<code>dwSize</code>来获取<code>pTcpTable</code>的实际长度；</li><li>这时，会返回错误<code>ERROR_INSUFFICIENT_BUFFER</code>, 同时<code>dwSize</code>的值被设置成了<code>pTcpTable</code>的实际大小；</li><li>指定一个<code>dwSize</code>大小的<code>[]byte</code>接收数据；</li><li>成功。</li></ol><p>部分代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  iphlpapiDLL             = syscall.NewLazyDLL(<span class="string">"iphlpapi.dll"</span>)</span><br><span class="line">procGetExtendedTcpTable = iphlpapiDLL.NewProc(<span class="string">"GetExtendedTcpTable"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetExtendedTcpTable function retrieves a table that contains a list of TCP endpoints available to the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetExtendedTcpTable</span><span class="params">(order, ulAf, tableClass <span class="keyword">uint32</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dwSize <span class="keyword">uint32</span></span><br><span class="line">ret, _, err := procGetExtendedTcpTable.Call(</span><br><span class="line"><span class="number">0</span>,                                <span class="comment">// PVOID</span></span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(&amp;dwSize)), <span class="comment">// PDWORD</span></span><br><span class="line"><span class="keyword">uintptr</span>(order),                   <span class="comment">// BOOL</span></span><br><span class="line"><span class="keyword">uintptr</span>(ulAf),                    <span class="comment">// ULONG</span></span><br><span class="line"><span class="keyword">uintptr</span>(tableClass),              <span class="comment">// TCP_TABLE_CLASS</span></span><br><span class="line"><span class="number">0</span>,                                <span class="comment">// ULONG</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> ret == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"get extended tcp table size failed code %x"</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> syscall.Errno(ret) == syscall.ERROR_INSUFFICIENT_BUFFER &#123;</span><br><span class="line">buffer := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="keyword">int</span>(dwSize))</span><br><span class="line"></span><br><span class="line">ret, _, err := procGetExtendedTcpTable.Call(</span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(&amp;buffer[<span class="number">0</span>])),</span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(&amp;dwSize)),</span><br><span class="line"><span class="keyword">uintptr</span>(order),</span><br><span class="line"><span class="keyword">uintptr</span>(ulAf),</span><br><span class="line"><span class="keyword">uintptr</span>(tableClass),</span><br><span class="line"><span class="keyword">uintptr</span>(<span class="keyword">uint32</span>(<span class="number">0</span>)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ret != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"get extended tcp table failed code %x"</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> buffer, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(err, <span class="string">"get extended tcp table size failed code %x"</span>, ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看过<a href="https://docs.microsoft.com/en-us/windows/desktop/api/iphlpapi/nf-iphlpapi-getextendedtcptable" target="_blank" rel="noopener">上面函数的API</a>，你应该会知道输入参数<code>ulAf</code>和<code>TableClass</code>的值 决定了输出的buffer具体的内容。</p><p>如果我们输入的是<code>AF_INET + TCP_TABLE_OWNER_PID_ALL</code> 那么我们得到的数据的实际结构应该是<a href="https://docs.microsoft.com/en-us/windows/desktop/api/tcpmib/ns-tcpmib-_mib_tcptable_owner_pid" target="_blank" rel="noopener"><code>MIB_TCPTABLE_OWNER_PID</code></a>，其结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MIB_TCPTABLE_OWNER_PID</span> &#123;</span></span><br><span class="line">  DWORD                dwNumEntries;</span><br><span class="line">  MIB_TCPROW_OWNER_PID table[ANY_SIZE];</span><br><span class="line">&#125; MIB_TCPTABLE_OWNER_PID, *PMIB_TCPTABLE_OWNER_PID;</span><br></pre></td></tr></table></figure><p>这里第一个参数<code>dwNumEntries</code>指明有<code>MIB_TCPROW_OWNER_PID</code> table的数量。</p><p>而第二个参数则是一个变长的数组。。。 那么我们该怎么用Go去表示呢？</p><h3 id="处理变长数据"><a href="#处理变长数据" class="headerlink" title="处理变长数据"></a>处理变长数据</h3><p>其实我们可以利用数组来创建一个兼容该结构的Go结构，这要得益于Go中数组的内存布局为连续的内存区域。</p><p>我们定义的对应结构如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MIB_TCPTABLE_OWNER_PID <span class="keyword">struct</span> &#123;</span><br><span class="line">dwNumEntries <span class="keyword">uint32</span></span><br><span class="line">table        [<span class="number">1</span>]MIB_TCPROW_OWNER_PID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MIB_TCPROW_OWNER_PID <span class="keyword">struct</span> &#123;</span><br><span class="line">dwState      <span class="keyword">uint32</span></span><br><span class="line">dwLocalAddr  [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">dwLocalPort  <span class="keyword">uint32</span></span><br><span class="line">dwRemoteAddr [<span class="number">4</span>]<span class="keyword">byte</span></span><br><span class="line">dwRemotePort <span class="keyword">uint32</span></span><br><span class="line">dwOwningPid  <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会说，怎么<code>table</code>的长度只为1，这里先存个疑问。</p><p>现在我们首先要知道<code>dwNumEntries</code>的大小，我们才能确定table的数量。于是利用<code>unsafe.Pointer</code>将buffer内的数据转换为Go结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pTable := (*MIB_TCPTABLE_OWNER_PID)(unsafe.Pointer(&amp;buffer[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>这里，我们将一个指针指向缓冲区的第一个字节的内存地址，然后利用<code>unsafe.Pointer</code>我们可以将该指针转换为任意类型的指针。其实这个操作是非常危险的，如果你不知道为什么要转换的话。这里我们能转化是因为我们遵循<code>unsafe.Pointer</code><a href="https://golang.org/pkg/unsafe/" target="_blank" rel="noopener">文档中的第一条</a>：</p><blockquote><p>(1) Conversion of a <em>T1 to Pointer to </em>T2.</p><p>Provided that T2 is no larger than T1 and that the two share an equivalent memory layout, this conversion allows reinterpreting data of one type as data of another type.</p></blockquote><p>也就是说，要把*T1转换为*T2，那么T2的长度必须比T1的长，而且T1,T2的内存布局必须相同。</p><p>那么，刚刚我们把table 的类型指定为<code>[1]MIB_TCPROW_OWNER_PID</code>, 长度为1显然不是正确的大小。但这没关系，因为<code>[1]MIB_TCPROW_OWNER_PID</code>的长度肯定是小于实际<code>[1+N]MIB_TCPROW_OWNER_PID</code>的长度的。而且他们的内存布局是一样的。</p><p>由于此时，我们已经知道了<code>dwNumEntries</code>的大小，我们可以使用<code>unsafe.Pointer</code>的另一规则来遍历获取数组。</p><blockquote><p>(3) Conversion of a Pointer to a uintptr and back, with arithmetic.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rows := <span class="built_in">make</span>([]MIB_TCPROW_OWNER_PID, <span class="keyword">int</span>(pTable.dwNumEntries))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(pTable.dwNumEntries); i++ &#123;</span><br><span class="line">rows[i] = *(*MIB_TCPROW_OWNER_PID)(unsafe.Pointer(</span><br><span class="line"><span class="keyword">uintptr</span>(unsafe.Pointer(&amp;pTable.table[<span class="number">0</span>])) +</span><br><span class="line"><span class="keyword">uintptr</span>(i)*unsafe.Sizeof(pTable.table[<span class="number">0</span>])))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们利用<code>规则 (3)</code>迭代已知长度的数组，因为我们知道第一个元素的位置，每个元素的大小，元素的个数，以及结构在内存中的布局是连续的。</p><p>这里还有一个更简单的方法，能让我们直接获取table的数据:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rows2 := ((*[<span class="number">1</span> &lt;&lt; <span class="number">30</span>]MIB_TCPROW_OWNER_PID)(unsafe.Pointer(&amp;pTable.table[<span class="number">0</span>]))[:<span class="keyword">int</span>(pTable.dwNumEntries):<span class="keyword">int</span>(pTable.dwNumEntries)])</span><br></pre></td></tr></table></figure><p>这种做法一开始就将这个指针转换成一个非常大的数组指针，然后使用正确的长度取获取实际的内容。好处是不用创建其他切片，复制数据；缺点就是我们需要分配一个足够大的内存去接收，这个大小各平台会有一些差异。</p><p>你可以在这里体验一下<a href="https://play.golang.org/p/1XN1bLer-se" target="_blank" rel="noopener">Go Playground</a>。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>现在你应该知道了调用Windows API的一些基本步骤与方法，如果遇到问题可以留言，我们一起解决～</p><ul><li>原文<a href="https://medium.com/jettech/breaking-all-the-rules-using-go-to-call-windows-api-2cbfd8c79724" target="_blank" rel="noopener">Breaking all the rules: Using Go to call Windows API</a> 有所改动。</li></ul>]]></content>
    
    <summary type="html">
    
      在Go中，我们可以很轻松的利用syscall包调用Windows API去做一些更高级/底层的操作。这篇文章，主要记录了我在平时开发过程中以及网上收集到的一些关于Windows API调用相关的知识，或者开发模式，方便你遇到类似的情况后，能更快入手。
    
    </summary>
    
      <category term="Go学习笔记" scheme="https://razeencheng.com/categories/go-learn/"/>
    
    
      <category term="golang" scheme="https://razeencheng.com/tags/golang/"/>
    
  </entry>
  
</feed>
